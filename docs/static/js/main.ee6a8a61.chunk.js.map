{"version":3,"sources":["serviceWorker.ts","core/BaseEntity.ts","core/validators/NumberValidator.ts","core/validators/StringValidator.ts","core/validators/DateValidator.ts","core/ValidationError.ts","entities/User.ts","hooks/useAuth.tsx","layout/ChooseLayout/styles.ts","layout/MonitorLayout/styles.ts","views/RenderJobsView/styles.ts","components/RenderJobsTable/styles.ts","components/Progress/styles.ts","components/Progress/Progress.tsx","utils/Rest.ts","hooks/useCoreRequest.ts","entities/ShortJobs.ts","utils/enqueueErrorSnackbar.ts","components/Loading/styles.ts","components/Loading/Loading.tsx","core/WebSocketMessage.ts","core/CoreEventDispatcher.ts","globals.ts","utils/ErrorHandler.ts","components/RenderJobsTable/RenderJobsTable.tsx","components/SimpleList/styles.ts","components/ListItemProgress/styles.ts","components/ListItemProgress/ListItemProgress.tsx","components/SimpleList/SimpleList.tsx","views/RenderJobsDetailsView/styles.ts","components/Tabs/styles.ts","components/Tabs/Tabs.tsx","components/TabsPanel/styles.ts","components/TabsPanel/TabsPanel.tsx","views/RenderJobsDetailsView/Tabs/TasksTab/styles.ts","entities/Task.ts","views/RenderJobsDetailsView/LocalComponents/DialogTaskLogs/styles.ts","components/LogField/styles.ts","components/LogField/LogField.tsx","views/RenderJobsDetailsView/LocalComponents/DialogTaskLogs/DialogTaskLogs.tsx","views/RenderJobsDetailsView/Tabs/TasksTab/TasksTab.tsx","views/RenderJobsDetailsView/Tabs/InfoTab/styles.ts","components/DataTextField/styles.ts","components/DataTextField/DataTextField.tsx","views/RenderJobsDetailsView/Tabs/InfoTab/InfoTab.tsx","views/RenderJobsDetailsView/Tabs/StatisticsTab/styles.ts","views/RenderJobsDetailsView/Tabs/StatisticsTab/StatisticsTab.tsx","views/RenderJobsDetailsView/RenderJobsDetailsView.tsx","views/RenderJobsView/RenderJobsView.tsx","views/UserPageView/styles.ts","views/UserPageView/githubAvatar.jpg","views/UserPageView/LocalComponents/TokensViewer/styles.ts","utils/EnqueSuccessSnackbar.ts","views/UserPageView/LocalComponents/TokensViewer/TokensViewer.tsx","views/UserPageView/UserPageView.tsx","views/OrganizationPageView/styles.ts","views/OrganizationPageView/LocalComponents/TopicWithButton/styles.ts","views/OrganizationPageView/LocalComponents/TopicWithButton/TopicWithButton.tsx","views/OrganizationPageView/LocalComponents/PluginComponent/styles.ts","views/OrganizationPageView/LocalComponents/PluginComponent/PluginComponent.tsx","hooks/useConfirm.tsx","views/OrganizationPageView/LocalComponents/DialogUser/styles.ts","components/SearchBar/styles.ts","components/SearchBar/SearchBar.tsx","views/OrganizationPageView/LocalComponents/DialogUser/DialogUser.tsx","views/OrganizationPageView/LocalComponents/DialogAddUsers/styles.ts","views/OrganizationPageView/LocalComponents/DialogAddUsers/DialogAddUsers.tsx","views/OrganizationPageView/LocalComponents/DialogAddRoles/styles.ts","components/ColorPicker/styles.ts","components/ColorPicker/ColorPicker.tsx","views/OrganizationPageView/LocalComponents/RoleToggles/styles.ts","views/OrganizationPageView/LocalComponents/RoleToggles/RoleToggles.tsx","utils/IdGenerator.ts","views/OrganizationPageView/LocalComponents/DialogAddRoles/DialogAddRoles.tsx","views/OrganizationPageView/LocalComponents/DialogPluginInfo/styles.ts","theme.ts","views/OrganizationPageView/LocalComponents/DialogPluginInfo/DialogPluginInfo.tsx","views/OrganizationPageView/LocalComponents/DialogSlave/styles.ts","views/OrganizationPageView/LocalComponents/DialogSlave/DialogSlave.tsx","views/OrganizationPageView/OrganizationPageView.tsx","views/SubmitPageView/styles.ts","views/SubmitPageView/LocalComponents/PluginInput/styles.ts","components/SeparatorPluginField/styles.ts","components/SeparatorPluginField/SeparatorPluginField.tsx","components/BooleanPluginField/styles.ts","components/BooleanPluginField/BooleanPluginField.tsx","components/RenderJobCustomFields/StringPluginField/styles.ts","components/RenderJobCustomFields/StringPluginField/StringPluginField.tsx","components/RenderJobCustomFields/IntegerPluginField/styles.ts","components/RenderJobCustomFields/IntegerPluginField/IntegerPluginField.tsx","components/RenderJobCustomFields/FloatPluginField/styles.ts","components/RenderJobCustomFields/FloatPluginField/FloatPluginField.tsx","views/SubmitPageView/LocalComponents/PluginInput/PluginInput.tsx","views/SubmitPageView/LocalComponents/DialogPlugin/styles.ts","views/SubmitPageView/LocalComponents/DialogPlugin/DialogPlugin.tsx","views/SubmitPageView/LocalComponents/DialogAddFrameRange/styles.ts","views/SubmitPageView/LocalComponents/DialogAddFrameRange/DialogAddFrameRange.tsx","views/SubmitPageView/SubmitPageView.tsx","views/CreateOrganizationPageView/styles.ts","views/CreateOrganizationPageView/CreateOrganizationPageView.tsx","views/UserEditView/styles.ts","views/UserEditView/UserEditView.tsx","layout/MonitorLayout/images/AtlasSystemsLogo.svg","views/CreatePluginPageView/styles.ts","views/CreatePluginPageView/LocalComponents/PluginCreation/styles.ts","views/CreatePluginPageView/LocalComponents/DragableComponents/DragableSubject/styles.ts","views/CreatePluginPageView/LocalComponents/DragableComponents/DragableSubject/DragableSubject.tsx","views/CreatePluginPageView/LocalComponents/DragableComponents/Folder/styles.ts","entities/BasicPluginField.ts","entities/GroupField.ts","entities/IntegerField.ts","entities/SeparatorField.ts","entities/StringField.ts","entities/BooleanField.ts","entities/FloatField.ts","views/CreatePluginPageView/LocalComponents/DragableComponents/Folder/Folder.tsx","views/CreatePluginPageView/LocalComponents/DragableListItem/styles.ts","views/CreatePluginPageView/LocalComponents/DragableListItem/DragableListItem.tsx","views/CreatePluginPageView/LocalComponents/PluginFieldSettings/styles.ts","views/CreatePluginPageView/LocalComponents/PluginFieldSettings/PluginFieldSettings.tsx","views/CreatePluginPageView/LocalComponents/PluginCreation/PluginCreation.tsx","components/FilesLoader/styles.ts","entities/TempFile.ts","components/FilesLoader/FilesLoader.tsx","views/CreatePluginPageView/CreatePluginPageView.tsx","components/MenuElement/styles.ts","components/MenuElement/MenuElement.tsx","layout/MonitorLayout/MonitorLayout.tsx","layout/MainPageLayout/styles.ts","components/Header/styles.ts","components/Header/Header.tsx","views/AuthorizationPageView/style.ts","views/AuthorizationPageView/AuthorizationPageView.tsx","views/SignUpPage/styles.ts","views/SignUpPage/SignUpPage.tsx","layout/MainPageLayout/MainPageLayout.tsx","layout/ChooseLayout/ChooseLayout.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","BaseEntity","name","__entityName","this","NumberValidator","value","isNaN","undefined","error","StringValidator","stringValue","DateValidator","Date","valueCopy","parse","ValidationError","message","validation","Error","User","user","id","username","email","deleted","createdAt","updatedAt","bearer","validationMap","key","Context","React","createContext","getUser","isLogged","login","logout","AuthProvider","props","children","useState","logged","setLogged","setUser","loaded","setLoaded","changeStorage","event","newValue","localStorage","auth","useEffect","localStorageUser","credentials","JSON","String","getUserFromLocalStorage","addEventListener","removeEventListener","Provider","stringify","displayName","useAuth","useContext","styles","theme","createStyles","drawerWidth","root","display","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","padding","justifyContent","content","flexGrow","down","list","fullList","popperTop","marginTop","typographyFlex","header","background","palette","dark","color","common","white","rightSideMenu","container","maxHeight","textMain","margin","fontWeight","box","loading","height","marginBottom","progress","minWidth","iconButton","top","cell","LinearProgressWithLabel","Box","mr","LinearProgress","variant","Typography","Math","round","Progress","forwardRef","ref","classes","className","jobProgress","setJobProgress","clsx","withStyles","coreRequest","path","middleware","endPoint","requestMiddleware","request","accept","requestLog","p","s","console","log","post","route","url","superagent","put","delete","get","process","useCoreRequest","defaultPath","set","ShortJobs","job","attemptsPerTaskLimit","description","failed","frameRange","organization","doneTasks","failedTasks","pendingTasks","processingTasks","pluginSettings","submitter","attempts_per_task_limit","useEnqueueErrorSnackbar","enqueueSnackbar","useSnackbar","anchorOrigin","vertical","horizontal","Loading","Fragment","CircularProgress","size","WebSocketMessage","input","type","payload","TypeError","CoreEventDispatcher","instance","token","disconnect","qs","ws","WebSocket","onopen","onclose","wasClean","code","reason","onerror","onmessage","data","emit","SyntaxError","close","EventEmitter","WS_RENDER_JOB_UPDATE","WS_RENDER_JOB_CREATE","WS_RENDER_JOB_DELETE","WS_RENDER_JOB_ATTEMPT_LOG_CREATE","WS_RENDER_TASK_UPDATE","ErrorHandler","errorSnackbar","handlers","enqueueErrorSnackbar","status","handler","err","response","body","RenderJobsTable","changeRoute","useChangeRoute","useTheme","page","setPage","rowsPerPage","setRowsPerPage","jobs","setJobs","handleGetJobs","a","Array","isArray","map","item","on","handle","createListener","query","then","prev","catch","deleteListener","res","jobIndex","findIndex","updatedJobs","splice","updateListener","getInstance","addListener","Promise","all","removeListener","Grid","xs","IconButton","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","slice","green","blue","orange","style","hover","role","tabIndex","onClick","panel","component","scope","format","isWidthUp","TablePagination","rowsPerPageOptions","count","length","onChangePage","newPage","onChangeRowsPerPage","target","withWidth","backgroundColor","paper","paddingNone","itemListMargin","ListItemProgress","other","ListItem","lightBlue","SimpleList","List","button","ListItemText","primary","secondary","pathText","grey","mainText","progressMargin","dividerMargin","pluginMargin","boxContainer","borderRadius","boxContainerTitle","fontSize","boxContainerText","customTabsMargin","normalContent","fullWidth","paddingToolbar","a11yProps","index","CustomTabs","onChange","onChangeIndex","Toolbar","Tabs","indicatorColor","textColor","Tab","label","axis","direction","TabsPanel","hidden","aria-labelledby","iconVisible","Task","task","frame","baseDarkColors","main","dialogContainer","counterReset","dialogTitle","textAlign","row","counterIncrement","borderRight","paddingRight","rowText","overflowWrap","fontFamily","buttonGroupContainer","button1","border","borderBottom","button2","button3","LogField","handleGetLogs","logs","setLogs","refDiv","useRef","refList","handleChangeScroll","current","Visible","scrollIntoView","behavior","targetPosition","pageYOffset","getBoundingClientRect","windowPosition","bottom","document","documentElement","clientHeight","offsetTop","scrollTop","offsetHeight","logStrings","split","string","TabPanel","DialogTaskLogs","open","onClose","taskId","attemptsId","setAttemptsId","setValue","attemptIndex","logIsLoaded","setLogIsLoaded","autoUpload","setAutoUpload","autoDownScroll","setAutoDownScroll","refUpload","listener","attemptId","attempts","firstAttemptId","attempt","handleGetLogs2","sendData","Dialog","maxWidth","DialogTitle","AppBar","position","dir","ButtonGroup","Button","TasksTab","getRouteParams","tasks","setTasks","openDialog","setOpenDialog","currentTaskId","setCurrentTaskId","taskIndex","handleGetTasks","elevation","DataTextField","createData","cellName","cellContent","rows","InfoTab","table","useMediaQuery","chartHeight","time","slaves","StatisticsTab","Divider","md","valueField","argumentField","text","sm","RenderJobsDetailsView","isOpen","setIsOpen","renderJob","setRenderJob","handleGetJob","entity","tasksTab","useRouteMatch","exact","Chip","start","end","RenderJobsView","tableList","containerToken","flexDirection","avatar","paddingLeft","topic","typographyToken","firstLine","listStyleType","paddingBottom","lastToken","light","newToken","tokenAdd","spacingBetweenButtonFix","spacingInNewToken","topMargin","generatedToken","textWrap","noWrap","flexWrap","createTokenControls","wrapWord","wordWrap","wordBreak","closeButtonColor","copyClipboardHover","red","useEnqueueSuccessSnackbar","TokensViewer","tokens","setTokens","isButtonActive","setIsButtonActive","setNewToken","lastAddedToken","setLastAddedToken","errors","setErrors","enqueueSuccessSnackbar","handleGetTokens","handleInputToken","persist","handleAddToken","noInputError","nameError","descriptionError","send","handleRemoveToken","tokenId","filter","handleClick","handleIsButtonActive","copyToClipboard","str","el","createElement","setAttribute","left","appendChild","select","execCommand","removeChild","handleValidation","tokenView","primaryTypographyProps","ListItemSecondaryAction","edge","TextField","required","onBlur","Collapse","in","timeout","unmountOnExit","autoFocus","UserPageView","userData","setUserData","handleGetToken","handleGetUser","userId","mainInfo","Avatar","alt","src","githubAvatar","actions","organizations","ListItemAvatar","nameDescription","settingButtongAlign","flexAlignment","itemsRowBackground","selectFieldStyle","avatarBox","colorBar","rolesDescription","overflow","textOverflow","rolesPrimary","roleItem","TopicWithButton","can","listRoot","PluginComponent","plugin","invokeDialog","setCurrentPlugin","ConfirmContext","ConfirmProvider","setContent","setOpen","onAccept","settings","useLayoutEffect","setTimeout","title","DialogContentText","DialogActions","onDismiss","dismiss","useConfirm","dialog","dialogUsers","avatarContainer","notFound","info","userContainer","menuPaper","menuRoleBar","menuHeader","menuListItemText","listItemHeader","dangerZoneContainer","dangerZoneButton","dangerZoneHeader","dangerZoneDivider","search","shape","fade","searchIcon","pointerEvents","inputRoot","inputInput","paddingNoneBottom","searchInput","iconSearch","cursor","SearchBar","FormControl","InputBase","placeholder","endAdornment","InputAdornment","startAdornment","DialogUser","roles","onRemove","onAddRole","onRemoveRole","confirm","loggedUser","isAddRoleToUserButtonActive","setIsAddRoleToUserButtonActive","filterRoles","setFilterRoles","searchValue","setSearchValue","toLowerCase","includes","currentTarget","Popover","menu","anchorEl","keepMounted","transformOrigin","borderLeft","searchBar","DialogAddUsers","newUsers","allUsers","onNewUserClick","onAdduser","availableUsers","Checkbox","checked","disableFocusRipple","disableTouchRipple","disableRipple","inputProps","dialogRoles","gridPadding","newRole","makeDefaultButton","yellow","disabledButton","defaultContainer","inputContainer","inputAdornment","insideInput","ColorPicker","inputColor","handleGetInvalidColor","setColor","setError","isValidHex","substring","test","defaultColor","boxShadow","newColor","getContrastText","maxLength","scroll","RoleToggles","handleSwitch","addRole","Switch","canManageUsers","canCreateJobs","canEditJobs","canDeleteJobs","canManageRoles","canManagePlugins","canManageTeams","canEditAudit","IdGenerator","DialogAddRoles","modify","onModifyRole","isDefault","onExited","counterId","idGenerator","next","willBeDefault","setWillBeDefault","invalidColor","setInvalidColor","permissionLevel","setAddRole","permissionLevelError","handleInputRole","handleOnClose","multiline","rowsMax","disabled","pluginDialogTitle","maxDialogWidth","descriptionPadding","descriptionListItem","mainBox","boxWithInfo","readmeBox","readme","descriptionOverflow","noReadme","settingSpecList","createMuiTheme","blueGrey","baseLightColors","baseColors","DialogPluginInfo","currentPlugin","readMe","tabsColor","paddingTop","version","secondaryTypographyProps","note","rules","getType","minHeight","field","DialogSlave","slaveEnv","slaveEnvArray","setSlaveEnvArray","prevSlaveEnvArray","setPrevSlaveEnvArray","editable","setEditable","array","Object","entries","array2","forEach","push","handleChangeSlaveEnv","fieldIndex","handleChangeEditable","slaveEnvArrayCopy","handleDeleteSlaveEnv","OrganizationPageView","isAddRoleButtonActive","setIsAddRoleButtonActive","isDialogModifyRoleButtonActive","setIsDialogModifyRoleButtonActive","setIsRemoveRoleFromUserButtonActive","setIsModifyRoleButtonActive","setRoles","roleToChange","setRoleToChange","openDialogSlave","setOpenDialogSlave","setIsUserActive","isUserSettingsButtonActive","setIsUserSettingsButtonActive","organizationData","setOrganizationData","setAllUsers","setNewUsers","setAvailableUsers","organizationUsers","setOrganizationUsers","currentUser","setCurrentUser","defaultRoleId","setDefaultRoleId","plugins","setPlugins","dialogPluginButton","setDialogPluginButton","setIsDefault","handleGetOrganization","handleGetAllUsers","handleGetOrganizationUsers","handleGetRoles","handleGetPlugins","handleGetAvailableUsers","orgUsers","uToAdd","u","orgUser","checkUserPermissions","canManage","ownerUser","roleId","handleAddRole","roleToAdd","addNewRole","handleModifyRole","roleToModify","roleToSent","handleIsDialogModifyRoleButtonActive","handleGetRoleById","handleOpenDialogSlave","defaultRole","handleSetCurrentPlugin","PluginSettingsSpec","slave","ListItemIcon","newUserId","newUsersArray","usersToAddId","userIds","handleIsUserSettingsButtonActive","usersToDeleteIds","userToAddRoleId","userToRemoveRoleId","flexNoWrap","flexItem","buttonAdd","submitButton","chipStyle","selectMargin","gridContainer","headerSettings","separator","SeparatorPluginField","BooleanPluginField","setPluginSetting","default","handleChange","toUpperCase","StringPluginField","sliderStyles","thumb","rail","IntegerPluginField","slider","setSlider","finalValue","setFinalValue","inputRef","min","setMin","max","setMax","abs","onKeyPress","blur","Slider","defaultValue","valueLabelDisplay","step","FloatPluginField","PluginInput","pluginId","setPlugin","handleGetPlugin","temp","pluginCopy","pluginContainer","DialogPlugin","getPlugin","organizationId","chosenPlugin","setChosenPlugin","filterPlugins","setFilterPlugins","addButton","DialogAddFrameRange","onAddFrame","renumberStart","renumberStep","setFrame","errorStart","errorEnd","errorStep","errorRenumberStart","errorRenumberStep","handleChangeFrame","validate","isInteger","SubmitPageView","userOrgs","setUserOrgs","org","setOrg","setFrameRange","setJob","openAddFrameDialog","setOpenAddFrameDialog","errorName","errorAttempts","errorDescription","userOrganizations","handleInput","submitInfo","renderSettings","InputLabel","Select","labelId","MenuItem","handleOrgChange","InputLabelProps","shrink","IntegerField","disablePadding","disableGutters","onDelete","copyFrameRange","handleDelete","sidePaddingsNone","sidePaddings","listHeader","divider","minWidthList","emptyRolesList","CreateOrganizationPageView","addRoleButton","setAddRoleButton","setModify","setName","setDescription","nameMessage","descriptionMessage","setDefaultRole","owner","setOwner","setRoleToModify","users","setUsers","members","setMembers","addMemberButton","setAddMemberButton","availableMembers","i","deleteRole","elem","errorHandler","handleGetOwner","helperText","justify","person","mem","orgCreation","newMember","member","sentRoles","defaultRoleToSent","editFieldsContainer","editField","UserEditView","password","editedUser","setEditedUser","handleChangeUser","handleDeleteUser","dialogSize","rootFolder","draggingContainer","useDrag","collect","monitor","isDragging","drag","opacity","folder","BasicPluginField","GroupField","nested","SeparatorField","StringField","BooleanField","FloatField","context","PluginContext","useDrop","drop","didDrop","handleAddPluginField","isOver","isOverCurrent","shallow","moveCard","getIndex","refer","dragIndex","hoverIndex","hoveredRect","hoverMiddleY","hoveredClientY","getClientOffset","y","typographyText","listPadding","PluginFieldSettings","pluginField","typeIS","setTypeIS","errorIds","handleInputField","targetValue","handleEditPluginField","pluginFields","handleDeleteErrorsIds","labelError","minError","maxError","defaultError","PluginCreation","move","onAddField","setFieldIndex","setRootFolder","niceName","addField","setAddField","getFieldIndex","handleDeletePluginField","rootDrag","dropzone","userSelect","dropzoneDrag","textContainer","TempFile","getNextFileId","FilesLoader","onBeforeLoad","onLoaded","onError","onProgress","multiple","getFileId","tempFiles","setTempFiles","onDrop","useCallback","inputFiles","targets","deleteFile","file","finally","clearTempFiles","files","newFile","attach","total","targetId","candidate","result","useDropzone","getRootProps","getInputProps","isDragActive","find","deleteByLocalId","moveField","inputArray","toId","objectToAdd","handleGetErrorIndexes","CreatePluginPageView","getNextId","setPluginFields","setErrorIds","isDialogPluginButtonActive","setIsDialogPluginButtonActive","handlePluginChange","draggedField","update","$splice","handleGetErrorIds","handleCheckValidation","copy","remove","findField","callback","findTarget","newArray","callbackArray","finalArray","callbackFinalArray","callbackResult","saveFieldTo","errorId","validated","fields","getNested","listIcon","listText","MenuElement","Icon","icon","MonitorLayout","state","setState","setAnchorEl","setUserId","setOrganizations","useLocation","connect","pathname","handleGetUserOrganizations","handleClose","toggleDrawer","anchor","CssBaseline","AtlasLogo","aria-describedby","Drawer","WorkIcon","PersonIcon","CheckIcon","AddIcon","SwipeableDrawer","onOpen","onKeyDown","ChangeRoute","routeMask","DndProvider","backend","HTML5Backend","Header","form","submit","AuthorizationPageView","usernameError","usernameMessage","passwordError","passwordMessage","setCredentials","Container","autoComplete","FormControlLabel","control","preventDefault","keyError","dataPath","substr","keyMessage","keyword","Link","href","SignUpPage","emailError","emailMessage","MainPageLayout","ChooseLayout","ReactDOM","render","StrictMode","ThemeProvider","maxSnack","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee6a8a61.chunk.js","sourcesContent":["/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\n/**\n * BaseEntity - basic entity class.\n * @class\n * @throws ValidationError\n * @author Danil Adnreev\n */\nexport default class BaseEntity {\n    /**\n     * __entityName - system name of this entity.\n     */\n    __entityName: string;\n\n    /**\n     * Creates instance of BaseEntity.\n     * @param name - System name of this entity.\n     * @author Danil Andreev\n     */\n    constructor(name: string) {\n        this.__entityName = name;\n    }\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport ValidatorResult from \"../../interfaces/ValidatorResult\";\n\n/**\n * NumberValidator - checks if value is number or not.\n * @param value\n * @function\n * @author Andrii Demchyshyn\n */\nexport default function NumberValidator(value: any): ValidatorResult<number> {\n    if (isNaN(+value) || typeof value === \"boolean\") {\n        return {value: undefined, error: true};\n    }\n    return {value: +value, error: false};\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport ValidatorResult from \"../../interfaces/ValidatorResult\";\n\n/**\n * StringValidator - checks if value is string or not.\n * @param value\n * @function\n * @author Andrii Demchyshyn\n */\nexport default function StringValidator(value: any): ValidatorResult<string> {\n    let stringValue = value;\n    if (typeof stringValue === \"number\") {\n        stringValue = \"\" + stringValue;\n    }\n    if (stringValue === null) {\n        return {value: stringValue, error: false};\n    }\n    if (typeof stringValue !== \"string\") {\n        return {value: undefined, error: true};\n    }\n    return {value: stringValue, error: false};\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport ValidatorResult from \"../../interfaces/ValidatorResult\";\n\n/**\n * DateValidator - checks for value to ba a Date\n * @function\n * @param value\n * @author Nikita Nesterov\n */\n\nexport default function DateValidator(value: any): ValidatorResult<Date> {\n\n    if (!(typeof value === \"string\" || value instanceof Date)) {\n        return {value: undefined, error: true};\n    } else if (value instanceof Date) {\n        return {value: value, error: false};\n    }\n    let valueCopy = \"\" + value;\n    if (isNaN(Date.parse(valueCopy))) {\n        return {value: undefined, error: true};\n    } else {\n        return {value: new Date(valueCopy), error: false};\n    }\n}\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\n/**\n * ValidationError - validation error.\n * @class\n * @author Danil Andreev\n */\nexport default class ValidationError<T = any> extends Error {\n    /**\n     * validation - validation map of an error.\n     */\n    public readonly validation: T;\n\n    /**\n     * Creates ValidationError instance.\n     * @constructor\n     * @param message - Message for Error.\n     * @param validation - Validation map of an error.\n     * @author Danil Andreev\n     */\n    constructor(message: string, validation: T) {\n        super(message);\n        this.validation = validation;\n    }\n}\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport BaseEntity from \"../core/BaseEntity\";\nimport NumberValidator from \"../core/validators/NumberValidator\";\nimport StringValidator from \"../core/validators/StringValidator\";\nimport DateValidator from \"../core/validators/DateValidator\";\nimport ValidationError from \"../core/ValidationError\";\n\n/**\n * UserValidationMap - interface for User input fields validation.\n * @interface\n * @author Andrii Demchyshyn\n */\nexport interface UserValidationMap {\n    id?: boolean;\n    username?: boolean;\n    email?: boolean;\n    deleted?: boolean;\n    createdAt?: boolean;\n    updatedAt?: boolean;\n    bearer?: boolean;\n}\n\n/**\n * User - creates and validates user entity.\n * @class\n * @author Andrii Demchyshyn\n */\nexport default class User extends BaseEntity {\n    /**\n     * id - unique value of the user\n     */\n    public id: number;\n    /**\n     * username - username of the user\n     */\n    public username: string;\n    /**\n     * email - email of the user\n     */\n    public email: string;\n    /**\n     * deleted - is user deleted\n     */\n    public deleted: boolean;\n    /**\n     * createdAt - date of the user creation\n     */\n    public createdAt: Date;\n    /**\n     * updatedAt - date when user was updated\n     */\n    public updatedAt: Date;\n    /**\n     * bearer bearer of user\n     */\n    public bearer: string;\n\n    /**\n     * constructor - creates an instance of the user entity.\n     * @param user\n     * @constructor\n     * @throws ValidationError\n     * @author Andrii Demchyshyn\n     */\n    constructor(user: any) {\n        super(\"User\");\n        const validationMap: UserValidationMap = {};\n\n        this.id = NumberValidator(user.id).value || 0;\n        validationMap.id = NumberValidator(user.id).error;\n\n        this.username = StringValidator(user.username).value || \"\";\n        validationMap.username = StringValidator(user.username).error;\n\n        this.email = StringValidator(user.email).value || \"\";\n        validationMap.email = StringValidator(user.email).error;\n\n        this.deleted = !!user.deleted;\n\n        this.createdAt = DateValidator(user.createdAt).value || new Date();\n        validationMap.createdAt = DateValidator(user.createdAt).error;\n\n        this.updatedAt = DateValidator(user.updatedAt).value || new Date();\n        validationMap.updatedAt = DateValidator(user.updatedAt).error;\n\n        this.bearer = StringValidator(user.bearer).value || \"\";\n        validationMap.bearer = StringValidator(user.bearer).error;\n\n        for (const key in validationMap) {\n            if ((validationMap as any)[key] === true) {\n                throw new ValidationError<UserValidationMap>(\"Invalid types\", validationMap);\n            }\n        }\n    }\n}\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React from \"react\";\nimport User from \"../entities/User\";\nimport Containerable from \"../interfaces/Containerable\";\nimport PropTypes from \"prop-types\";\n\n/**\n * AuthContext - interface for AuthContext context.\n * @interface\n * @author Danil Adnreev\n */\nexport interface AuthContext {\n    /**\n     * getUser - returns current logged in user data.\n     * @function\n     * @author Danil Andreev\n     */\n    getUser(): User | null;\n\n    /**\n     * isLogged - true, when user is logged and false if not.\n     */\n    isLogged: boolean,\n\n    /**\n     * login - locally saves user credentials.\n     * @function\n     * @param user User data for login\n     * @author Danil Andreev\n     */\n    login(user: User): void;\n\n    /**\n     * logout - clears locally seved user credentials.\n     * @function\n     * @author Danil Andreev\n     */\n    logout(): void;\n}\n\nconst Context: React.Context<AuthContext> = React.createContext<AuthContext>({\n    getUser(): User | null {\n        return null;\n    },\n    isLogged: false,\n    login(user: User): void {\n    },\n    logout(): void {\n    }\n});\n\nexport const displayName: string = \"AuthProvider\";\n\n/**\n * AuthProviderProps - interface for AuthProvider component props.\n * @interface\n * @author Danil Andreev\n */\nexport interface AuthProviderProps extends Containerable {\n}\n\n/**\n * AuthProvider - React provider for Auth system. Place it to the root of layout.\n * @function\n * @param props - Properties of the component.\n * @author Danil Andreev\n */\nexport function AuthProvider(props: AuthProviderProps) {\n    const {\n        children,\n    } = props;\n    const [logged, setLogged] = React.useState<boolean>(false);\n    const [user, setUser] = React.useState<User | null>(null);\n    const [loaded, setLoaded] = React.useState(false);\n\n    React.useEffect(() => {\n        const localStorageUser = getUserFromLocalStorage();\n        setUser(localStorageUser);\n        setLogged(!!localStorageUser);\n        setLoaded(true);\n    }, []);\n\n    React.useEffect(() => {\n        window.addEventListener(\"storage\", changeStorage);\n        return () => window.removeEventListener(\"storage\", changeStorage);\n    });\n\n    function changeStorage(event: StorageEvent) {\n        if (!event.newValue && logged) {\n            logout();\n        }\n    }\n\n    function logout(): void {\n        localStorage.auth = null;\n        setLogged(false);\n        setUser(null);\n    }\n\n    function getUserFromLocalStorage(): User | null {\n        try {\n            const credentials: any = JSON.parse(localStorage.auth);\n            const user: User | null = credentials ? new User({\n                id: +credentials.id,\n                username: String(credentials.username),\n                email: String(credentials.email),\n                deleted: !!credentials.deleted,\n                createdAt: new Date(credentials.createdAt),\n                updatedAt: new Date(credentials.updatedAt),\n                bearer: String(credentials.bearer),\n            }) : null;\n            if (user && !user.id) {\n                logout();\n                return null;\n            }\n            return user;\n        } catch (error) {\n            logout();\n        }\n        return null;\n    }\n\n    function getUser() {\n        if (!user) {\n            logout();\n            return null;\n        }\n        return user;\n    }\n\n    function login(user: User) {\n        localStorage.auth = JSON.stringify(user);\n        setUser(user);\n        setLogged(true);\n    }\n\n    if (!loaded) return null;\n\n    return (\n        <Context.Provider value={{isLogged: logged, getUser, login, logout}}>\n            {children}\n        </Context.Provider>\n    );\n}\n\nAuthProvider.displayName = displayName;\n\nAuthProvider.propTypes = {\n    children: PropTypes.node,\n};\n\n/**\n * useAuth - React hook, designed to work with user authentication.\n * @function\n * @author Danil Andreev\n * @example\n * function MyComponent(props) {\n *     const {user, isLoggedIn} = useAuth();\n *     return (\n *         <div>\n *             {user?.username}\n *         </div>\n *     );\n * }\n */\nconst useAuth = (): AuthContext => React.useContext(Context);\nexport default useAuth;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst drawerWidth = 240;\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        display: \"flex\",\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create([\"width\", \"margin\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create([\"width\", \"margin\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    hide: {\n        display: \"none\",\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: \"nowrap\",\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create(\"width\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerClose: {\n        transition: theme.transitions.create(\"width\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        overflowX: \"hidden\",\n        width: theme.spacing(7) + 1,\n        [theme.breakpoints.up(\"sm\")]: {\n            width: theme.spacing(9) + 1,\n        },\n    },\n    toolbar: {\n        display: \"flex\",\n        alignItems: \"center\",\n        padding: theme.spacing(1),\n        // necessary for content to be below app bar\n        // ...theme.mixins.toolbar,\n        justifyContent: \"flex-end\",\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(2),\n        [theme.breakpoints.down(\"sm\")]: {\n            padding: theme.spacing(0),\n        }\n    },\n    list: {\n        width: 250,\n    },\n    fullList: {\n        width: \"auto\",\n    },\n    popperTop: {\n        marginTop: 8,\n    },\n    typographyFlex: {\n        flexGrow: 1,\n    },\n    header: {\n        background: theme.palette.header.dark,\n        color: theme.palette.common.white,\n    },\n    rightSideMenu: {\n        marginTop: 50,\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 10.11.2020, 19:22\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        width: \"100%\",\n    },\n    container: {\n        maxHeight: \"74vh\",\n    },\n    textMain: {\n        margin: theme.spacing(2),\n        fontWeight: 500,\n    },\n    box: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    },\n    loading: {\n        display: \"flex\",\n        height: \"90vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        width: \"100%\",\n    },\n    container: {\n        maxHeight: \"74vh\",\n    },\n    textMain: {\n        marginBottom: theme.spacing(2),\n        fontWeight: 500,\n    },\n    progress: {\n        minWidth: 150,\n        background: \"transparent\",\n        [theme.breakpoints.down(\"sm\")]: {\n            minWidth: 0,\n        },\n    },\n    box: {\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        alignItems: \"center\"\n    },\n    iconButton: {\n        top: -8,\n    },\n    loading: {\n        display: \"flex\",\n        height: \"90vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    cell: {\n        background: \"transparent\",\n    }\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        width: \"100%\",\n    },\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {withStyles} from \"@material-ui/core/styles\";\nimport LinearProgress, {LinearProgressProps} from \"@material-ui/core/LinearProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport clsx from \"clsx\";\nimport styles from \"./styles\";\nimport Stylable from \"../../interfaces/Stylable\";\n\n/**\n * ProgressProps - interface for Progress component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface ProgressProps extends Stylable {\n    progress: number;\n}\n\n/**\n * LinearProgressWithLabel -\n * @param props\n * @function\n * @author Andrii Demchyshyn\n */\nfunction LinearProgressWithLabel(props: LinearProgressProps & { value: number }) {\n    return (\n        <Box display=\"flex\" alignItems=\"center\">\n            <Box width=\"100%\" mr={1}>\n                <LinearProgress variant=\"determinate\" {...props} />\n            </Box>\n            <Box minWidth={35}>\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n                    props.value,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n}\n\n/**\n * Progress - creates progress bar component with % count\n * @function\n * @author Andrii Demchyshyn\n */\nconst Progress = React.forwardRef((props: ProgressProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n        progress,\n    } = props;\n\n    const [jobProgress, setJobProgress] = useState(0);\n\n    useEffect(() => {\n        setJobProgress(progress);\n    }, [progress]);\n\n    /**\n     * React.useEffect - forces progress bar to move\n     * @function\n     * @author Andrii Demchyshyn\n     */\n\n    return (\n        <Box className={clsx(classes.root, className)}>\n            <LinearProgressWithLabel value={jobProgress}/>\n        </Box>\n    );\n});\n\nexport default withStyles(styles)(Progress);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 13:36\n * All rights reserved.\n */\n\nimport superagent from \"superagent\";\n\n/**\n * RequestMethods - methods, which returns request function\n * - ___post___ - POST\n * - ___get___ - GET\n * - ___delete___ - DELETE\n * - ___put___ - PUT\n * @interface\n * @export RequestMethods\n * @author Danil Andreev\n */\nexport interface RequestMethods {\n    /**\n     * endPoint - function, designed to get current selected endPoint of request.\n     * @author Danil Andreev\n     * @function\n     */\n    endPoint(): string;\n\n    /**\n     * post - function, designed to create HTTP request with method POST.\n     * @author Danil Andreev\n     * @function\n     */\n    post(route: string): superagent.SuperAgentRequest;\n\n    /**\n     * put - function, designed to create HTTP request with method PUT.\n     * @author Danil Andreev\n     * @function\n     */\n    put(route: string): superagent.SuperAgentRequest;\n\n    /**\n     * delete - function, designed to create HTTP request with method DELETE.\n     * @author Danil Andreev\n     * @function\n     */\n    delete(route: string): superagent.SuperAgentRequest;\n\n    /**\n     * get - function, designed to create HTTP request with method GET.\n     * @author Danil Andreev\n     * @function\n     */\n    get(route: string): superagent.SuperAgentRequest;\n}\n\n/**\n * RequestMiddleware - type for superagent request middleware.\n * @export RequestMiddleware\n * @author Danil Andreev\n */\nexport declare type RequestMiddleware = (request: superagent.SuperAgentRequest) => superagent.SuperAgentRequest;\n\n/**\n * request - function, designed to send HTTP request to API.\n * @function\n * @param endPoint - Path to Origin.\n * @param middleware - Superagent request middleware.\n * @author Danil Andreev\n * @export request\n * @example\n * request(\"thhps://myhost:1234\")\n *     .get(\"hello/darkness/1\")\n *     .then(response => {...})\n *     .catch(error => {...});\n */\nexport const request = (endPoint: string, middleware?: RequestMiddleware): RequestMethods => {\n    /**\n     * defaultMiddleware - request middleware by default.\n     * @function\n     * @param request - Superagent request\n     * @author Danil Andreev\n     */\n    function defaultMiddleware(request: superagent.SuperAgentRequest): superagent.SuperAgentRequest {\n        return request.accept(\"application/json\");\n    }\n\n    const requestMiddleware = middleware || defaultMiddleware;\n    const requestLog = (p: string, s: string) => console.log(`request.${p}:`, s);\n    return {\n        endPoint: () => endPoint,\n        post: (route: string): superagent.SuperAgentRequest => {\n            const url = `${endPoint}/${route}`;\n            requestLog(\"post\", url);\n            return requestMiddleware(superagent.post(url));\n        },\n\n        put: (route: string): superagent.SuperAgentRequest => {\n            const url = `${endPoint}/${route}`;\n            requestLog(\"put\", url);\n            return requestMiddleware(superagent.put(url));\n        },\n\n        delete: (route: string): superagent.SuperAgentRequest => {\n            const url = `${endPoint}/${route}`;\n            requestLog(\"delete\", url);\n            return requestMiddleware(superagent.delete(url));\n        },\n\n        get: (route: string): superagent.SuperAgentRequest => {\n            const url = `${endPoint}/${route}`;\n            requestLog(\"get\", url);\n            return requestMiddleware(superagent.get(url));\n        }\n    };\n};\n\n/**\n * coreRequest - function, designed to do requests to Pathfinder Core.\n * @function\n * @param path - Path to Origin. By default got from ENV REACT_APP_CORE_URL\n * @param middleware - Superagent request middleware.\n * @author Danil Andreev\n * @export coreRequest\n * @example\n * coreRequest()\n *     .get(\"hello/darkness/1\")\n *     .then(response => {...})\n *     .catch(error => {...});\n */\nexport const coreRequest = (path?: string, middleware?: RequestMiddleware): RequestMethods => {\n    return request(path || process.env.REACT_APP_CORE_URL || \"\", middleware);\n};\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 13:43\n * All rights reserved.\n */\n\nimport useAuth from \"./useAuth\";\nimport {coreRequest, RequestMethods, RequestMiddleware} from \"../utils/Rest\";\nimport {SuperAgentRequest} from \"superagent\";\n\n/**\n * CoreRequestHooked - type for core request, got from useCoreRequest() hook.\n * @export CoreRequestHooked\n * @author Danil Andreev\n */\nexport declare type CoreRequestHooked = (path?: string) => RequestMethods;\n\n/**\n * useCoreRequest - React hook for easy connecting to Origin using Restful technology.\n * @function\n * @param defaultPath - Default Origin path for request, will be applied to coreRequest().\n * @author Danil Andreev\n * @export default\n * @example\n */\nexport default function useCoreRequest(defaultPath?: string): CoreRequestHooked {\n    const {getUser, isLogged} = useAuth();\n    const user = getUser();\n\n    const middleware: RequestMiddleware = (request: SuperAgentRequest): SuperAgentRequest => {\n        if (isLogged && user && user.bearer) request.set(\"Authorization\", \"Bearer \" + user.bearer);\n        return request;\n    };\n    return (path: string | undefined = defaultPath): RequestMethods => coreRequest(path, middleware);\n}\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\n\nimport BaseEntity from \"../core/BaseEntity\";\nimport NumberValidator from \"../core/validators/NumberValidator\";\nimport StringValidator from \"../core/validators/StringValidator\";\nimport DateValidator from \"../core/validators/DateValidator\";\nimport ValidationError from \"../core/ValidationError\";\nimport User from \"../interfaces/User\";\nimport Organization from \"../interfaces/Organization\";\n\nexport interface ShortJobsValidationMap {\n    id?: boolean;\n    name?: boolean;\n    attemptsPerTaskLimit?: boolean;\n    createdAt?: boolean;\n    updatedAt?: boolean;\n    description?: boolean;\n    failed?: boolean;\n    frameRange?: boolean;\n    doneTasks?: boolean;\n    failedTasks?: boolean;\n    pendingTasks?: boolean;\n    processingTasks?: boolean;\n    pluginSettings?: boolean;\n    submitter?: boolean;\n}\n\n\n/**\n * ShortJobs - interface for Render ShortJobs\n * @interface\n * @author Andrii Demchyshyn\n */\nexport default class ShortJobs extends BaseEntity {\n    /**\n     * id - unique number of job\n     */\n    public id: number;\n    /**public\n     * name - name of job\n     */\n    public name: string;\n    /**\n     * attemptsPerTaskLimit - limit of render attempts\n     */\n    public attemptsPerTaskLimit: number;\n    /**\n     * createdAt - date of creation\n     */\n    public createdAt: Date;\n    /**\n     * updatedAt - date of last update\n     */\n    public updatedAt: Date;\n    /**\n     * description - information about render job\n     */\n    public description: string;\n    /**\n     * failed - status of job complete\n     */\n    public failed: boolean;\n    /**\n     * frameRange - frames to render\n     */\n    public frameRange: any[];\n\n    public organization: Organization\n    public doneTasks: number;\n    public failedTasks: number;\n    public pendingTasks: number;\n    public processingTasks: number;\n    public pluginSettings: { value1: number, value2: string };\n    public submitter: User;\n\n\n    constructor(job: any) {\n        super(\"ShortJobs\");\n        const validationMap: ShortJobsValidationMap = {};\n\n        this.id = NumberValidator(job.id).value || 0;\n        validationMap.id = NumberValidator(job.id).error;\n\n        this.name = StringValidator(job.name).value || \"\";\n        validationMap.name = StringValidator(job.name).error;\n\n        this.attemptsPerTaskLimit = NumberValidator(job.attempts_per_task_limit).value || 0;\n        validationMap.attemptsPerTaskLimit = NumberValidator(job.attempts_per_task_limit).error;\n\n        this.createdAt = DateValidator(job.createdAt).value || new Date();\n        validationMap.createdAt = DateValidator(job.createdAt).error;\n\n        this.updatedAt = DateValidator(job.updatedAt).value || new Date();\n        validationMap.updatedAt = DateValidator(job.updatedAt).error;\n\n        this.description = StringValidator(job.description).value || \"\";\n        validationMap.description = StringValidator(job.description).error;\n\n        this.failed = !!job.failed;\n\n        this.frameRange = [...job.frameRange];\n\n        this.doneTasks = NumberValidator(job.doneTasks).value || 0;\n        validationMap.doneTasks = NumberValidator(job.doneTasks).error;\n\n        this.failedTasks = NumberValidator(job.failedTasks).value || 0;\n        validationMap.failedTasks = NumberValidator(job.failedTasks).error;\n\n        this.pendingTasks = NumberValidator(job.pendingTasks).value || 0;\n        validationMap.pendingTasks = NumberValidator(job.pendingTasks).error;\n\n        this.processingTasks = NumberValidator(job.processingTasks).value || 0;\n        validationMap.processingTasks = NumberValidator(job.processingTasks).error;\n\n        this.organization = job.organization;\n\n        this.pluginSettings = job.pluginSettings;\n\n        this.submitter = job.submitter;\n\n        for (const key in validationMap) {\n            if ((validationMap as any)[key] === true) {\n                throw new ValidationError<ShortJobsValidationMap>(\"Invalid types\", validationMap);\n            }\n        }\n    }\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {useSnackbar} from \"notistack\";\n\nexport default function useEnqueueErrorSnackbar() {\n    const {enqueueSnackbar} = useSnackbar();\n\n    return (message: string) => enqueueSnackbar(message, {\n        anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"center\",\n        },\n        variant: \"error\",\n    });\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {Ref} from \"react\";\nimport {withStyles} from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\nimport {CircularProgress} from \"@material-ui/core\";\nimport Stylable from \"../../interfaces/Stylable\";\n\n/**\n * LoadingProps - interface for List component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface LoadingProps extends Stylable {\n\n}\n\n/**\n * LoadingProps - creates loading icon\n * @function\n * @author Andrii Demchyshyn\n */\nconst Loading = React.forwardRef((props: LoadingProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n    } = props;\n\n    return (\n        <React.Fragment>\n            <CircularProgress\n                size={75}\n            />\n        </React.Fragment>\n    );\n});\n\nexport default withStyles(styles)(Loading);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 11/30/20, 3:25 PM\n * All rights reserved.\n */\n\nexport default class WebSocketMessage<T = any> {\n    type: string;\n    payload: T;\n\n    constructor(input: any) {\n        if (typeof input !== \"object\")\n            throw new TypeError(`Incorrect type of input, expected \"object\", got \"${typeof input}\"`);\n\n        if (typeof input.type !== \"string\")\n            throw new TypeError(`Incorrect type of \"type\" field, expected \"string\", got \"${typeof input.type}\"`);\n        this.type = input.type;\n\n        this.payload = input.payload;\n    }\n}\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 11/30/20, 2:23 PM\n * All rights reserved.\n */\n\nimport qs from \"qs\";\nimport WebSocketMessage from \"./WebSocketMessage\";\nimport {EventEmitter} from \"events\";\n\n\n/**\n * CoreEventDispatcher - class for handling web socket connection to Atlas Core.\n * @class\n * @author Danil Andreev\n */\nexport default class CoreEventDispatcher extends EventEmitter {\n    /**\n     * instance - current instance of the dispatchcer.\n     */\n    protected static instance: CoreEventDispatcher = new CoreEventDispatcher();\n\n    /**\n     * ws - web socket connection object.\n     */\n    protected static ws: WebSocket | null = null;\n\n    /**\n     * Creates an instance of CoreEventDispatcher.\n     * @constructor\n     * @author Danil Andreev\n     */\n    protected constructor() {\n        super();\n    }\n\n    /**\n     * getInstance - returns current instance of the CoreEventDispatcher.\n     * @method\n     * @author Danil Andreev\n     */\n    public static getInstance(): CoreEventDispatcher {\n        if (!CoreEventDispatcher.instance) CoreEventDispatcher.instance = new CoreEventDispatcher();\n        return CoreEventDispatcher.instance;\n    }\n\n    /**\n     * connect - creates a new web socket connection.\n     * If it was an existing connection - it will be closed woth code 200 and replaces.\n     * @method\n     * @throws ReferenceError\n     * @param token\n     * @author Danil Andreev\n     */\n    public static connect(token: string): void {\n        CoreEventDispatcher.disconnect();\n\n        if (!process.env.REACT_APP_CORE_WEBSOCKET_URL)\n            throw new ReferenceError(`ENV \"REACT_APP_CORE_WEBSOCKET_URL\" is not defined.`);\n\n        // Add bearer to query string of the request.\n        let url = process.env.REACT_APP_CORE_WEBSOCKET_URL;\n        if (token)\n            url += \"?\" + qs.stringify({bearer: token});\n\n        CoreEventDispatcher.ws = new WebSocket(url);\n\n        CoreEventDispatcher.ws.onopen = (event: Event) => {\n            console.log(\"Connected to web socket\");\n        };\n\n        CoreEventDispatcher.ws.onclose = (event: CloseEvent) => {\n            if (event.wasClean) {\n                console.log(\"Disconnected from web socket.\");\n            } else {\n                console.error(\"Web socket connection terminated.\", event.code, \"Reason: \", event.reason);\n            }\n        };\n\n        CoreEventDispatcher.ws.onerror = (error: Event) => {\n            console.error(\"Web socket error:\", error);\n        };\n\n        CoreEventDispatcher.ws.onmessage = (event: MessageEvent) => {\n            try {\n                const message: WebSocketMessage = new WebSocketMessage(JSON.parse(event.data));\n                console.log(\"Dispatching event \", message.type);\n                CoreEventDispatcher.instance.emit(message.type, message.payload);\n            } catch (error) {\n                if (error instanceof TypeError)\n                    console.error(\"Incorrect message got through websocket connection.\", error.message, event.data);\n                else if (error instanceof SyntaxError)\n                    console.error(\"Incorrect message got through websocket connection. Expected object, got: \", event.data);\n                else\n                    console.error(error);\n            }\n        };\n    }\n\n    /**\n     * disconnect - method, designed to disconnect web socket from remote host.\n     * @method\n     * @author Danil Andreev\n     */\n    public static disconnect(): void {\n        if (CoreEventDispatcher.ws) CoreEventDispatcher.ws.close(1000, \"Session end\");\n        CoreEventDispatcher.ws = null;\n    }\n}\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 30.11.2020, 23:43\n * All rights reserved.\n */\n\n// WEB_SOCKET_EVENT_TYPES\nexport const WS_RENDER_JOB_UPDATE = \"RENDER_JOB_UPDATE\";\n/**\n * CWS_RENDER_JOB_CREATE - event type for render job create action.\n */\nexport const WS_RENDER_JOB_CREATE = \"RENDER_JOB_CREATE\";\n\n/**\n * CWS_RENDER_JOB_DELETE - event type for render job delete action.\n */\nexport const WS_RENDER_JOB_DELETE = \"RENDER_JOB_DELETE\";\n\n/**\n * CWS_RENDER_JOB_ATTEMPT_LOG_CREATE - event type for render job attempt log create action.\n */\nexport const WS_RENDER_JOB_ATTEMPT_LOG_CREATE = \"RENDER_JOB_ATTEMPT_LOG_CREATE\";\n\n/**\n * CWS_RENDER_TASK_UPDATE - event type for render task update action.\n */\nexport const WS_RENDER_TASK_UPDATE = \"RENDER_TASK_UPDATE\";","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 16.12.2020, 20:09\n * All rights reserved.\n */\n\nimport KeyPair from \"../interfaces/KeyPair\";\nimport RequestError from \"../interfaces/RequestError\";\nimport {SnackbarKey} from \"notistack\";\nimport useEnqueueErrorSnackbar from \"./enqueueErrorSnackbar\";\n\nexport default class ErrorHandler {\n    public handlers: KeyPair<string | (() => void)>;\n    public enqueueErrorSnackbar: ((message: string) => SnackbarKey);\n\n    public on(status: number, handler: string | (() => void)): ErrorHandler {\n        this.handlers[`${status}`] = handler;\n        return this;\n    }\n\n    public handle(err: RequestError): void {\n        const handler: string | (() => void) = this.handlers[`${err.status}`];\n        if(typeof handler === \"function\") {\n            handler();\n        } else if(typeof handler === \"string\") {\n            this.enqueueErrorSnackbar(handler);\n        } else {\n            this.enqueueErrorSnackbar(err.response.body.message)\n        }\n    }\n\n    constructor(errorSnackbar: any) {\n        this.handlers = {};\n        this.enqueueErrorSnackbar = errorSnackbar;\n    }\n}\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport {Box, Grid, IconButton, Typography, useTheme, withStyles} from \"@material-ui/core\";\nimport withWidth, {isWidthUp} from \"@material-ui/core/withWidth\";\nimport styles from \"./styles\";\nimport clsx from \"clsx\";\nimport Progress from \"../Progress\";\nimport {useChangeRoute} from \"routing-manager\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\n\nimport {format} from \"date-fns\";\nimport ShortJobs from \"../../entities/ShortJobs\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\nimport Loading from \"../Loading\";\nimport {blue, green, orange} from \"@material-ui/core/colors\";\nimport CoreEventDispatcher from \"../../core/CoreEventDispatcher\";\nimport {WS_RENDER_JOB_CREATE, WS_RENDER_JOB_DELETE, WS_RENDER_JOB_UPDATE} from \"../../globals\";\nimport useAuth from \"../../hooks/useAuth\";\nimport ErrorHandler from \"../../utils/ErrorHandler\";\n\n/**\n * RenderJobsTableProps - interface for RenderJobsTable component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface RenderJobsTableProps extends Stylable {\n    /**\n     * width - screen width\n     * @type \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"\n     */\n    width: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\n}\n\n/**\n * Data - interface for createData function\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface Data {\n    /**\n     * idTable - id of table component\n     * @type number\n     */\n    idTable: number\n    /**\n     * name - name of table component\n     * @type string\n     */\n    name: string;\n    /**\n     * submitter - table component submitters name\n     * @type string\n     */\n    submitter: string;\n    /**\n     * organisation - organisation name of table component\n     * @type string\n     */\n    organisation: string;\n    /**\n     * date - submission date and time of table component\n     * @type string\n     */\n    date: string;\n    /**\n     * progress - implementation progress of table component\n     * @type number\n     */\n    progress: number;\n}\n\n/**\n * createData - creates table row\n * @param idTable\n * @param name\n * @param submitter\n * @param organisation\n * @param date\n * @param progress\n * @function\n * @author Andrii Demchyshyn\n */\nfunction createData(idTable: number, name: string, submitter: string, organisation: string, date: string, progress: number): Data {\n    return {idTable, name, submitter, organisation, date, progress};\n}\n\n/**\n * RenderJobsTable - creates table with render jobs\n * @function\n * @author Andrii Demchyshyn\n */\nconst RenderJobsTable = React.forwardRef((props: RenderJobsTableProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n    } = props;\n\n\n    const {logout} = useAuth();\n    const coreRequest = useCoreRequest();\n    const {changeRoute} = useChangeRoute();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const theme = useTheme();\n\n\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const [jobs, setJobs] = useState<ShortJobs[]>([]);\n    const [loaded, setLoaded] = useState(false);\n\n\n    useEffect(() => {\n\n        console.log(\"adding event listener\");\n\n        const createListener = (message: any) => {\n            console.log(\"Create Job Listener\");\n            coreRequest()\n                .get(\"jobs\")\n                .query({id: message.id})\n                .then(response => {\n                    console.log(response.body);\n                    setJobs(prev => ([new ShortJobs(response.body), ...prev]));\n                    // console.log(new ShortJobs(response.body));\n                })\n                .catch(err => {\n                    console.error(err);\n                    enqueueErrorSnackbar(\"Cant add new Job\");\n                });\n        };\n\n        const deleteListener = (message: any) => {\n            console.log(\"Delete Job Listener\");\n            coreRequest()\n                .get(\"jobs\")\n                .query({id: message.id})\n                .then(res => {\n                    setJobs(prev => {\n                        const jobIndex = prev.findIndex(job => job.id === message.id);\n                        if (jobIndex >= 0) {\n                            const updatedJobs = [...prev];\n                            updatedJobs.splice(jobIndex, 1);\n                            return [...updatedJobs];\n                        }\n                        return prev;\n                    });\n                });\n        };\n\n        const updateListener = (message: any) => {\n            console.log(\"Update Job Listener\");\n            coreRequest()\n                .get(\"jobs\")\n                .query({id: message.id})\n                .then(res => {\n                    setJobs(prev => {\n                        const jobIndex = prev.findIndex(job => job.id === message.id);\n                        if (jobIndex >= 0) {\n                            prev[jobIndex] = new ShortJobs(res.body);\n                        }\n                        return [...prev];\n                    });\n                });\n        };\n\n        CoreEventDispatcher.getInstance().addListener(WS_RENDER_JOB_UPDATE, updateListener);\n        CoreEventDispatcher.getInstance().addListener(WS_RENDER_JOB_CREATE, createListener);\n        CoreEventDispatcher.getInstance().addListener(WS_RENDER_JOB_DELETE, deleteListener);\n\n        Promise.all([\n            handleGetJobs(),\n        ]).then(() => {\n            setLoaded(true);\n        });\n\n        return () => {\n            CoreEventDispatcher.getInstance().removeListener(WS_RENDER_JOB_UPDATE, updateListener);\n            CoreEventDispatcher.getInstance().removeListener(WS_RENDER_JOB_CREATE, createListener);\n            CoreEventDispatcher.getInstance().removeListener(WS_RENDER_JOB_DELETE, deleteListener);\n        }\n\n    }, []);\n\n    async function handleGetJobs() {\n        try {\n            const response = await coreRequest().get(\"jobs\");\n            if (Array.isArray(response.body)) {\n                try {\n                    console.log(response.body);\n                    setJobs(response.body.map(item => new ShortJobs(item)));\n                } catch (err) {\n                    enqueueErrorSnackbar(\"Invalid data types\");\n                }\n            }\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {logout()})\n                .handle(err);\n        }\n    }\n\n    function handleSetStatusColor(status: string) {\n        if (status === \"done\") {\n            return green[400];\n        } else if (status === \"failed\") {\n            return theme.palette.error.dark;\n        } else if (status === \"inProgress\") {\n            return blue[200];\n        } else if (status === \"inQueue\") {\n            return orange[300];\n        } else {\n            return \"#fff\";\n        }\n    }\n\n    /**\n     * handleChangePage - let go to next page\n     * @param event\n     * @param newPage\n     * @function\n     * @author Andrii Demchyshyn\n     */\n    const handleChangePage = (event: unknown, newPage: number) => {\n        setPage(newPage);\n    };\n\n    /**\n     * handleChangeRowsPerPage - sets number of table rows per page\n     * @param event\n     * @function\n     * @author Andrii Demchyshyn\n     */\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    return (\n        loaded ?\n            <Box className={className}>\n                <Grid container>\n                    <Grid item xs={11}>\n                        <Typography variant=\"h5\" className={clsx(classes.textMain)}>\n                            Render Jobs\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={1} className={clsx(classes.box, className)}>\n                        <IconButton className={clsx(classes.iconButton, className)}>\n                            <FilterListIcon/>\n                        </IconButton>\n                        <IconButton className={clsx(classes.iconButton, className)}>\n                            <MoreVertIcon/>\n                        </IconButton>\n                    </Grid>\n                </Grid>\n                <Paper className={classes.root}>\n                    <TableContainer className={classes.container}>\n                        <Table stickyHeader aria-label=\"sticky table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell className={classes.cell} align=\"left\">Id</TableCell>\n                                    <TableCell className={classes.cell} align=\"left\">Name</TableCell>\n                                    <TableCell className={classes.cell} align=\"left\">Submitter</TableCell>\n                                    <TableCell className={classes.cell} align=\"left\">Organization</TableCell>\n                                    <TableCell className={classes.cell} align=\"left\">Date</TableCell>\n                                    <TableCell align=\"left\" className={classes.progress}>Progress</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {jobs.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((job, key) => {\n                                    const color = handleSetStatusColor(\"done\");\n                                    return (\n                                        <TableRow\n                                            style={{background: color}}\n                                            hover\n                                            role=\"checkbox\"\n                                            tabIndex={-1}\n                                            key={key}\n                                            onClick={() => changeRoute({panel: `${job.id}`})}\n                                        >\n                                            <TableCell component=\"th\" scope=\"row\">{job.id}</TableCell>\n                                            <TableCell align=\"left\">{job.name}</TableCell>\n                                            <TableCell align=\"left\">{job.submitter.username}</TableCell>\n                                            <TableCell align=\"left\">{job.organization.name}</TableCell>\n                                            <TableCell\n                                                align=\"left\">{format(job.createdAt, \"dd.MM.yyyy hh:mm\")}</TableCell>\n                                            <TableCell align=\"left\">\n                                                {isWidthUp(\"md\", props.width) ? (<Progress progress={\n                                                    ((job.doneTasks) / (job.doneTasks + job.pendingTasks + job.failedTasks + job.processingTasks)) * 100\n                                                }/>) : (\"10%\")}\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions={[10, 25, 100]}\n                        component=\"div\"\n                        count={jobs.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onChangePage={handleChangePage}\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\n                    />\n                </Paper>\n            </Box>\n            :\n            <Box className={classes.loading}>\n                <Loading/>\n            </Box>\n    );\n});\nRenderJobsTable.displayName = \"RenderJobsTable\";\nRenderJobsTable.propTypes = {};\n\nexport default withWidth()(withStyles(styles)(RenderJobsTable));\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        width: \"100%\",\n        backgroundColor: theme.palette.background.paper,\n    },\n    paddingNone: {\n        padding: 0,\n    }\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    itemListMargin: {\n        marginBottom: 2,\n    }\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {Ref} from \"react\";\nimport {useTheme, withStyles} from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\nimport {ListItem, ListItemProps} from \"@material-ui/core\";\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\n\n/**\n * ListItemProgressProps - interface for List component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface ListItemProgressProps extends ListItemProps {\n    progress: number;\n}\n\n/**\n * ListItemProgress - creates List item with progress bar\n * @function\n * @author Andrii Demchyshyn\n */\nconst ListItemProgress = React.forwardRef((props: any, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n        children,\n        progress,\n        ...other\n    } = props;\n\n    const theme = useTheme();\n\n    return (\n        <ListItem\n            {...other}\n            style={{background: `linear-gradient(90deg, ${lightBlue[200]} ${progress}%, ${theme.palette.common.white} 0%)`}}\n            className={classes.itemListMargin}\n\n        >\n            {children}\n        </ListItem>\n    );\n});\n\nexport default withStyles(styles)(ListItemProgress);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {Ref} from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport {Box, withStyles} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport clsx from \"clsx\";\nimport ListItemProgress from \"../ListItemProgress\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport {useChangeRoute} from \"routing-manager\";\n\n/**\n * SimpleListProps - interface for RenderJobsTable component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface SimpleListProps extends Stylable {\n\n}\n\n/**\n * SimpleList - creates list with several components\n * @function\n * @author Andrii Demchyshyn\n */\nconst SimpleList = React.forwardRef((props: SimpleListProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n    } = props;\n\n    const {changeRoute} = useChangeRoute();\n\n    const jobs = [\n        {id: 1, name: \"Pathfinder Logo\", submitter: \"Danil Andreev\", progress: 10},\n        {id: 2, name: \"Pathfinder Logo\", submitter: \"Andrii Demchyshyn\", progress: 50},\n        {id: 3, name: \"Pathfinder Logo\", submitter: \"Danil Andreev\", progress: 60},\n        {id: 4, name: \"Pathfinder Logo\", submitter: \"Danil Andreev\", progress: 20},\n        {id: 5, name: \"Pathfinder Logo\", submitter: \"Danil Andreev\", progress: 30},\n        {id: 6, name: \"Pathfinder Logo\", submitter: \"Danil Andreev\", progress: 100},\n    ];\n\n    return (\n        <Box className={clsx(classes.root, className)}>\n            <List component=\"nav\" aria-label=\"secondary mailbox folders\" className={classes.paddingNone}>\n                {jobs.map((job) =>\n                    <ListItemProgress\n                        key={`render-job-${job.id}`}\n                        progress={job.progress}\n                        button\n                        onClick={() => changeRoute({panel: \"jobDetails\"})}\n                    >\n                        <ListItemText primary={job.name} secondary={job.submitter}/>\n                    </ListItemProgress>\n                )}\n            </List>\n        </Box>\n    );\n});\n\nexport default withStyles(styles)(SimpleList);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 10.11.2020, 19:22\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nconst styles = (theme: Theme) => createStyles({\n    pathText: {\n        color: grey[500],\n    },\n    mainText: {\n        marginTop: theme.spacing(2),\n        fontWeight: 700,\n    },\n    progressMargin: {\n        marginBottom: theme.spacing(2),\n    },\n    dividerMargin: {\n        marginBottom: theme.spacing(2),\n    },\n    pluginMargin: {\n        marginTop: theme.spacing(2),\n    },\n    boxContainer: {\n        backgroundColor: grey[200],\n        borderRadius: 3,\n        padding: theme.spacing(1),\n    },\n    boxContainerTitle: {\n        fontSize: 9,\n        color: grey[500],\n    },\n    boxContainerText: {\n        fontSize: 16,\n        fontWeight: 500,\n    },\n    customTabsMargin: {\n        marginTop: theme.spacing(2),\n    },\n    normalContent: {\n        [theme.breakpoints.down(\"sm\")]: {\n            padding: theme.spacing(2),\n        },\n    },\n    box: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\"\n    },\n    iconButton: {\n        top: 8,\n    },\n    loading: {\n        display: \"flex\",\n        height: \"90vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        backgroundColor: theme.palette.background.paper,\n    },\n    fullWidth: {\n        width: \"100%\",\n    },\n    paddingToolbar: {\n        padding: theme.spacing(2),\n    }\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {Ref} from \"react\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport {useTheme, withStyles} from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Box from \"@material-ui/core/Box\";\nimport styles from \"./styles\";\nimport clsx from \"clsx\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport Containerable from \"../../interfaces/Containerable\";\n\n/**\n * CustomTabsProps - interface for RenderJobsTable component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface CustomTabsProps extends Stylable, Containerable {\n    value?: number,\n    onChange?: any,\n    onChangeIndex?: any,\n\n}\n\n/**\n * a11yProps -\n * @param index\n * @function\n * @author Andrii Demchyshyn\n */\nfunction a11yProps(index: number) {\n    return {\n        id: `full-width-tab-${index}`,\n        \"aria-controls\": `full-width-tabpanel-${index}`,\n    };\n}\n\n/**\n * CustomTabs - creates field for tabs panels\n * @function\n * @author Andrii Demchyshyn\n */\nconst CustomTabs = React.forwardRef((props: CustomTabsProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n        children,\n        onChange,\n        value,\n        onChangeIndex\n    } = props;\n\n    const theme = useTheme();\n\n    return (\n        <Box className={clsx(classes.root, className)}>\n            <Toolbar className={classes.paddingToolbar}>\n                <Tabs\n                    className={clsx(classes.fullWidth, className)}\n                    value={value}\n                    onChange={onChange}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                    aria-label=\"full width tabs example\"\n                >\n                    <Tab label=\"TASKS\" {...a11yProps(0)} />\n                    <Tab label=\"INFO\" {...a11yProps(1)} />\n                    <Tab label=\"STATISTICS\" {...a11yProps(2)} />\n                </Tabs>\n            </Toolbar>\n            <SwipeableViews\n                axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n                index={value}\n                onChangeIndex={onChangeIndex}\n            >\n                {children}\n            </SwipeableViews>\n        </Box>\n    );\n});\n\nexport default withStyles(styles)(CustomTabs);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {Ref} from \"react\";\nimport {Box,} from \"@material-ui/core\";\nimport {withStyles} from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport Containerable from \"../../interfaces/Containerable\";\n\n/**\n * CustomTabsPanelProps - interface for TabsPanel component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface CustomTabsPanelProps extends Stylable, Containerable {\n    dir?: string;\n    index: any;\n    value: any;\n}\n\n/**\n * TabsPanel - creates one tab panel\n * @function\n * @author Andrii Demchyshyn\n */\nconst TabsPanel = React.forwardRef((props: CustomTabsPanelProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n        children,\n        value,\n        index,\n        ...other\n    } = props;\n\n    return (\n        <Box\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index &&\n            <Box p={2}>\n                {children}\n            </Box>\n            }\n        </Box>\n    );\n});\n\nexport default withStyles(styles)(TabsPanel);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        width: \"100%\",\n    },\n    container: {\n        maxHeight: \"74vh\",\n    },\n    textMain: {\n        marginBottom: theme.spacing(2),\n        fontWeight: 500,\n    },\n    progress: {\n        minWidth: 150,\n        background: \"transparent\",\n        [theme.breakpoints.down(\"md\")]: {\n            minWidth: 110,\n        },\n        [theme.breakpoints.down(\"sm\")]: {\n            minWidth: 0,\n        },\n    },\n    box: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\"\n    },\n    iconButton: {\n        top: -8,\n    },\n    iconVisible: {\n        padding: 0,\n    },\n    cell: {\n        background: \"transparent\",\n    }\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport BaseEntity from \"../core/BaseEntity\";\nimport NumberValidator from \"../core/validators/NumberValidator\";\nimport StringValidator from \"../core/validators/StringValidator\";\nimport DateValidator from \"../core/validators/DateValidator\";\nimport ValidationError from \"../core/ValidationError\";\n\nexport interface TaskValidationMap {\n    id?: boolean;\n    frame?: boolean;\n    status?: boolean;\n    createdAt?: boolean;\n    updatedAt?: boolean;\n    progress?: boolean;\n}\n\n\n/**\n * ShortJobs - interface for Render ShortJobs\n * @interface\n * @author Andrii Demchyshyn\n */\nexport default class Task extends BaseEntity {\n    /**\n     * id - unique number of job\n     */\n    public id: number;\n    /**\n     * frame - frame of task\n     */\n    public frame: number;\n    /**\n     * status - status of task\n     */\n    public status: string;\n    /**\n     * createdAt - date of creation\n     */\n    public createdAt: Date;\n    /**\n     * updatedAt - date of last update\n     */\n    public updatedAt: Date;\n    /**\n     * progress - task processing progress\n     */\n    public progress: number;\n\n    constructor(task: any) {\n        super(\"ShortJobs\");\n        const validationMap: TaskValidationMap = {};\n\n        this.id = NumberValidator(task.id).value || 0;\n        validationMap.id = NumberValidator(task.id).error;\n\n        this.frame = NumberValidator(task.frame).value || 0;\n        validationMap.frame = NumberValidator(task.frame).error;\n\n        this.status = StringValidator(task.status).value || \"\";\n        validationMap.status = StringValidator(task.status).error;\n\n        this.createdAt = DateValidator(task.createdAt).value || new Date();\n        validationMap.createdAt = DateValidator(task.createdAt).error;\n\n        this.updatedAt = DateValidator(task.updatedAt).value || new Date();\n        validationMap.updatedAt = DateValidator(task.updatedAt).error;\n\n        this.progress = NumberValidator(task.progress).value || 0;\n        validationMap.progress = NumberValidator(task.progress).error;\n\n        for (const key in validationMap) {\n            if ((validationMap as any)[key] === true) {\n                throw new ValidationError<TaskValidationMap>(\"Invalid types\", validationMap);\n            }\n        }\n    }\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 02.12.2020, 20:47\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport {grey} from \"@material-ui/core/colors\";\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        backgroundColor: theme.palette.baseDarkColors.main,\n    },\n    dialogContainer: {\n        counterReset: \"line 0\",\n        height: 650,\n        [theme.breakpoints.down(\"sm\")]: {\n            height: 500,\n        },\n        [theme.breakpoints.down(\"xs\")]: {\n            height: 400,\n        },\n        background: grey[900],\n        overflow: \"auto\",\n        boxShadow: \"inset 0 0 10px rgba(0,0,0,0.5)\",\n        margin: theme.spacing(0, 2, 2, 2),\n        padding: 0,\n        borderRadius: theme.spacing(0.5, 0,  0.5, 0.5),\n    },\n    dialogTitle: {\n        textAlign: \"center\",\n    },\n    row: {\n        padding: theme.spacing(0, 2),\n        counterIncrement: \"line\",\n        \"&:before\": {\n            content: \"counter(line)\",\n            borderRight: `1px solid ${grey[700]}`,\n            padding: theme.spacing(0.5),\n            paddingRight: theme.spacing(2),\n            marginRight: theme.spacing(2),\n            color: grey[700],\n            textAlign: \"right\",\n            minWidth: 60,\n        },\n    },\n    rowText: {\n        overflowWrap: \"break-word\",\n        fontFamily: \"Monospace\",\n        fontSize: 16,\n    },\n    loading: {\n        display: \"flex\",\n        height: \"60vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    buttonGroupContainer: {\n        width: \"100%\",\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        padding: theme.spacing(0, 2),\n    },\n    button1: {\n        border: `1px solid ${grey[900]}`,\n        borderBottom: 0,\n        borderRadius: \"4px 4px 4px 0px\",\n    },\n    button2: {\n        border: `1px solid ${grey[900]}`,\n        borderBottom: 0,\n    },\n    button3: {\n        border: `1px solid ${grey[900]}`,\n        borderBottom: 0,\n        borderRadius: \"4px 4px 0px 4px\",\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 03.12.2020, 23:28\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport {grey} from \"@material-ui/core/colors\";\n\nconst styles = (theme: Theme) => createStyles({\n    dialogContainer: {\n        counterReset: \"line 0\",\n        height: 700,\n        [theme.breakpoints.down(\"sm\")]: {\n            height: 500,\n        },\n        [theme.breakpoints.down(\"xs\")]: {\n            height: 400,\n        },\n        background: grey[900],\n        overflow: \"auto\",\n        boxShadow: \"inset 0 0 10px rgba(0,0,0,0.5)\",\n        margin: theme.spacing(0, 2, 2, 2),\n        padding: 0,\n        borderRadius: theme.spacing(0.5),\n    },\n    dialogTitle: {\n        textAlign: \"center\",\n    },\n    row: {\n        padding: theme.spacing(0, 2),\n        counterIncrement: \"line\",\n        \"&:before\": {\n            content: \"counter(line)\",\n            borderRight: `1px solid ${grey[700]}`,\n            padding: theme.spacing(0.5),\n            paddingRight: theme.spacing(2),\n            marginRight: theme.spacing(2),\n            color: grey[700],\n            textAlign: \"right\",\n            minWidth: 60,\n        },\n    },\n    rowText: {\n        overflowWrap: \"break-word\",\n        fontFamily: \"Monospace\",\n        fontSize: 16,\n    },\n})\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 03.12.2020, 23:28\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {withStyles} from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\nimport {List, ListItem} from \"@material-ui/core\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport Typography from \"@material-ui/core/Typography\";\nimport request from \"superagent\";\n\n/**\n * LogFieldProps - interface for LogField component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface LogFieldProps extends Stylable {\n    handleGetLogs(): any;\n}\n\n/**\n * LogField - creates field that displays logs\n * @function\n * @author Andrii Demchyshyn\n */\nconst LogField = React.forwardRef((props: LogFieldProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n        handleGetLogs\n    } = props;\n\n    const [logs, setLogs] = useState([{message: \"haha\", type: \"info\"}]);\n\n\n    const refDiv = React.useRef<HTMLDivElement | null>(null);\n    const refList = React.useRef<HTMLUListElement | null>(null);\n\n    useEffect(() => {\n        //TODO change response to response.body\n        handleGetLogs().then((response: any) => {\n            console.log(response);\n            setLogs(response);\n        })\n    }, [])\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", handleChangeScroll);\n        return () => window.removeEventListener(\"scroll\", handleChangeScroll);\n    }, []);\n\n    //TODO make normal scrolling when you in the bottom of the screen\n    useEffect(() => {\n        if (refDiv.current && Visible(refDiv.current, refList.current)) {\n            refDiv.current.scrollIntoView({behavior: \"smooth\"});\n        }\n    }, [logs]);\n\n\n    function handleChangeScroll() {\n\n    }\n\n    let Visible = function (target: any, container: any) {\n\n        // console.log(target.offsetTop - (container.scrollTop + container.offsetHeight));\n        // console.log(refList);\n        // console.log(window.pageYOffset, target.getBoundingClientRect().bottom);\n\n        let targetPosition = {\n                top: window.pageYOffset + target.getBoundingClientRect().top,\n                bottom: window.pageYOffset + target.getBoundingClientRect().bottom\n            },\n            windowPosition = {\n                top: window.pageYOffset,\n                bottom: window.pageYOffset + document.documentElement.clientHeight\n            };\n\n        // console.log(targetPosition.top - 12, windowPosition.bottom);\n        // console.log(target.offsetTop, (container.scrollTop + container.offsetHeight))\n\n        if (target.offsetTop - (container.scrollTop + container.offsetHeight) < 0) {\n            return true;\n        }\n\n        return targetPosition.top - 12 < windowPosition.bottom;\n    };\n\n\n    return (\n        <List className={classes.dialogContainer} ref={refList}>\n            {logs.map((log, key) => {\n                const logStrings = log.message.split(\"\\n\");\n                let color = \"white\";\n                switch (log.type) {\n                    case \"info\":\n                        color = \"white\";\n                        break;\n                    case \"warning\":\n                        color = \"yellow\";\n                        break;\n                    case \"error\":\n                        color = \"red\";\n                        break;\n                }\n                return logStrings.map((string: string, key: number) => {\n                    return (\n                        <React.Fragment>\n                            <ListItem className={classes.row}>\n                                <Typography className={classes.rowText} style={{color: color}}>\n                                    {string}\n                                </Typography>\n                            </ListItem>\n                        </React.Fragment>\n                    );\n                });\n            })}\n            <div style={{height: 1}} id=\"target\" ref={refDiv}/>\n        </List>\n    );\n});\n\nexport default withStyles(styles)(LogField);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 02.12.2020, 20:47\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useRef, useState} from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Dialog,\n    DialogTitle, IconButton,\n    List,\n    ListItem,\n    ListItemText,\n    Paper,\n    withStyles,\n} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport DialogTaskTabs from \"../DialogTabs/DialogTaskTabs\";\nimport {useTheme} from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport useCoreRequest from \"../../../../hooks/useCoreRequest\";\nimport useEnqueueErrorSnackbar from \"../../../../utils/enqueueErrorSnackbar\";\nimport {Log} from \"../../../../interfaces/Log\";\nimport CoreEventDispatcher from \"../../../../core/CoreEventDispatcher\";\nimport {WS_RENDER_JOB_ATTEMPT_LOG_CREATE, WS_RENDER_JOB_UPDATE} from \"../../../../globals\";\nimport Loading from \"../../../../components/Loading/Loading\";\nimport LogField from \"../../../../components/LogField\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport SyncIcon from \"@material-ui/icons/Sync\";\nimport BlockIcon from \"@material-ui/icons/Block\";\nimport {grey} from \"@material-ui/core/colors\";\nimport ErrorHandler from \"../../../../utils/ErrorHandler\";\nimport useAuth from \"../../../../hooks/useAuth\";\n\ninterface DialogTaskLogsProps extends Stylable {\n    open: boolean;\n    taskId: number;\n\n    onClose(): void;\n\n}\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    dir?: string;\n    index: any;\n    value: any;\n}\n\n\nfunction TabPanel(props: TabPanelProps) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\n\nfunction a11yProps(index: any) {\n    return {\n        id: `full-width-tab-${index}`,\n        \"aria-controls\": `full-width-tabpanel-${index}`,\n    };\n}\n\n\nconst DialogTaskLogs = React.forwardRef((props: DialogTaskLogsProps, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n        open,\n        onClose,\n        taskId\n    } = props;\n\n\n    const {logout} = useAuth();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const coreRequest = useCoreRequest();\n    const theme = useTheme();\n\n\n    const [loaded, setLoaded] = useState(false);\n    const [attemptsId, setAttemptsId] = useState([]);\n    const [logs, setLogs] = useState<Log[]>([]);\n    const [value, setValue] = useState(0);\n    const [attemptIndex, setAttemptIndex] = useState(0);\n    const [logIsLoaded, setLogIsLoaded] = useState(false);\n    const [autoUpload, setAutoUpload] = useState(true);\n    const [autoDownScroll, setAutoDownScroll] = useState(true);\n\n\n    const refDiv = React.useRef<HTMLDivElement | null>(null);\n    const refList = React.useRef<HTMLUListElement | null>(null);\n    const refUpload = useRef(autoUpload);\n\n\n    useEffect(() => {\n\n        if (logIsLoaded && autoUpload) {\n\n            CoreEventDispatcher.getInstance().addListener(WS_RENDER_JOB_ATTEMPT_LOG_CREATE, listener);\n\n        }\n\n        return () => {\n            CoreEventDispatcher.getInstance().removeListener(WS_RENDER_JOB_ATTEMPT_LOG_CREATE, listener);\n        };\n\n    }, [logIsLoaded]);\n\n    useEffect(() => {\n        //TODO change 0 to smth\n        if (taskId !== 0 && open) {\n            // console.log(\"adding event listener\");\n            Promise.all([\n                handleGetLogs(),\n            ]).then(() => {\n                setLoaded(true);\n                setLogIsLoaded(true);\n            });\n        }\n    }, [open]);\n\n    // console.log(attemptsId[attemptIndex]);\n    // console.log(attemptIndex);\n\n    function listener(message: any) {\n        if (refUpload.current) {\n            console.log(\"Create log listener\");\n            coreRequest()\n                .get(`attempts/${attemptsId[attemptIndex]}/log/${message.id}`)\n                .then(response => {\n                    console.log(\"Event:\", message);\n                    if (response.body.message !== \"undefined\" && attemptsId[attemptIndex] === message.attemptId) {\n                        console.log(response.body);\n                        setLogs(prev => ([...prev, response.body]));\n                    }\n                })\n                .catch(err => {\n                    enqueueErrorSnackbar(\"Cant get log\");\n                });\n        }\n    }\n\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", handleChangeScroll);\n        return () => window.removeEventListener(\"scroll\", handleChangeScroll);\n    }, []);\n\n    //TODO make normal scrolling when you in the bottom of the screen\n    useEffect(() => {\n        if ((refDiv.current && autoDownScroll) && Visible(refDiv.current, refList.current)) {\n            refDiv.current.scrollIntoView({behavior: \"smooth\"});\n        }\n    }, [logs]);\n\n    // console.log(attemptsId);\n\n    async function handleGetLogs() {\n        try {\n            const attempts: any = await coreRequest().get(`tasks/${taskId}/attempts`);\n            const firstAttemptId: any = attempts.body[0].id;\n            setAttemptsId(attempts.body.map((attempt: any) => attempt.id));\n            const logs = await coreRequest().get(`attempts/${firstAttemptId}/log`);\n            setLogs(logs.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {logout()})\n                .on(403, \"You have no access to view this data\")\n                .on(404, \"Task not found\")\n                .handle(err);\n        }\n    }\n\n    async function handleGetLogs2() {\n        try {\n            const attempts: any = await sendData();\n            return attempts;\n            // const lastAttemptId: any = attempts.body;\n            // console.log(lastAttemptId);\n            // const logs = await coreRequest().get(`attempts/${lastAttemptId}/log`);\n            // return logs;\n        } catch (err) {\n            enqueueErrorSnackbar(\"Cant get attempts\");\n        }\n    }\n\n    async function sendData() {\n        return [{message: \"hahahihi\", type: \"info\"}];\n    }\n\n    if (taskId !== 0) {\n        handleGetLogs2().then(response => {\n            // console.log(\"kuku\", response);\n        });\n    }\n\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n    const handleChangeIndex = (index: number) => {\n        setValue(index);\n    };\n\n    function handleChangeScroll() {\n\n    }\n\n    const handleChangeAutoUpload = () => {\n        setAutoUpload(!autoUpload);\n        refUpload.current = !autoUpload;\n        if (autoUpload) {\n            CoreEventDispatcher.getInstance().removeListener(WS_RENDER_JOB_ATTEMPT_LOG_CREATE, listener);\n        } else {\n            handleGetLogs().then(() => {\n                CoreEventDispatcher.getInstance().addListener(WS_RENDER_JOB_ATTEMPT_LOG_CREATE, listener);\n            });\n        }\n    };\n\n    const handleChangeAutoDownScroll = () => {\n        setAutoDownScroll(!autoDownScroll);\n    };\n\n    const handleScrollToTheBottom = () => {\n        if (refDiv.current) {\n            refDiv.current.scrollIntoView({behavior: \"smooth\"});\n        }\n    };\n\n    const handleCloseDialog = () => {\n        setLogs([]);\n        setLoaded(false);\n        setLogIsLoaded(false);\n        onClose();\n    };\n\n    let Visible = function (target: any, container: any) {\n\n        // console.log(target.offsetTop - (container.scrollTop + container.offsetHeight));\n        // console.log(refList);\n        // console.log(window.pageYOffset, target.getBoundingClientRect().bottom);\n\n        let targetPosition = {\n                top: window.pageYOffset + target.getBoundingClientRect().top,\n                bottom: window.pageYOffset + target.getBoundingClientRect().bottom\n            },\n            windowPosition = {\n                top: window.pageYOffset,\n                bottom: window.pageYOffset + document.documentElement.clientHeight\n            };\n\n        // console.log(targetPosition.top - 12, windowPosition.bottom);\n        // console.log(target.offsetTop, (container.scrollTop + container.offsetHeight))\n\n        if (target.offsetTop - (container.scrollTop + container.offsetHeight) < 0) {\n            return true;\n        }\n\n        return targetPosition.top - 12 < windowPosition.bottom;\n    };\n\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleCloseDialog}\n            maxWidth={false}\n            fullWidth\n        >\n            <DialogTitle className={classes.dialogTitle}>\n                Task Logs\n            </DialogTitle>\n\n            <Box className={classes.root}>\n                <AppBar position=\"static\" color=\"default\">\n                    <Tabs\n                        value={value}\n                        onChange={handleChange}\n                        indicatorColor=\"primary\"\n                        textColor=\"primary\"\n                        variant=\"fullWidth\"\n                        aria-label=\"full width tabs example\"\n                    >\n                        <Tab label=\"Slave information\" {...a11yProps(0)} />\n                        <Tab label=\"Slave logs\" {...a11yProps(1)} />\n                    </Tabs>\n                </AppBar>\n                <SwipeableViews\n                    axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n                    index={value}\n                    onChangeIndex={handleChangeIndex}\n                >\n                    <TabPanel value={value} index={0} dir={theme.direction}>\n                        <Box style={{height: 716}}>\n                            {/*Slave information*/}\n                            <LogField\n                                handleGetLogs={handleGetLogs2}\n                            />\n                        </Box>\n                    </TabPanel>\n                    <TabPanel value={value} index={1} dir={theme.direction}>\n                        {loaded ?\n                            <React.Fragment>\n\n                                <Box className={classes.buttonGroupContainer}>\n                                    <ButtonGroup aria-label=\"outlined primary button group\">\n                                        <Button\n                                            className={classes.button1}\n                                            style={{background: grey[700]}}\n                                            onClick={handleScrollToTheBottom}\n                                        >\n                                            <ArrowDownwardIcon/>\n                                        </Button>\n                                        <Button\n                                            className={classes.button2}\n                                            style={!autoDownScroll\n                                                ? {background: grey[800], color: grey[900]}\n                                                : {background: grey[700]}\n                                            }\n                                            onClick={handleChangeAutoDownScroll}\n                                        >\n                                            <BlockIcon/>\n                                        </Button>\n                                        <Button\n                                            className={classes.button3}\n                                            style={!autoUpload\n                                                ? {background: grey[800], color: grey[900]}\n                                                : {background: grey[700]}\n                                            }\n                                            onClick={handleChangeAutoUpload}\n                                        >\n                                            <SyncIcon/>\n                                        </Button>\n                                    </ButtonGroup>\n                                </Box>\n\n                                <List className={classes.dialogContainer} ref={refList}>\n                                    {logs.map((log, key) => {\n                                        const logStrings = log.message.split(\"\\n\");\n                                        let color = \"white\";\n                                        switch (log.type) {\n                                            case \"info\":\n                                                color = \"white\";\n                                                break;\n                                            case \"warning\":\n                                                color = \"yellow\";\n                                                break;\n                                            case \"error\":\n                                                color = \"red\";\n                                                break;\n                                        }\n                                        return logStrings.map((string: string, key: number) => {\n                                            return (\n                                                <React.Fragment key={key}>\n                                                    <ListItem className={classes.row}>\n                                                        <Typography className={classes.rowText} style={{color: color}}>\n                                                            {string}\n                                                        </Typography>\n                                                    </ListItem>\n                                                </React.Fragment>\n                                            );\n                                        });\n                                    })}\n                                    <div style={{height: 1}} id=\"target\" ref={refDiv}/>\n                                </List>\n                            </React.Fragment>\n                            :\n                            <Box className={classes.loading}>\n                                <Loading/>\n                            </Box>\n                        }\n                    </TabPanel>\n                </SwipeableViews>\n            </Box>\n\n        </Dialog>\n    );\n});\n\nexport default withStyles(styles)(DialogTaskLogs);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport {Box, Grid, IconButton, Typography, withStyles} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport clsx from \"clsx\";\nimport Progress from \"../../../../components/Progress\";\nimport withWidth, {isWidthUp} from \"@material-ui/core/withWidth\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Task from \"../../../../entities/Task\";\nimport useCoreRequest from \"../../../../hooks/useCoreRequest\";\nimport useEnqueueErrorSnackbar from \"../../../../utils/enqueueErrorSnackbar\";\nimport {format} from \"date-fns\";\nimport {useChangeRoute} from \"routing-manager\";\nimport DialogTaskLogs from \"../../LocalComponents/DialogTaskLogs\";\nimport ShortJobs from \"../../../../entities/ShortJobs\";\nimport CoreEventDispatcher from \"../../../../core/CoreEventDispatcher\";\nimport {WS_RENDER_TASK_UPDATE} from \"../../../../globals\";\nimport useAuth from \"../../../../hooks/useAuth\";\nimport ErrorHandler from \"../../../../utils/ErrorHandler\";\n\n/**\n * TasksTabProps - interface for TasksTab component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface TasksTabProps extends Stylable {\n    /**\n     * width - screen width\n     * @type \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"\n     */\n    width: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\n}\n\n/**\n * Data - interface for createData function\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface Data {\n    /**\n     * idTable - id of table component\n     * @type number\n     */\n    idTable: number\n    /**\n     * frame - frame of table component\n     * @type string\n     */\n    frame: string;\n    /**\n     * startTime - time when frame begin render\n     * @type string\n     */\n    startTime: string;\n    /**\n     * slave - name of slave\n     * @type string\n     */\n    slave: string;\n    /**\n     * elapsedTime - time from starting of render\n     * @type string\n     */\n    elapsedTime: string;\n    /**\n     * progress - implementation progress of table component\n     * @type number\n     */\n    progress: number;\n    /**\n     * icon - icon for more details\n     * @type any\n     */\n    icon: any;\n}\n\n/**\n * TasksTab - creates table with current render job details\n * @function\n * @author Andrii Demchyshyn\n */\nconst TasksTab = React.forwardRef((props: TasksTabProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n    } = props;\n\n\n    const {logout} = useAuth();\n    const coreRequest = useCoreRequest();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const {getRouteParams} = useChangeRoute();\n    const {panel} = getRouteParams();\n\n\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const [tasks, setTasks] = useState<Task[]>([]);\n    const [openDialog, setOpenDialog] = useState(false);\n    const [currentTaskId, setCurrentTaskId] = useState(0);\n\n\n    useEffect(() => {\n\n        console.log(\"adding event listener\");\n\n        const updateListener = (message: any) => {\n            console.log(\"Update TASK Listener\");\n            coreRequest()\n                .get(`tasks/${message.id}`)\n                .then(res => {\n                    console.log(\"Task:\", res.body);\n                    console.log(\"MessageID:\", message.id);\n                    setTasks(prev => {\n                        const taskIndex = prev.findIndex(task => task.id === message.id);\n                        if (taskIndex >= 0) {\n                            prev[taskIndex] = new Task(res.body);\n                        }\n                        return [...prev];\n                    });\n                })\n                .catch(err => {\n                    enqueueErrorSnackbar(\"Cant update tasks\");\n                });\n        };\n\n        CoreEventDispatcher.getInstance().addListener(WS_RENDER_TASK_UPDATE, updateListener);\n\n        handleGetTasks();\n\n        return () => {\n            CoreEventDispatcher.getInstance().removeListener(WS_RENDER_TASK_UPDATE, updateListener);\n        }\n\n    }, []);\n\n\n    const handleGetTasks = () => {\n        coreRequest()\n            .get(`jobs/${panel}/tasks`)\n            .then(response => {\n                if (Array.isArray(response.body)) {\n                    try {\n                        console.log(response.body);\n                        setTasks(response.body.map(item => new Task(item)));\n                    } catch (err) {\n                        enqueueErrorSnackbar(\"Invalid data types\");\n                    }\n                }\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(401, () => {logout()})\n                    .on(403, \"You don't have permissions to this data\")\n                    .on(404, \"Render job not found\")\n                    .handle(err);\n            });\n    };\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const handleOpenDialog = (id: number) => {\n        setCurrentTaskId(id);\n        setOpenDialog(true);\n    }\n\n    const handleCloseDialog = () => {\n        setOpenDialog(false);\n    };\n\n    return (\n        <Box>\n            <Grid container>\n                <Grid item xs={10}>\n                    <Typography variant=\"h5\" className={clsx(classes.textMain, className)}>\n                        Tasks\n                    </Typography>\n                </Grid>\n                <Grid item xs={2} className={clsx(classes.box, className)}>\n                    <IconButton className={clsx(classes.iconButton, className)}>\n                        <FilterListIcon/>\n                    </IconButton>\n                    <IconButton className={clsx(classes.iconButton, className)}>\n                        <MoreVertIcon/>\n                    </IconButton>\n                </Grid>\n            </Grid>\n            <Paper elevation={0} className={classes.root}>\n                <TableContainer className={classes.container}>\n                    <Table stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell className={classes.cell} align=\"left\">Id</TableCell>\n                                <TableCell className={classes.cell} align=\"left\">Frame</TableCell>\n                                <TableCell className={classes.cell} align=\"left\">Start Time</TableCell>\n                                <TableCell className={classes.cell} align=\"left\">Slave</TableCell>\n                                <TableCell className={classes.cell} align=\"left\">Elapsed Time</TableCell>\n                                <TableCell align=\"left\" className={classes.progress}>Progress</TableCell>\n                                <TableCell className={classes.cell} align=\"left\"> </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tasks.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((task, key) => {\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        tabIndex={-1}\n                                        key={key}\n                                    >\n                                        <TableCell component=\"th\" scope=\"row\">{task.id}</TableCell>\n                                        <TableCell align=\"left\">{task.frame}</TableCell>\n                                        <TableCell align=\"left\">{format(task.createdAt, \"dd.MM.yyyy hh:mm\")}</TableCell>\n                                        <TableCell align=\"left\">Slave</TableCell>\n                                        <TableCell align=\"left\">{format(task.createdAt, \"dd.MM.yyyy hh:mm\")}</TableCell>\n                                        <TableCell align=\"left\">\n                                            {isWidthUp(\"md\", props.width) ? (<Progress progress={task.status === \"done\" ? 100 : task.progress}/>) : (\"10%\")}\n                                        </TableCell>\n                                        <TableCell align=\"left\">\n                                            <IconButton className={classes.iconVisible} onClick={() => handleOpenDialog(task.id)}>\n                                                <VisibilityIcon/>\n                                            </IconButton>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={tasks.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n\n\n            <DialogTaskLogs\n                open={openDialog}\n                onClose={handleCloseDialog}\n                taskId={currentTaskId}\n            />\n\n\n        </Box>\n    );\n});\nTasksTab.displayName = \"TasksTable\";\nTasksTab.propTypes = {};\n\nexport default withWidth()(withStyles(styles)(TasksTab));\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        width: \"100%\",\n    },\n    container: {\n        maxHeight: \"74vh\",\n    },\n    textMain: {\n        marginBottom: theme.spacing(2),\n        fontWeight: 500,\n    },\n    box: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\"\n    },\n    iconButton: {\n        top: -8,\n    },\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nconst styles = (theme: Theme) => createStyles({\n    boxContainer: {\n        borderRadius: 3,\n        padding: theme.spacing(1),\n        background: theme.palette.baseDarkColors.main,\n    },\n    boxContainerTitle: {\n        fontSize: 9,\n        color: grey[500],\n    },\n    boxContainerText: {\n        fontSize: 16,\n        fontWeight: 500,\n    },\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React from \"react\";\nimport {Box, Typography, useTheme, withStyles} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport clsx from \"clsx\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport Containerable from \"../../interfaces/Containerable\";\n\n\n/**\n * DataTextFieldProps - interface for DataTextField component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface DataTextFieldProps extends Stylable, Containerable {\n    /**\n     * label - small text of element\n     * @type string\n     */\n    label?: string;\n    /**\n     * children - main text of element\n     * @type string\n     */\n    children?: string | null | never[];\n}\n\n/**\n * DataTextField - creates styled text component with label and main text\n * @function\n * @author Andrii Demchyshyn\n */\nconst DataTextField = React.forwardRef((props: DataTextFieldProps, ref: React.Ref<any>) => {\n    const {\n        classes,\n        className,\n        label,\n        children,\n    } = props;\n\n    const theme = useTheme();\n\n    return (\n        <Box className={clsx(classes.boxContainer, className)}>\n            <Typography className={clsx(classes.boxContainerTitle, className)}>\n                {label}\n            </Typography>\n            <Typography className={clsx(classes.boxContainerText, className)}>\n                {children}\n            </Typography>\n        </Box>\n    );\n});\n\nexport default withStyles(styles)(DataTextField);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React, {Ref} from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport {Box, Grid, IconButton, Typography, useMediaQuery, useTheme, withStyles} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport clsx from \"clsx\";\nimport DataTextField from \"../../../../components/DataTextField/DataTextField\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\n\n/**\n * InfoTabProps\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface InfoTabProps extends Stylable {\n}\n\n/**\n * Data - interface for createData function\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface Data {\n    /**\n     * cellName - name of cell\n     * @type string\n     */\n    cellName: string\n    /**\n     * cellContent - content of cell\n     * @type string\n     */\n    cellContent: string;\n}\n\n/**\n * createData - creates table row\n * @param cellName\n * @param cellContent\n * @function\n * @author Andrii Demchyshyn\n */\nfunction createData(cellName: string, cellContent: string): Data {\n    return {cellName, cellContent};\n}\n\n/**\n * rows - array of table rows\n * @type string\n * @type number\n */\nconst rows = [\n    createData(\"Name\", \"Pathfinder Logo\"),\n    createData(\"Submitter\", \"Danil Andreev\"),\n    createData(\"Organisation\", \"Blizzard Entertainment\"),\n    createData(\"Description\", \"Lorem ipsu lalalalalalallalasdfdgfsdfghsdfghsd \"),\n    createData(\"Status\", \"Done\"),\n    createData(\"Frames\", \"400 - 800\"),\n    createData(\"Priority\", \"1\"),\n    createData(\"Competing tasks\", \"2\"),\n    createData(\"Submission time\", \"23.09.2020 12.59.20\"),\n    createData(\"Finish time\", \"24.09.2020 12.59.20\"),\n    createData(\"Plugin\", \"Plug In Name\"),\n];\n\n/**\n * InfoTab -  creates table with detailed information about render job\n * @function\n * @author Andrii Demchyshyn\n */\nconst InfoTab = React.forwardRef((props: InfoTabProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n    } = props;\n\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const theme = useTheme();\n    const matches = useMediaQuery(theme.breakpoints.up(\"sm\"));\n    let table;\n\n    if (matches) {\n        table = (\n            <React.Fragment>\n                <Grid container>\n                    <Grid item xs={10}>\n                        <Typography variant=\"h5\" className={clsx(classes.textMain, className)}>\n                            Detailed Information\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={2} className={clsx(classes.box, className)}>\n                        <IconButton className={clsx(classes.iconButton, className)}>\n                            <FilterListIcon/>\n                        </IconButton>\n                        <IconButton className={clsx(classes.iconButton, className)}>\n                            <MoreVertIcon/>\n                        </IconButton>\n                    </Grid>\n                </Grid>\n                <Paper elevation={0} className={classes.root}>\n                    <TableContainer className={classes.container}>\n                        <Table stickyHeader aria-label=\"sticky table\">\n                            <TableBody>\n                                {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                                    return (\n                                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.cellName}>\n                                            <TableCell component=\"th\" scope=\"row\">{row.cellName}</TableCell>\n                                            <TableCell align=\"left\">{row.cellContent}</TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions={[10, 25, 100]}\n                        component=\"div\"\n                        count={rows.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onChangePage={handleChangePage}\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\n                    />\n                </Paper>\n            </React.Fragment>\n        );\n    } else {\n        table = (\n            <React.Fragment>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <DataTextField label=\"Name\" children=\"Pathfinder Logo\"/>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <DataTextField label=\"Submitter\" children=\"Danil Andreev\"/>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <DataTextField label=\"Organisation\" children=\"Blizzard Entertainment\"/>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <DataTextField label=\"Priority\" children=\"1\"/>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <DataTextField label=\"Status\" children=\"Done\"/>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <DataTextField label=\"Submission date\" children=\"25.09.2020 12.59.20\"/>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <DataTextField label=\"Finish date\" children=\"29.09.2020 12.59.20\"/>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <DataTextField label=\"Frames\" children=\"400 - 800\"/>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <DataTextField label=\"Competing tasks\" children=\"2\"/>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <DataTextField\n                            label=\"Description\"\n                            children=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed rutrum sodales risus vitae\n                            fermentum. Pellentesque hendrerit ultricies libero et lacinia. Integer sed ultricies velit.\n                            Sed dui orci, lacinia fermentum lacus vitae, maximus pretium ante.\"\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <DataTextField label=\"Plugin\" children=\"Plug In Name\"/>\n                    </Grid>\n                </Grid>\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <Box>\n            {table}\n        </Box>\n    );\n});\nInfoTab.displayName = \"TasksTable\";\nInfoTab.propTypes = {};\n\nexport default withStyles(styles)(InfoTab);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    textMain: {\n        fontWeight: 500,\n    },\n    dividerMargin: {\n        marginBottom: theme.spacing(2),\n    },\n    pluginMargin: {\n        marginTop: theme.spacing(2),\n    },\n    chartHeight: {\n        height: 300\n    },\n    box: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\"\n    },\n    iconButton: {\n        top: 8,\n    },\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {Ref} from \"react\";\nimport styles from \"./styles\";\nimport {Box, Divider, Grid, IconButton, Typography, useMediaQuery, useTheme, withStyles} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport {\n    AreaSeries,\n    ArgumentAxis,\n    BarSeries,\n    Chart,\n    LineSeries,\n    Title,\n    ValueAxis,\n} from \"@devexpress/dx-react-chart-material-ui\";\nimport {Animation} from \"@devexpress/dx-react-chart\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nconst data = [\n    {time: \"1\", slaves: 10},\n    {time: \"2\", slaves: 30},\n    {time: \"3\", slaves: 20},\n    {time: \"4\", slaves: 56},\n    {time: \"5\", slaves: 0},\n    {time: \"6\", slaves: 101},\n    {time: \"7\", slaves: 32},\n];\n\n/**\n * StatisticsTabProps - interface for StatisticsTab component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface StatisticsTabProps extends Stylable {\n}\n\n/**\n * StatisticsTab - creates tab page with statistics graphics\n * @function\n * @author Andrii Demchyshyn\n */\nconst StatisticsTab = React.forwardRef((props: StatisticsTabProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n    } = props;\n\n    const theme = useTheme();\n    const matches = useMediaQuery(theme.breakpoints.up(\"sm\"));\n    let height;\n\n    if (matches) {\n        height = 400;\n    } else {\n        height = 300;\n    }\n\n    return (\n        <Box className={classes.root}>\n            <Typography variant=\"h5\" className={clsx(classes.textMain, className)}>\n                Statistics\n            </Typography>\n            <Divider className={clsx(classes.dividerMargin, className)}/>\n            <Grid container spacing={2} ref={ref}>\n                <Grid item xs={12} md={6}>\n                    <Chart\n                        data={data}\n                        height={height}\n                    >\n                        <ArgumentAxis/>\n                        <ValueAxis/>\n\n                        <BarSeries\n                            valueField=\"slaves\"\n                            argumentField=\"time\"\n                        />\n                        <Title text=\"Slaves at current time\"/>\n                        <Animation/>\n                    </Chart>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Chart\n                        data={data}\n                        height={height}\n                    >\n                        <ArgumentAxis/>\n                        <ValueAxis/>\n\n                        <LineSeries\n                            valueField=\"slaves\"\n                            argumentField=\"time\"\n                        />\n                        <Title text=\"Render speed\"/>\n                        <Animation/>\n                    </Chart>\n                </Grid>\n            </Grid>\n            <Grid container>\n                <Grid item xs={11}>\n                    <Typography variant=\"h6\" className={clsx(classes.pluginMargin, className)}>\n                        Slaves\n                    </Typography>\n                </Grid>\n                <Grid item xs={1} className={clsx(classes.box, className)}>\n                    <IconButton className={clsx(classes.iconButton, className)}>\n                        <ExpandMoreIcon/>\n                    </IconButton>\n                </Grid>\n            </Grid>\n            <Divider className={clsx(classes.dividerMargin, className)}/>\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={6} md={4}>\n                    <Chart\n                        data={data}\n                        height={300}\n                    >\n                        <ArgumentAxis/>\n                        <ValueAxis/>\n\n                        <AreaSeries\n                            valueField=\"slaves\"\n                            argumentField=\"time\"\n                        />\n                        <Title text=\"Slave 1\"/>\n                        <Animation/>\n                    </Chart>\n                </Grid>\n                <Grid item xs={12} sm={6} md={4}>\n                    <Chart\n                        data={data}\n                        height={300}\n                    >\n                        <ArgumentAxis/>\n                        <ValueAxis/>\n\n                        <AreaSeries\n                            valueField=\"slaves\"\n                            argumentField=\"time\"\n                        />\n                        <Title text=\"Slave 2\"/>\n                        <Animation/>\n                    </Chart>\n                </Grid>\n                <Grid item xs={12} sm={6} md={4}>\n                    <Chart\n                        data={data}\n                        height={300}\n                    >\n                        <ArgumentAxis/>\n                        <ValueAxis/>\n\n                        <AreaSeries\n                            valueField=\"slaves\"\n                            argumentField=\"time\"\n                        />\n                        <Title text=\"Slave 3\"/>\n                        <Animation/>\n                    </Chart>\n                </Grid>\n                <Grid item xs={12} sm={6} md={4}>\n                    <Chart\n                        data={data}\n                        height={300}\n                    >\n                        <ArgumentAxis/>\n                        <ValueAxis/>\n\n                        <AreaSeries\n                            valueField=\"slaves\"\n                            argumentField=\"time\"\n                        />\n                        <Title text=\"Slave 4\"/>\n                        <Animation/>\n                    </Chart>\n                </Grid>\n                <Grid item xs={12} sm={6} md={4}>\n                    <Chart\n                        data={data}\n                        height={300}\n                    >\n                        <ArgumentAxis/>\n                        <ValueAxis/>\n\n                        <AreaSeries\n                            valueField=\"slaves\"\n                            argumentField=\"time\"\n                        />\n                        <Title text=\"Slave 5\"/>\n                        <Animation/>\n                    </Chart>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n});\nStatisticsTab.displayName = \"StatisticsTab\";\nStatisticsTab.propTypes = {};\n\nexport default withStyles(styles)(StatisticsTab);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 10.11.2020, 19:22\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {Box, Chip, Divider, Grid, IconButton, Typography, useMediaQuery, withStyles} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport clsx from \"clsx\";\nimport Progress from \"../../components/Progress\";\nimport Tabs from \"../../components/Tabs\";\nimport TabsPanel from \"../../components/TabsPanel\";\nimport {useTheme} from \"@material-ui/core/styles\";\nimport TasksTab from \"./Tabs/TasksTab\";\nimport InfoTable from \"./Tabs/InfoTab\";\nimport DataTextField from \"../../components/DataTextField\";\nimport StatisticsTab from \"./Tabs/StatisticsTab\";\nimport SimpleList from \"../../components/SimpleList\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport {useChangeRoute} from \"routing-manager\";\nimport {Route, Switch, useRouteMatch} from \"react-router-dom\";\nimport ShortJobs from \"../../entities/ShortJobs\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\nimport RenderJob from \"../../entities/RenderJob\";\nimport Loading from \"../../components/Loading\";\nimport {format} from \"date-fns\";\nimport CoreEventDispatcher from \"../../core/CoreEventDispatcher\";\nimport {WS_RENDER_JOB_UPDATE} from \"../../globals\";\nimport useAuth from \"../../hooks/useAuth\";\nimport ErrorHandler from \"../../utils/ErrorHandler\";\n\n/**\n * RenderJobsDetailsViewProps - interface for RenderJobsDetailsView component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface RenderJobsDetailsViewProps extends Stylable {\n}\n\n/**\n * RenderJobsDetailsView - display page with render job details\n * @function\n * @author Andrii Demchyshyn\n */\nconst RenderJobsDetailsView = React.forwardRef((props: RenderJobsDetailsViewProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n    } = props;\n\n\n    const {logout} = useAuth();\n    const coreRequest = useCoreRequest();\n    const theme = useTheme();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const {getRouteParams} = useChangeRoute();\n    const {panel} = getRouteParams();\n\n\n    const [value, setValue] = React.useState(0);\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [tasks, setTasks] = useState();\n    const [renderJob, setRenderJob] = useState<RenderJob>();\n    const [loaded, setLoaded] = useState(false);\n\n    // console.log(\"renderJob:\", renderJob);\n\n    useEffect(() => {\n\n        CoreEventDispatcher.getInstance().addListener(WS_RENDER_JOB_UPDATE, updateListener);\n\n        Promise.all([\n            handleGetJob(),\n            handleGetTasks(),\n        ]).then(() => {\n            setLoaded(true);\n        });\n\n        return () => {\n            CoreEventDispatcher.getInstance().removeListener(WS_RENDER_JOB_UPDATE, updateListener);\n        }\n\n    }, []);\n\n\n    function updateListener(message: any) {\n        console.log(\"Update Job Listener\");\n        coreRequest()\n            .get(\"jobs\")\n            .query({id: message.id})\n            .then(res => {\n                if(+panel === message.id) {\n                    setRenderJob(new ShortJobs(res.body));\n                }\n            });\n    }\n\n    async function handleGetJob() {\n        try {\n            const response = await coreRequest().get(`jobs/${panel}`);\n            console.log(response.body);\n            let entity: RenderJob = response.body;\n            try {\n                entity = new ShortJobs(response.body);\n            } catch (err) {\n                enqueueErrorSnackbar(\"Invalid data types\");\n            }\n\n            setRenderJob(entity);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {logout()})\n                .on(403, \"You don't have permissions to this data\")\n                .on(404, \"Render job not found\")\n                .handle(err);\n        }\n    }\n\n    async function handleGetTasks() {\n        try {\n            const response = await coreRequest().get(`jobs/${panel}/tasks`);\n            setTasks(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {logout()})\n                .on(403, \"You don't have permissions to this data\")\n                .on(404, \"Render job not found\")\n                .handle(err);\n        }\n    }\n\n    const handleClick = () => {\n        setIsOpen(!isOpen);\n    };\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n    const handleChangeIndex = (index: number) => {\n        setValue(index);\n    };\n\n    const matches = useMediaQuery(theme.breakpoints.up(\"md\"));\n    let tasksTab;\n    if (matches) {\n        tasksTab = (<TasksTab/>);\n    } else {\n        tasksTab = (<SimpleList/>);\n    }\n\n    let {path} = useRouteMatch();\n\n    return (\n        loaded ?\n            <Switch>\n                <Route exact path={path}>\n                    <Box>\n                        <Box className={classes.normalContent}>\n                            <Typography variant=\"subtitle2\" className={clsx(classes.pathText, className)}>\n                                Renders Jobs / {renderJob?.name}\n                            </Typography>\n                            <Typography variant=\"h4\" className={clsx(classes.mainText, className)}>\n                                {renderJob?.name}\n                            </Typography>\n\n                            <Progress progress={\n                                renderJob ? (((renderJob?.doneTasks) / (renderJob?.doneTasks + renderJob?.pendingTasks + renderJob?.failedTasks + renderJob?.processingTasks)) * 100) : 10\n                            } className={clsx(classes.progressMargin, className)}/>\n\n                            <Typography variant=\"h6\">\n                                General\n                            </Typography>\n                            <Divider className={clsx(classes.dividerMargin, className)}/>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <DataTextField label=\"Name\">\n                                        {renderJob?.name}\n                                    </DataTextField>\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <DataTextField label=\"Submitter\" children=\"Danil Andreev\"/>\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <DataTextField label=\"Organisation\">\n                                        {renderJob?.organization.name}\n                                    </DataTextField>\n                                </Grid>\n                                <Grid item xs={6} sm={3} md={2}>\n                                    <DataTextField label=\"Priority\" children=\"1\"/>\n                                </Grid>\n\n                                <Grid item xs={6} sm={3} md={2}>\n                                    <DataTextField label=\"Status\" children=\"Done\"/>\n                                </Grid>\n                                <Grid item xs={6} md={4}>\n                                    <DataTextField label=\"Submission date\">\n                                        {renderJob && format(renderJob.createdAt, \"dd.MM.yyyy hh:mm\")}\n                                    </DataTextField>\n                                </Grid>\n                                <Grid item xs={6} md={4}>\n                                    <DataTextField label=\"Finish date\">\n                                        {renderJob && format(renderJob.updatedAt, \"dd.MM.yyyy hh:mm\")}\n                                    </DataTextField>\n\n                                </Grid>\n                                {renderJob &&\n                                <Grid item xs={6} md={4}>\n                                    {renderJob?.frameRange.map((frame: any, index: number) => {\n                                        return (\n                                            <Chip\n                                                key={index}\n                                                label={`Frames: ${frame.start} - ${frame.end}`}\n                                                style={{minWidth: 125}}\n                                            />\n                                        );\n                                    })}\n                                </Grid>\n                                }\n\n                                <Grid item xs={12}>\n                                    <DataTextField\n                                        label=\"Description\"\n                                    >\n                                        {renderJob?.description}\n                                    </DataTextField>\n                                </Grid>\n                            </Grid>\n                            <Grid container>\n                                <Grid item xs={11}>\n                                    <Typography variant=\"h6\" className={clsx(classes.pluginMargin, className)}>\n                                        Plugin\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={1} className={clsx(classes.box, className)}>\n                                    <IconButton onClick={handleClick} className={clsx(classes.iconButton, className)}>\n                                        <ExpandMoreIcon/>\n                                    </IconButton>\n                                </Grid>\n                            </Grid>\n                            <Divider className={clsx(classes.dividerMargin, className)}/>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <DataTextField label=\"Name\" children=\"Plug in Name\"/>\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <DataTextField label=\"Version\" children=\"ver.1.22474487139...\"/>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <DataTextField\n                                        label=\"Description\"\n                                        children=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed rutrum sodales risus vitae\n                                fermentum. Pellentesque hendrerit ultricies libero et lacinia. Integer sed ultricies velit.\n                                Sed dui orci, lacinia fermentum lacus vitae, maximus pretium ante.\"\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Box>\n                        <Tabs\n                            value={value}\n                            onChange={handleChange}\n                            onChangeIndex={handleChangeIndex}\n                            className={clsx(classes.customTabsMargin, className)}\n                        >\n                            <TabsPanel value={value} index={0} dir={theme.direction}>\n                                {tasksTab}\n                            </TabsPanel>\n                            <TabsPanel value={value} index={1} dir={theme.direction}>\n                                <InfoTable/>\n                            </TabsPanel>\n                            <TabsPanel value={value} index={2} dir={theme.direction}>\n                                <StatisticsTab/>\n                            </TabsPanel>\n                        </Tabs>\n                    </Box>\n                </Route>\n            </Switch>\n            :\n            <Box className={classes.loading}>\n                <Loading/>\n            </Box>\n    );\n});\nRenderJobsDetailsView.displayName = \"RenderJobsDetailsView\";\nRenderJobsDetailsView.propTypes = {};\n\nexport default withStyles(styles)(RenderJobsDetailsView);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 10.11.2020, 19:22\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {Box, Grid, IconButton, Typography, useMediaQuery, useTheme, withStyles} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport RenderJobsTable from \"../../components/RenderJobsTable\";\nimport SimpleList from \"../../components/SimpleList\";\nimport clsx from \"clsx\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport {Route, Switch, useRouteMatch} from \"react-router-dom\";\nimport RenderJobsDetailsView from \"../RenderJobsDetailsView\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\nimport {Jobs} from \"../../interfaces/Jobs\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\nimport useAuth from \"../../hooks/useAuth\";\nimport ErrorHandler from \"../../utils/ErrorHandler\";\n\n/**\n * RenderJobsViewProps - interface for RenderJobsView component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface RenderJobsViewProps extends Stylable {\n\n}\n\n/**\n * RenderJobsView - display render jobs page\n * @function\n * @author Andrii Demchyshyn\n */\nconst RenderJobsView = React.forwardRef((props: RenderJobsViewProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n    } = props;\n\n\n    const {logout} = useAuth();\n    const coreRequest = useCoreRequest();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n\n\n    const [jobs, setJobs] = useState<Jobs[]>([]);\n    const [loaded, setLoaded] = useState(false);\n\n\n    useEffect(() => {\n        Promise.all([\n            handleGetJobs(),\n        ]).then(() => {\n            setLoaded(true);\n        });\n    }, []);\n\n\n    async function handleGetJobs() {\n        try {\n            const response = await coreRequest().get(\"jobs\");\n            setJobs(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {logout()})\n                .handle(err);\n        }\n    }\n\n\n    const theme = useTheme();\n    const matches = useMediaQuery(theme.breakpoints.up(\"md\"));\n    let tableList;\n    if (matches) {\n        tableList = (<RenderJobsTable/>);\n    } else {\n        tableList = (\n            <React.Fragment>\n                <Grid container>\n                    <Grid item xs={10}>\n                        <Typography variant=\"h5\" className={clsx(classes.textMain)}>\n                            Render Jobs\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={2} className={clsx(classes.box, className)}>\n                        <IconButton>\n                            <SearchIcon/>\n                        </IconButton>\n                    </Grid>\n                </Grid>\n                <SimpleList/>\n            </React.Fragment>\n        );\n    }\n\n    let {path} = useRouteMatch();\n\n    return (\n        <Switch>\n            <Route exact path={path}>\n                <Box>\n                    {tableList}\n                </Box>\n            </Route>\n            <Route exact path={`${path}/:jobId`}>\n                <RenderJobsDetailsView/>\n            </Route>\n        </Switch>\n    );\n});\nRenderJobsView.displayName = \"RenderJobsView\";\nRenderJobsView.propTypes = {};\n\nexport default withStyles(styles)(RenderJobsView);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 10.11.2020, 19:22\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    containerToken: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    root: {\n        display: \"flex\",\n        flexDirection: \"row\",\n    },\n    avatar: {\n        variant: \"circle\",\n        height: theme.spacing(25),\n        width: theme.spacing(25),\n    },\n    container: {\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        [theme.breakpoints.down(\"sm\")]: {\n            paddingLeft: theme.spacing(2),\n            paddingRight: theme.spacing(2),\n        },\n    },\n    topic: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    box: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\"\n    },\n    typographyToken: {\n        display: \"flex\",\n        alignItems: \"flex-end\",\n    },\n    firstLine: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        listStyleType: \"none\",\n        [theme.breakpoints.down(\"sm\")]: {\n            paddingLeft: theme.spacing(2),\n            paddingRight: theme.spacing(2),\n        },\n    },\n    paddingNone: {\n        paddingLeft: 0,\n        paddingBottom: 0,\n    },\n    loading: {\n        display: \"flex\",\n        height: \"90vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n});\n\nexport default styles;","export default __webpack_public_path__ + \"static/media/githubAvatar.40a04447.jpg\";","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport {grey, red} from \"@material-ui/core/colors\";\n\nconst styles = (theme: Theme) => createStyles({\n    container: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        [theme.breakpoints.down(\"sm\")]: {\n            paddingLeft: theme.spacing(2),\n            paddingRight: theme.spacing(2),\n        },\n\n    },\n    box: {\n        display: \"flex\",\n        justifyContent: \"flex-begin\",\n        alignItems: \"flex-end\"\n    },\n    lastToken: {\n        color: theme.palette.common.white,\n        backgroundColor: theme.palette.error.light,\n    },\n    paddingNone: {\n        paddingLeft: 0,\n        paddingBottom: 0,\n    },\n    newToken: {\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n    tokenAdd: {\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n    spacingBetweenButtonFix: {\n        display: \"flex\",\n        flexGrow: 1,\n    },\n    spacingInNewToken: {\n        paddingRight: theme.spacing(2),\n    },\n    topMargin: {\n        marginTop: theme.spacing(1),\n    },\n    generatedToken: {\n        display: \"flex\",\n        flexGrow: 1,\n        alignItems: \"flex-begin\",\n        justifyContent: \"flex-begin\",\n        textWrap: \"wrap\",\n        flexDirection: \"column\",\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        marginLeft: theme.spacing(2),\n    },\n    noWrap: {\n        flexWrap: \"nowrap\",\n    },\n    createTokenControls: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\",\n    },\n    wrapWord: {\n        whiteSpace: \"pre-wrap\",\n        wordWrap: \"break-word\",\n        wordBreak: \"break-all\",\n    },\n    closeButtonColor: {\n        color: grey[50],\n    },\n    copyClipboardHover: {\n        \"&:hover\": {\n            backgroundColor: red[400],\n        },\n\n    }\n\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {useSnackbar} from \"notistack\";\n\nexport default function useEnqueueSuccessSnackbar() {\n    const {enqueueSnackbar} = useSnackbar();\n\n    return (message: string) => enqueueSnackbar(message, {\n        anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"center\",\n        },\n        variant: \"success\",\n    });\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {\n    Box,\n    Collapse,\n    Divider,\n    Grid,\n    IconButton,\n    ListItem,\n    ListItemSecondaryAction,\n    Typography,\n    useMediaQuery,\n    useTheme,\n    withStyles\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport styles from \"./styles\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport useCoreRequest from \"../../../../hooks/useCoreRequest\";\nimport useEnqueueErrorSnackbar from \"../../../../utils/enqueueErrorSnackbar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport List from \"@material-ui/core/List\";\nimport Token from \"../../../../interfaces/Token\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport UserToken from \"../../../../entities/UserToken\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport useEnqueueSuccessSnackbar from \"../../../../utils/EnqueSuccessSnackbar\";\nimport useAuth from \"../../../../hooks/useAuth\";\nimport ErrorHandler from \"../../../../utils/ErrorHandler\";\n\n/**\n * TokensViewerPropsStyled - interface for TokensViewer function\n * @interface\n * @author Nikita Nesterov\n */\ninterface TokensViewerProps extends Stylable {\n    description?: string,\n    token?: string,\n}\n\ninterface ValidationErrors {\n    \"noInputError\": boolean;\n    \"nameError\": boolean;\n    \"descriptionError\": boolean;\n}\n\n/**\n * TokensViewer - function for UserPageView component used for fast output(creation) of tokens and their description\n * @function\n * @author Nikita Nesterov\n */\nconst TokensViewer = React.forwardRef((props: TokensViewerProps, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n        description,\n        token,\n    } = props;\n\n\n    const {logout} = useAuth();\n    const coreRequest = useCoreRequest();\n\n\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [tokens, setTokens] = React.useState<Token[]>();\n    const [isButtonActive, setIsButtonActive] = React.useState(false);\n    const [newToken, setNewToken] = React.useState({name: \"\", description: \"\"});\n    const [lastAddedToken, setLastAddedToken] = React.useState<UserToken | null>(null);\n    const [errors, setErrors] = useState<ValidationErrors>({\n        \"noInputError\": true,\n        \"nameError\": false,\n        \"descriptionError\": false,\n    });\n    const enqueueSuccessSnackbar = useEnqueueSuccessSnackbar();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n\n    useEffect(() => {\n        handleGetTokens();\n    }, []);\n\n    function handleGetTokens() {\n        //TODO if user is empty redirect to login page\n        coreRequest()\n            .get(\"tokens\")\n            .then((response) => {\n                console.log(response.body);\n                setTokens(response.body);\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(401, () => {\n                        logout();\n                    })\n                    .handle(err);\n            });\n    }\n\n    function handleInputToken(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist();\n        setNewToken(prev => ({...prev, [event.target.name]: event.target.value}));\n    }\n\n    function handleAddToken() {\n        if (!errors.noInputError && !errors.nameError && !errors.descriptionError) {\n            setIsButtonActive(false);\n            coreRequest()\n                .post(\"tokens\")\n                .send(newToken)\n                .then((response) => {\n                    //TODO entity\n                    setLastAddedToken(response.body);\n                    handleGetTokens();\n                })\n                .catch(err => {\n                    const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                    errorHandler\n                        .on(400, \"Can not add token\")\n                        .on(401, () => {\n                            logout();\n                        })\n                        .handle(err);\n                });\n        } else {\n            enqueueErrorSnackbar(\"Can`t create a token\");\n        }\n    }\n\n    function handleRemoveToken(tokenId: number) {\n        setTokens(tokens?.filter(token => token.id !== tokenId));\n        coreRequest()\n            .delete(`tokens/${tokenId}`)\n            .then(response => {\n                handleGetTokens();\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, \"Can not add token\")\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(404, \"You have no permissions to delete this token\")\n                    .handle(err);\n            });\n    }\n\n    const handleClick = () => {\n        setIsOpen(!isOpen);\n        setIsButtonActive(false);\n    };\n\n    function handleClose() {\n        setIsButtonActive(false);\n    }\n\n    function handleIsButtonActive() {\n        setIsButtonActive(true);\n    }\n\n    async function copyToClipboard(str: any) {\n        const el = document.createElement(\"textarea\");\n        el.value = str;\n        el.setAttribute(\"readonly\", \"\");\n        el.style.position = \"absolute\";\n        el.style.left = \"-9999px\";\n        document.body.appendChild(el);\n        el.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(el);\n        return str;\n    }\n\n    function handleValidation(event: React.FocusEvent<HTMLInputElement>) {\n        setErrors(prev => ({\n            ...prev, \"noInputError\": false\n        }));\n        if (event.target.name === \"name\") {\n            if (!newToken.name.slice(0, 1).match(/^[a-zA-Z]+$/) || !newToken.name || newToken.name.length > 50) {\n                setErrors(prev => ({\n                    ...prev, \"nameError\": true\n                }));\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"nameError\": false\n                }));\n            }\n        }\n        if (event.target.name === \"description\") {\n            if (!newToken.description || newToken.description.length > 100) {\n                setErrors(prev => ({\n                    ...prev, \"descriptionError\": true\n                }));\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"descriptionError\": false\n                }));\n            }\n        }\n    }\n\n    const theme = useTheme();\n    const matches = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    let tokenView;\n    if (matches) {\n        tokenView = (\n            <Grid container className={clsx(classes.container, className)}>\n                <Grid item xs={12} md={10}>\n                    <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n                        <ListItem className={classes.paddingNone}>\n                            <ListItemText primary=\"Token\" primaryTypographyProps={{variant: \"h6\"}}/>\n                            <ListItemSecondaryAction>\n                                {isOpen &&\n                                <IconButton\n                                    edge=\"end\"\n                                    aria-label=\"delete\"\n                                    onClick={handleIsButtonActive}\n                                    style={{marginRight: theme.spacing(1)}}\n                                >\n                                    <AddIcon/>\n                                </IconButton>\n                                }\n                                <IconButton\n                                    edge=\"end\"\n                                    aria-label=\"delete\"\n                                    onClick={handleClick}\n                                >\n                                    {isOpen ? <ExpandLess/> : <ExpandMore/>}\n                                </IconButton>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        <Divider/>\n                        {isButtonActive &&\n                        <ListItem className={classes.newToken}>\n                            <Grid container>\n                                <Grid item\n                                      className={clsx(classes.tokenAdd, classes.spacingInNewToken, classes.spacingBetweenButtonFix)}>\n                                    <TextField\n                                        error={errors.nameError}\n                                        variant=\"standard\"\n                                        required\n                                        fullWidth\n                                        name=\"name\"\n                                        label=\"Name\"\n                                        onChange={handleInputToken}\n                                        onBlur={handleValidation}\n                                    />\n                                </Grid>\n                                <Grid item className={clsx(classes.tokenAdd, classes.spacingBetweenButtonFix)}>\n                                    <TextField\n                                        error={errors.descriptionError}\n                                        variant=\"standard\"\n                                        fullWidth\n                                        name=\"description\"\n                                        label=\"Description\"\n                                        onChange={handleInputToken}\n                                        onBlur={handleValidation}\n                                    />\n                                </Grid>\n                                <Grid item className={classes.createTokenControls}>\n                                    <IconButton\n                                        onClick={handleClose}\n                                    >\n                                        <CloseIcon/>\n                                    </IconButton>\n                                    <IconButton onClick={handleAddToken}><CheckIcon/></IconButton>\n                                </Grid>\n                            </Grid>\n                        </ListItem>\n                        }\n                        {lastAddedToken &&\n                        <ListItem\n                            button\n                            classes={{button: classes.copyClipboardHover}}\n                            className={clsx(classes.container, classes.noWrap, classes.lastToken)}\n                            onClick={() => {\n                                copyToClipboard(lastAddedToken?.token)\n                                    .then(res => {\n                                        enqueueSuccessSnackbar(\"successfully copied\");\n                                    })\n                                    .catch(error => {\n                                        enqueueErrorSnackbar(\"failed to copy\");\n                                    });\n                            }}\n                        >\n                            <Box className={clsx(classes.generatedToken, classes.wrapWord)}>\n                                <Typography variant=\"h6\">{lastAddedToken?.token}</Typography>\n                                <Typography variant=\"caption\">This will never be shown again (Click to\n                                    copy)</Typography>\n                            </Box>\n                            <ListItemSecondaryAction>\n                                <IconButton\n                                    edge=\"end\"\n                                    aria-label=\"close\"\n                                    style={{marginRight: theme.spacing(1)}}\n                                    onClick={() => setLastAddedToken(null)}\n\n                                >\n                                    <CloseIcon className={classes.closeButtonColor}/>\n                                </IconButton>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        }\n                        <Collapse in={isOpen} timeout=\"auto\" unmountOnExit>\n                            {tokens?.map((token) =>\n                                <ListItem\n                                    key={`render-job-${token.id}`}\n                                >\n                                    <ListItemText primary={token.name} secondary={token.description}/>\n                                    <ListItemSecondaryAction>\n                                        <IconButton\n                                            edge=\"end\"\n                                            aria-label=\"delete\"\n                                            onClick={() => handleRemoveToken(token.id)}\n                                        >\n                                            <DeleteIcon/>\n                                        </IconButton>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )}\n                            {\n                                tokens?.length === 0 &&\n                                <ListItem>\n                                    <ListItemText primary=\"No tokens were added, please create some\"/>\n                                </ListItem>\n                            }\n                        </Collapse>\n                    </List>\n                </Grid>\n            </Grid>\n        );\n    } else {\n        tokenView = (\n            tokenView = (\n                <Grid container className={clsx(classes.container, className)}>\n                    <Grid item xs={12} md={10}>\n                        <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n                            <ListItem className={classes.paddingNone}>\n                                <ListItemText primary=\"Token\" primaryTypographyProps={{variant: \"h6\"}}/>\n                                <ListItemSecondaryAction>\n                                    {isOpen &&\n                                    <IconButton\n                                        edge=\"end\"\n                                        aria-label=\"delete\"\n                                        style={{marginRight: theme.spacing(0)}}\n                                        onClick={handleIsButtonActive}\n                                    >\n                                        <AddIcon/>\n                                    </IconButton>\n                                    }\n                                    <IconButton\n                                        edge=\"end\"\n                                        aria-label=\"delete\"\n                                        onClick={handleClick}\n                                    >\n                                        {isOpen ? <ExpandLess/> : <ExpandMore/>}\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider/>\n                            {isButtonActive &&\n                            <ListItem className={classes.newToken}>\n                                <Grid container className={classes.newToken}>\n                                    <Grid item xs={12} className={classes.tokenAdd}>\n                                        <TextField\n                                            variant=\"standard\"\n                                            required\n                                            fullWidth\n                                            name=\"name\"\n                                            label=\"Name\"\n                                            autoFocus\n                                            onChange={handleInputToken}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12}\n                                          className={clsx(classes.tokenAdd, classes.topMargin, classes.spacingBetweenButtonFix)}>\n                                        <TextField\n                                            variant=\"standard\"\n                                            fullWidth\n                                            name=\"description\"\n                                            label=\"Description\"\n                                            autoFocus\n                                            onChange={handleInputToken}\n                                        />\n                                    </Grid>\n                                    <Button\n                                        type=\"submit\"\n                                        fullWidth\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        className={clsx(classes.tokenAdd, classes.topMargin)}\n                                        onClick={handleAddToken}\n                                    >\n                                        Add Token\n                                    </Button>\n\n                                </Grid>\n                            </ListItem>\n                            }\n                            {lastAddedToken &&\n                            <ListItem\n                                button\n                                classes={{button: classes.copyClipboardHover}}\n                                className={clsx(classes.container, classes.noWrap, classes.lastToken)}\n                                onClick={() => {\n                                    copyToClipboard(lastAddedToken?.token)\n                                        .then(res => {\n                                            enqueueSuccessSnackbar(\"successfully copied\");\n                                        })\n                                        .catch(error => {\n                                            enqueueErrorSnackbar(\"failed to copy\");\n                                        });\n                                }}\n                            >\n                                <Box className={clsx(classes.generatedToken)}>\n                                    <Typography\n                                        variant=\"h6\"\n                                        className={classes.wrapWord}\n                                    >\n                                        {lastAddedToken?.token}\n                                    </Typography>\n                                    <Typography variant=\"caption\">This will never be shown again</Typography>\n                                </Box>\n                                <ListItemSecondaryAction>\n                                    <IconButton\n                                        edge=\"end\"\n                                        aria-label=\"close\"\n                                        style={{marginRight: theme.spacing(1)}}\n                                        onClick={() => setLastAddedToken(null)}\n\n                                    >\n                                        <CloseIcon className={classes.closeButtonColor}/>\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            }\n                            <Collapse in={isOpen} timeout=\"auto\" unmountOnExit>\n                                {tokens?.map((token) =>\n                                    <ListItem\n                                        key={`render-job-${token.id}`}\n                                    >\n                                        <ListItemText primary={token.name} secondary={token.description}/>\n                                        <ListItemSecondaryAction>\n                                            <IconButton\n                                                edge=\"end\"\n                                                aria-label=\"delete\"\n                                                onClick={() => handleRemoveToken(token.id)}\n                                            >\n                                                <DeleteIcon/>\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                )}\n                            </Collapse>\n                        </List>\n                    </Grid>\n                </Grid>\n            )\n        );\n    }\n\n    return (\n        <Box>\n            {tokenView}\n        </Box>\n    );\n});\n\nexport default withStyles(styles)(TokensViewer);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {\n    Avatar,\n    Box,\n    Button,\n    Chip,\n    Divider,\n    Grid,\n    IconButton,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    useMediaQuery,\n    useTheme,\n    withStyles\n} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport githubAvatar from \"./githubAvatar.jpg\";\nimport DataTextField from \"../../components/DataTextField\";\nimport clsx from \"clsx\";\nimport TokensViewer from \"./LocalComponents/TokensViewer\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\nimport useAuth from \"../../hooks/useAuth\";\nimport UserData from \"../../interfaces/UserData\";\nimport {useChangeRoute} from \"routing-manager\";\nimport Token from \"../../interfaces/Token\";\nimport {Route, Switch, useRouteMatch} from \"react-router-dom\";\nimport List from \"@material-ui/core/List\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport Loading from \"../../components/Loading\";\nimport ErrorHandler from \"../../utils/ErrorHandler\";\n\n/**\n * UserPageViewPropsStyled - interface for UserPageView\n * @interface\n * @author Nikita Nesterov\n */\ninterface UserPageViewProps extends Stylable {\n\n}\n\n/**\n * UserPageView - function for showing user page\n * @function\n * @author NikitaNesterov\n */\nconst UserPageView = React.forwardRef((props: UserPageViewProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n        style,\n    } = props;\n\n    const {getUser, logout} = useAuth();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const coreRequest = useCoreRequest();\n    const [userData, setUserData] = useState<UserData | null>(null);\n    const {getRouteParams, changeRoute} = useChangeRoute();\n    const {id} = getRouteParams();\n    const [tokens, setTokens] = useState<Token[]>([]);\n    const [editedUser, setEditedUser] = useState();\n    const [loaded, setLoaded] = useState(false);\n\n\n    useEffect(() => {\n        Promise.all([\n            handleGetUser(),\n            handleGetToken(),\n        ]).then(() => {\n            setLoaded(true);\n        });\n    }, []);\n\n\n    async function handleGetToken() {\n        try {\n            const response = await coreRequest().get(`tokens`);\n            setTokens(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {\n                    logout();\n                })\n                .handle(err);\n        }\n    }\n\n    async function handleGetUser() {\n        const user = getUser();\n        let userId = id;\n        if (!userId) {\n            userId = user?.id;\n        }\n        try {\n            const response = await coreRequest().get(`users/${userId}`);\n            setUserData(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {\n                    logout();\n                })\n                .on(404, \"User not found\")\n                .handle(err);\n        }\n    }\n\n    function handleEditUser() {\n        const userId = getUser()?.id;\n        coreRequest()\n            .post(`users/${userId}`)\n            .send()\n            .then()\n            .catch();\n    }\n\n    function handleDeleteUser() {\n        const userId = getUser()?.id;\n        coreRequest()\n            .delete(`users/${userId}`)\n            .then()\n            .catch();\n    }\n\n    const theme = useTheme();\n    const matches = useMediaQuery(theme.breakpoints.up(\"md\"));\n    let mainInfo;\n    if (matches) {\n        mainInfo = (\n            <Grid container spacing={2} className={clsx(classes.container, className)}>\n                <Grid item xs={4}>\n                    <DataTextField label=\"Name\" children={userData?.username}/>\n                </Grid>\n                <Grid item xs={4}>\n                    <DataTextField label=\"Department\" children=\"Pathfinder team crew\"/>\n                </Grid>\n                <Grid item xs={2}>\n                    <Avatar alt=\"Who1sthat\" src={githubAvatar} className={clsx(classes.avatar, className)}/>\n                </Grid>\n                <Grid item xs={4}>\n                    <Button\n                        onClick={() => changeRoute({page: `user`, id: getUser()?.id, actions: \"edit\"})}\n                    >\n                        Edit Profile\n                    </Button>\n                </Grid>\n            </Grid>\n        );\n    } else {\n        mainInfo = (\n            <Grid container spacing={2} className={clsx(classes.container, className)}>\n                <Grid item xs={12} className={clsx(classes.container, classes.root, className)}>\n                    <Avatar src={githubAvatar} className={clsx(classes.avatar)}/>\n                </Grid>\n                <Grid item xs={12} md={10}>\n                    <DataTextField label=\"Name\" children={userData?.username}/>\n                </Grid>\n                <Grid item xs={12} md={10}>\n                    <DataTextField label=\"Department\" children=\"Pathfinder team crew\"/>\n                </Grid>\n            </Grid>\n        );\n    }\n\n    let {path} = useRouteMatch();\n\n    return (\n        loaded ?\n            <Switch>\n                <Route path={path}>\n                    <Box style={style} className={className}>\n                        {mainInfo}\n                        <Grid container className={classes.firstLine}>\n                            <Grid item xs={12} md={10}>\n                                <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n                                    <ListItem className={classes.paddingNone}>\n                                        <ListItemText primary=\"Organizations\" primaryTypographyProps={{variant: \"h6\"}}/>\n                                    </ListItem>\n                                    <Divider/>\n                                </List>\n                            </Grid>\n                        </Grid>\n\n                        {/*TODO If no organisation print smth else*/}\n\n                        <Grid container className={classes.firstLine}>\n                            <Grid item xs={12} md={10}>\n                                <List>\n                                    {userData?.organizations.map((organization) => {\n                                            return (\n                                                <ListItem\n                                                    key={organization.id}\n                                                    button\n                                                    onClick={() => {\n                                                        changeRoute({page: \"organization\", id: organization.id});\n                                                    }}\n                                                >\n                                                    <ListItemAvatar>\n                                                        <Avatar\n                                                            src=\"https://cdn.sportclub.ru/assets/2019-09-20/n97c311rvb.jpg\"\n                                                        />\n                                                    </ListItemAvatar>\n                                                    <ListItemText\n                                                        primary={organization.name}\n                                                        secondary={organization.description}\n                                                    />\n                                                    <ListItemSecondaryAction>\n                                                        <Chip\n                                                            label={\"MainRole\"}\n                                                            style={{backgroundColor: `#f76`}}\n                                                        />\n                                                        <IconButton\n                                                            edge=\"end\"\n                                                        >\n                                                            <SettingsIcon/>\n                                                        </IconButton>\n                                                    </ListItemSecondaryAction>\n                                                </ListItem>\n                                            );\n                                        })}\n                                    {userData?.organizations.length === 0 &&\n                                        <ListItem>\n                                            <ListItemText primary=\"You are not a member of any organization\"/>\n                                        </ListItem>\n                                    }\n                                </List>\n                            </Grid>\n                        </Grid>\n                        <TokensViewer/>\n                    </Box>\n                </Route>\n            </Switch>\n            :\n            <Box className={classes.loading}>\n                <Loading/>\n            </Box>\n    );\n});\n\nexport default withStyles(styles)(UserPageView);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 10.11.2020, 19:22\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport {grey, orange} from \"@material-ui/core/colors\";\n\nconst styles = (theme: Theme) => createStyles({\n    loading: {\n        display: \"flex\",\n        height: \"90vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    firstLine: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        listStyleType: \"none\",\n        [theme.breakpoints.down(\"sm\")]: {\n            paddingLeft: theme.spacing(2),\n            paddingRight: theme.spacing(2),\n        },\n    },\n    nameDescription: {\n        justifyContent: \"flex-begin\",\n    },\n    settingButtongAlign: {\n        display: \"flex\",\n        flexAlignment: \"flex-end\",\n    },\n    avatar: {\n        height: theme.spacing(25),\n        width: theme.spacing(25),\n    },\n    itemsRowBackground: {\n        marginBottom: theme.spacing(1),\n        backgroundColor: grey[200],\n        borderRadius: \"5px\",\n    },\n    selectFieldStyle: {\n        borderRadius: \"5px\",\n    },\n    avatarBox: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginTop: theme.spacing(2),\n        width: \"inherit\",\n    },\n    paddingNone: {\n        paddingLeft: 0,\n        paddingBottom: 0,\n    },\n    colorBar: {\n        width: 4,\n        height: theme.spacing(7),\n    },\n    rolesDescription: {\n        width: 500,\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\",\n        textOverflow: \"ellipsis\",\n        [theme.breakpoints.down(\"xs\")]: {\n            width: \"70%\",\n        },\n    },\n    rolesPrimary: {\n        width: 500,\n        overflowWrap: \"anywhere\",\n        [theme.breakpoints.down(\"xs\")]: {\n            width: \"70%\",\n        },\n    },\n    roleItem: {\n        paddingLeft: theme.spacing(2),\n    },\n\n});\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    firstLine: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        listStyleType: \"none\",\n        [theme.breakpoints.down(\"sm\")]: {\n            paddingLeft: theme.spacing(2),\n            paddingRight: theme.spacing(2),\n        },\n    },\n    paddingNone: {\n        paddingLeft: 0,\n        paddingBottom: 0,\n    },\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React, {Ref} from \"react\";\nimport {\n    Divider,\n    Grid,\n    IconButton,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport clsx from \"clsx\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport List from \"@material-ui/core/List\";\n\n/**\n * TopicWithButtonPropsStyled - interface for TopicWithButton function\n * @interface\n * @author Nikita Nesterov\n */\ninterface TopicWithButtonProps extends Stylable {\n    children?: string,\n    can?: boolean;\n    color?: string;\n\n    onClick?(): void,\n}\n\n/**\n * TopicWithButton - function that is used in OrganizationPageView component for fast creating topic with AddIcon\n * @function\n * @author Nikita Nesterov\n */\nconst TopicWithButton = React.forwardRef((props: TopicWithButtonProps, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n        children,\n        onClick,\n        can = true,\n        color = \"#FFF\"\n    } = props;\n    return (\n        <Grid container className={classes.firstLine}>\n            <Grid item xs={12} md={10}>\n                <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n                    <ListItem className={classes.paddingNone}>\n                        <ListItemText style={{color: color}} primary={children} primaryTypographyProps={{variant: \"h6\"}}/>\n                        {can &&\n                        <ListItemSecondaryAction>\n                            <IconButton\n                                edge=\"end\"\n                                aria-label=\"delete\"\n                                onClick={onClick}\n                            >\n                                <AddIcon/>\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                        }\n                    </ListItem>\n                    <Divider/>\n                </List>\n            </Grid>\n        </Grid>\n    );\n});\n\n\nexport default withStyles(styles)(TopicWithButton);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    container: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        margin: 0,\n    },\n    listRoot:{\n        padding: theme.spacing(0, 0, 0, 0),\n    }\n\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {Ref} from \"react\";\nimport {Grid, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, withStyles,} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport Plugin from \"../../../../interfaces/Plugin\";\n\n/**\n * PluginComponentPropsStyled - interface for PluginComponent function\n * @interface\n * @author Nikita Nesterov\n */\ninterface PluginComponentProps extends Stylable {\n    plugin: Plugin,\n    can?: boolean,\n\n    invokeDialog(): void,\n\n    setCurrentPlugin(id: number): void,\n}\n\n/**\n * PluginComponent - function that returns one row for plugins list in OrganizationPage\n * @function\n * @author Nikita Nesterov\n */\nconst PluginComponent = React.forwardRef((props: PluginComponentProps, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n        plugin,\n        invokeDialog,\n        setCurrentPlugin,\n        can = true,\n    } = props;\n\n    return (\n        <Grid container spacing={0} className={classes.container}>\n            <Grid item xs={10}>\n                <List className={classes.listRoot}>\n                    <ListItem style={style} className={className} button onClick={() => {\n                        invokeDialog();\n                        setCurrentPlugin(plugin.id);\n                    }}>\n                        <ListItemText primary={plugin.name} secondary={plugin.description}/>\n                        {can &&\n                        <ListItemSecondaryAction>\n                            <IconButton>\n                                <CloseIcon/>\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                        }\n                    </ListItem>\n                </List>\n            </Grid>\n        </Grid>\n    );\n});\n\nexport default withStyles(styles)(PluginComponent);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\n\nimport React, {ReactNode} from \"react\";\nimport Containerable from \"../interfaces/Containerable\";\nimport {Button, Dialog, DialogActions, DialogContentText, DialogTitle} from \"@material-ui/core\";\n\n/**\n * ConfirmFunction - function to show confirm dialog.\n * @author Danil Andreev\n */\nexport type ConfirmFunction = (onAccept: () => Promise<void>, settings: ConfirmSettings) => Promise<void>;\n\nconst ConfirmContext = React.createContext<ConfirmFunction>(async () => {\n});\n\n/**\n * ConfirmProviderProps - interface for ConfirmProvider properties.\n * @interface\n * @author Danil Andreev\n */\nexport interface ConfirmProviderProps extends Containerable {\n    children?: any;\n}\n\n/**\n * ConfirmSettings - settings for confirm dialog.\n * @interface\n * @author Danil Andreev\n */\nexport interface ConfirmSettings {\n    title: ReactNode;\n    text?: ReactNode;\n    accept?: string;\n    dismiss?: string;\n\n    onDismiss?(): Promise<void>;\n}\n\n/**\n * DialogSettings - interface for inner dialog settings.\n * @ignore\n * @interface\n * @author Danil Andreev\n */\ninterface DialogSettings extends ConfirmSettings {\n    onAccept(): Promise<void>;\n}\n\n/**\n * ConfirmProvider - React Provider for confirmation mechanism.\n * @function\n * @author Danil Andreev\n */\nexport const ConfirmProvider = React.forwardRef((props: ConfirmProviderProps, ref: React.Ref<any>) => {\n    const {\n        children\n    } = props;\n\n    const [content, setContent] = React.useState<DialogSettings | null>(null);\n    const [open, setOpen] = React.useState<boolean>(false);\n\n    React.useLayoutEffect(() => {\n        setTimeout(() => {\n            if (!open) setContent(null);\n        }, 100);\n    }, [open]);\n\n    React.useLayoutEffect(() => {\n        if (content) setOpen(true);\n    }, [content]);\n\n    async function confirm(onAccept: () => Promise<void>, settings: ConfirmSettings) {\n        setContent({...settings, onAccept});\n    }\n\n    return (\n        <React.Fragment>\n            <Dialog\n                id=\"confirm-dialog\"\n                aria-labelledby=\"confirm-dialog\"\n                onClose={(event: Event) => setOpen(false)}\n                open={open}\n            >\n                <DialogTitle id=\"confirm-dialog-title\">\n                    {content?.title}\n                </DialogTitle>\n                <DialogContentText>\n                    {content?.text}\n                </DialogContentText>\n                <DialogActions>\n                    <Button\n                        onClick={event => {\n                            content && content.onAccept().then();\n                            setOpen(false);\n                        }}\n                    >\n                        {content?.accept || \"Accept\"}\n                    </Button>\n                    <Button\n                        onClick={event => {\n                            setOpen(false);\n                            content?.onDismiss && content.onDismiss();\n                        }}\n                    >\n                        {content?.dismiss || \"Dismiss\"}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <ConfirmContext.Provider value={confirm}>\n                {children}\n            </ConfirmContext.Provider>\n        </React.Fragment>\n    );\n});\n\n/**\n * useConfirm - react hook for confirm dialog.\n * @function Danil Andreev\n * @author Danil Andreev\n */\nconst useConfirm = (): ConfirmFunction => React.useContext(ConfirmContext);\nexport default useConfirm;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 10.11.2020, 19:22\n * All rights reserved.\n */\n\nimport {createStyles, fade, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    dialog: {\n        maxWidth: 400,\n    },\n    dialogUsers: {\n        width: \"100%\",\n        textAlign: \"center\",\n        paddingBottom: 0,\n        marginTop: theme.spacing(2),\n    },\n    avatarContainer: {\n        display: \"flex\",\n        width: \"100%\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        marginTop: theme.spacing(2),\n    },\n    avatar: {\n        width: 100,\n        height: 100,\n    },\n    notFound: {\n        display: \"flex\",\n        width: \"100%\",\n        height: 250,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    info: {\n        width: \"100%\",\n        textAlign: \"center\",\n        marginTop: 0,\n    },\n    userContainer: {\n        display: \"flex\",\n        height: 300,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    colorBar: {\n        width: 4,\n        height: theme.spacing(7),\n    },\n    menuPaper: {\n        height: 400,\n        width: 346,\n        [theme.breakpoints.down(\"xs\")]: {\n            height: 300,\n            width: 215,\n        },\n    },\n    menuRoleBar: {\n        width: 4,\n        height: theme.spacing(6),\n    },\n    menuHeader: {\n        paddingBottom: 0,\n    },\n    menuListItemText: {\n        paddingLeft: theme.spacing(2),\n        overflowWrap: \"anywhere\",\n    },\n    listItemHeader: {\n        paddingBottom: 0,\n    },\n    dangerZoneContainer: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    dangerZoneButton: {\n        margin: theme.spacing(2),\n        marginBottom: theme.spacing(1),\n    },\n    dangerZoneHeader: {\n        paddingBottom: 0,\n        color: theme.palette.error.dark,\n    },\n    dangerZoneDivider: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    search: {\n        position: \"relative\",\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        \"&:hover\": {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: \"100%\",\n        marginTop: theme.spacing(1),\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: \"100%\",\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    inputRoot: {\n        color: \"inherit\",\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create(\"width\"),\n        width: \"11ch\",\n        [theme.breakpoints.up(\"sm\")]: {\n            width: \"25ch\",\n        },\n    },\n    paddingNoneBottom: {\n        paddingBottom: 0,\n    },\n\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 16.12.2020, 18:57\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport {grey} from \"@material-ui/core/colors\";\n\nconst styles = (theme: Theme) => createStyles({\n    searchInput: {\n        background: grey[700],\n        borderRadius: 4,\n        padding: theme.spacing(0.5, 1)\n    },\n    iconSearch: {\n        \"&:hover\": {\n            color: \"#454545\",\n            cursor: \"pointer\",\n        },\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 16.12.2020, 18:57\n * All rights reserved.\n */\n\nimport React, {ChangeEvent} from \"react\";\nimport {FormControl, InputAdornment, InputBase, withStyles} from \"@material-ui/core\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\ninterface SearchBarProps extends Stylable {\n    onChange?(event: ChangeEvent<HTMLInputElement>): void;\n}\n\nconst SearchBar = React.forwardRef((props: SearchBarProps, ref) => {\n    const {\n        classes,\n        className,\n        style,\n        onChange,\n    } = props;\n\n\n    return (\n        <FormControl style={{width: \"100%\"}}>\n            <InputBase\n                className={classes.searchInput}\n                onChange={onChange}\n                placeholder=\"Search…\"\n                endAdornment={\n                    <InputAdornment position=\"end\">\n                        <CloseIcon\n                            className={classes.iconSearch}\n                        />\n                    </InputAdornment>\n                }\n                startAdornment={<InputAdornment position=\"start\"><SearchIcon/></InputAdornment>}\n            />\n        </FormControl>\n    );\n});\n\nexport default withStyles(styles)(SearchBar);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 10.11.2020, 19:22\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {\n    Avatar,\n    Box,\n    Button,\n    Dialog,\n    Divider,\n    Grid,\n    IconButton,\n    InputBase,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    Popover,\n    Typography,\n    withStyles,\n} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport List from \"@material-ui/core/List\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport useConfirm from \"../../../../hooks/useConfirm\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport UserData from \"../../../../interfaces/UserData\";\nimport Role from \"../../../../interfaces/Role\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport SearchBar from \"../../../../components/SearchBar/SearchBar\";\nimport useAuth from \"../../../../hooks/useAuth\";\n\ninterface DialogUserProps extends Stylable {\n    user: UserData | null;\n    roles: Role[];\n    open: boolean;\n\n    onClose(): void;\n\n    // TODO: what means empty array in function definition?\n    onRemove([]): void;\n\n    onAddRole(roleId: number, user: number | undefined): void;\n\n    onRemoveRole(roleId: number, userId: number | undefined): void;\n}\n\nconst DialogUser = React.forwardRef((props: DialogUserProps, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n        user,\n        roles,\n        open,\n        onClose,\n        onRemove,\n        onAddRole,\n        onRemoveRole,\n    } = props;\n\n\n    const confirm = useConfirm();\n    const {getUser} = useAuth();\n    const loggedUser = getUser();\n\n\n    // const [user, setUser] = useState<UserData | null>(userOrg);\n    const [isAddRoleToUserButtonActive, setIsAddRoleToUserButtonActive] = useState<null | HTMLElement>(null);\n    const [isRemoveRoleFromUserButtonActive, setIsRemoveRoleFromUserButtonActive] = useState<null | HTMLElement>(null);\n    const [filterRoles, setFilterRoles] = useState<Role[]>(roles);\n    const [searchValue, setSearchValue] = useState(\"\");\n    // const [newRoles, setNewRoles] = useState<Role[]>([]);\n\n\n    useEffect(() => {\n        setFilterRoles(roles.filter(role => role.name.toLowerCase().includes(searchValue)));\n    }, [searchValue]);\n\n    useEffect(() => {\n        setFilterRoles(roles);\n    }, [roles]);\n\n    // useEffect(() => {\n    //     setUser(userOrg);\n    // }, [userOrg]);\n\n    function handleSearch(event: React.ChangeEvent<HTMLInputElement>) {\n        setSearchValue(event.target.value.toLowerCase());\n    }\n\n    function handleOpenAddRoleToUserButtonActive(event: any) {\n        setIsAddRoleToUserButtonActive(event.currentTarget);\n    }\n\n    function handleCloseAddRoleToUserButtonActive() {\n        setIsAddRoleToUserButtonActive(null);\n    }\n\n    function handleOpenRemoveRoleFromUserButtonActive(event: any) {\n        setIsRemoveRoleFromUserButtonActive(event.currentTarget);\n    }\n\n    function handleCloseRemoveRoleFromUserButtonActive() {\n        setIsRemoveRoleFromUserButtonActive(null);\n    }\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            fullWidth\n            maxWidth=\"sm\"\n        >\n\n            <Box\n                className={classes.userContainer}\n                style={user?.roles.length ? {background: `linear-gradient(45deg, #${user?.roles[0].color}, #fff 100%)`} : {background: `transparent`}}\n            >\n                <Grid container>\n                    <Grid item xs={12}>\n                        <Box className={classes.avatarContainer}>\n                            <Avatar\n                                className={classes.avatar}\n                                src=\"https://cdn.sportclub.ru/assets/2019-09-20/n97c311rvb.jpg\"\n                            />\n                        </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography variant=\"h6\" className={classes.dialogUsers}>\n                            {user?.username}\n                        </Typography>\n                        <Typography variant=\"body2\" className={classes.info}>\n                            JeyM1@gmail.com\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </Box>\n\n\n            <List>\n                <ListItem className={classes.listItemHeader}>\n                    <ListItemText primaryTypographyProps={{variant: \"h6\"}}>\n                        Roles\n                    </ListItemText>\n                    <ListItemSecondaryAction\n                        onClick={handleOpenAddRoleToUserButtonActive}\n                    >\n                        <IconButton>\n                            <AddIcon/>\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                    <Popover\n                        className={classes.menu}\n                        id=\"simple-menu\"\n                        anchorEl={isAddRoleToUserButtonActive}\n                        keepMounted\n                        open={Boolean(isAddRoleToUserButtonActive)}\n                        onClose={handleCloseAddRoleToUserButtonActive}\n                        anchorOrigin={{\n                            vertical: \"bottom\",\n                            horizontal: \"right\",\n                        }}\n                        transformOrigin={{\n                            vertical: \"top\",\n                            horizontal: \"right\",\n                        }}\n                        classes={{\n                            paper: classes.menuPaper,\n                        }}\n                    >\n                        <ListItem className={classes.menuHeader}>\n                            <ListItemText primaryTypographyProps={{variant: \"h6\"}}>\n                                Add Role to User\n                            </ListItemText>\n                        </ListItem>\n                        <Divider/>\n                        <ListItem>\n                            <SearchBar onChange={handleSearch}/>\n                        </ListItem>\n                        {/*<Box className={classes.search}>*/}\n                        {/*    <Box className={classes.searchIcon}>*/}\n                        {/*        <SearchIcon/>*/}\n                        {/*    </Box>*/}\n                        {/*    <InputBase*/}\n                        {/*        onChange={handleSearch}*/}\n                        {/*        placeholder=\"Search…\"*/}\n                        {/*        classes={{*/}\n                        {/*            root: classes.inputRoot,*/}\n                        {/*            input: classes.inputInput,*/}\n                        {/*        }}*/}\n                        {/*        inputProps={{\"aria-label\": \"search\"}}*/}\n                        {/*    />*/}\n                        {/*    <IconButton>*/}\n                        {/*        <CloseIcon/>*/}\n                        {/*    </IconButton>*/}\n                        {/*</Box>*/}\n                        {filterRoles.length !== 0 ? filterRoles.map(role => {\n\n                                return (\n                                    <ListItem\n                                        button\n                                        key={role.id}\n                                        onClick={() => onAddRole(role.id, user?.id)}\n                                    >\n                                        <ListItemText\n                                            className={classes.menuListItemText}\n                                            style={role.color ? {borderLeft: `4px solid #${role.color}`} : {borderLeft: 0}}\n                                            primary={role.name}\n                                            secondary={role.description}\n                                        />\n                                    </ListItem>\n                                );\n                            }) :\n                            <Box className={classes.notFound}>\n                                <Typography variant=\"h5\" color=\"textSecondary\">\n                                    No roles found\n                                </Typography>\n                            </Box>\n                        }\n                    </Popover>\n                </ListItem>\n                <Divider/>\n\n                {user?.roles.map((role) => {\n                    return (\n                        <ListItem>\n                            <ListItemAvatar style={{minWidth: 16}}>\n                                <Box className={classes.colorBar}\n                                     style={role.color ? {backgroundColor: `#${role.color}`} : {backgroundColor: `transparent`}}/>\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={role.name}\n                                secondary={role.description}\n                            />\n                            <ListItemSecondaryAction\n                                onClick={() => onRemoveRole(role.id, user?.id)}\n                            >\n                                <IconButton>\n                                    <DeleteIcon/>\n                                </IconButton>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    );\n                })}\n\n                <Divider/>\n\n                <ListItem className={classes.dangerZoneHeader}>\n                    <ListItemText primaryTypographyProps={{variant: \"h6\"}}>\n                        Danger Zone\n                    </ListItemText>\n                </ListItem>\n                <Divider className={classes.dangerZoneDivider}/>\n\n                <Box className={classes.dangerZoneContainer}>\n                    <Button\n                        className={classes.dangerZoneButton}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={() => confirm(async () => onRemove([user?.id]), {title: `are you sure you want to remove user: ${user?.username} ?`})}\n\n                    >\n                        {loggedUser?.id === user?.id ? \"Leave from Organization\" : \"Remove User from Organization\"}\n                    </Button>\n                </Box>\n\n            </List>\n        </Dialog>\n    );\n});\n\nexport default withStyles(styles)(DialogUser);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, fade, Theme} from \"@material-ui/core\";\nimport {grey} from \"@material-ui/core/colors\";\n\nconst styles = (theme: Theme) => createStyles({\n    dialog: {\n        minWidth: 500,\n        [theme.breakpoints.down(\"xs\")]: {\n            minWidth: 300,\n        },\n        height: 512,\n        overflow:\"auto\",\n    },\n    search: {\n        position: \"relative\",\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        \"&:hover\": {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: \"100%\",\n    },\n    searchBar:{\n        padding:theme.spacing(1,1.5,0,1.5)\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: \"100%\",\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    inputRoot: {\n        color: \"inherit\",\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create(\"width\"),\n        width: \"100%\",\n        [theme.breakpoints.up(\"sm\")]: {\n            width: \"40ch\",\n        },\n    },\n    paddingNoneBottom: {\n        paddingBottom: 0,\n    },\n    searchInput: {\n        background: grey[700],\n        borderRadius: 4,\n        padding: theme.spacing(0.5, 1)\n    },\n    iconSearch: {\n        \"&:hover\": {\n            color: \"#454545\",\n            cursor: \"pointer\",\n        },\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {\n    Avatar, Box,\n    Button,\n    Checkbox,\n    Dialog,\n    DialogTitle, FilledInput, FormControl,\n    IconButton, Input, InputAdornment,\n    InputBase,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText, TextField,\n    withStyles,\n} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport List from \"@material-ui/core/List\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport UserData from \"../../../../interfaces/UserData\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport SearchBar from \"../../../../components/SearchBar\";\n\ninterface DialogAddUsersProps extends Stylable {\n    open: boolean;\n    allUsers?: UserData[] | null;\n    newUsers: number[];\n    availableUsers: UserData[];\n    orgCreation?: boolean;\n\n    onClose(): void;\n\n    onNewUserClick(userId: number): void;\n\n    onAdduser(usersIds: number[]): void;\n}\n\nconst DialogAddUsers = React.forwardRef((props: DialogAddUsersProps, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n        open,\n        allUsers,\n        newUsers,\n        onClose,\n        onNewUserClick,\n        onAdduser,\n        availableUsers,\n    } = props;\n\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n        >\n            <DialogTitle className={classes.paddingNoneBottom}>\n                Choose users to add\n            </DialogTitle>\n            <Box className={classes.searchBar}>\n                <SearchBar/>\n            </Box>\n            <List className={classes.dialog}>\n                {availableUsers.map((user) => (\n                    <ListItem\n                        button\n                        key={user.id}\n                        onClick={() => onNewUserClick(user.id)}\n                    >\n                        <ListItemAvatar>\n                            <Avatar/>\n                        </ListItemAvatar>\n                        <ListItemText primary={user.username} secondary=\"department\"/>\n                        <Checkbox\n                            checked={newUsers.includes(user.id)}\n                            color=\"primary\"\n                            disableFocusRipple\n                            disableTouchRipple\n                            disableRipple\n                            style={{backgroundColor: \"transparent\"}}\n                            inputProps={{\"aria-label\": \"secondary checkbox\"}}\n                        />\n                    </ListItem>\n                ))}\n            </List>\n            <Button fullWidth onClick={() => onAdduser(newUsers)}>Add new users</Button>\n        </Dialog>\n    );\n});\n\nexport default withStyles(styles)(DialogAddUsers);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport {yellow} from \"@material-ui/core/colors\";\n\nconst styles = (theme: Theme) => createStyles({\n    firstLine: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        listStyleType: \"none\",\n    },\n    dialogRoles: {\n        width: \"100%\",\n        textAlign: \"center\",\n        paddingBottom: theme.spacing(2),\n    },\n    gridPadding: {\n        marginBottom: theme.spacing(1),\n    },\n    paddingNone: {\n        paddingLeft: 0,\n        paddingBottom: 0,\n    },\n    newRole: {\n        [theme.breakpoints.down(\"xs\")]: {\n            maxWidth: 375,\n        },\n    },\n    makeDefaultButton:{\n        backgroundColor: yellow[700],\n        \"&:hover\": {\n            backgroundColor: yellow[600]\n        }\n    },\n    disabledButton:{\n        backgroundColor:yellow[900],\n    }\n\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nconst styles = (theme: Theme) => createStyles({\n    container: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        width: \"100%\",\n        padding: theme.spacing(1),\n    },\n    defaultContainer: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n    },\n    color: {\n        width: 30,\n        height: 30,\n        borderRadius: 5,\n        marginRight: 3,\n        marginLeft: 3,\n        marginBottom: 6,\n        padding: 0,\n    },\n    inputContainer: {\n        display: \"flex\",\n        flexDirection: \"row\",\n    },\n    paddingLeft: {\n        paddingLeft: theme.spacing(1),\n        width: \"100%\",\n    },\n    inputAdornment: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: 30,\n        height: 30,\n        background: grey[200],\n        borderRadius: \"4px 0px 0px 4px\",\n        textAlign: \"center\",\n        color: grey[600],\n    },\n    input: {\n        maxWidth: 110,\n        [theme.breakpoints.down(\"xs\")]: {\n            maxWidth: \"100%\",\n            minWidth: \"80%\",\n            width: \"90%\",\n        },\n        height: 30,\n        padding: 0,\n        color: grey[700],\n        border: `1px solid ${grey[200]}`,\n        borderRadius: \"0px 4px 4px 0px\",\n    },\n    insideInput: {\n        marginLeft: 5,\n    },\n\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {useEffect, useState} from \"react\";\nimport {Box, InputBase, List, ListItem, useMediaQuery, useTheme, withStyles} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport clsx from \"clsx\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport {grey, red} from \"@material-ui/core/colors\";\n\n\ninterface ColorPickerProps extends Stylable {\n    color?: string;\n\n    onChange?(color: string): void;\n\n    handleGetInvalidColor?(color: string): void;\n}\n\nconst ColorPicker = React.forwardRef((props: ColorPickerProps, ref: React.Ref<any>) => {\n    const {\n        classes,\n        className,\n        onChange,\n        color: inputColor,\n        handleGetInvalidColor,\n    } = props;\n\n    const theme = useTheme();\n    const defaultColors = [\"FF6900\", \"FCB900\", \"00D084\", \"8ED1FC\", \"0693E3\", \"ABB8C3\", \"EB144C\", \"F78DA7\", \"9900EF\"];\n    const [color, setColor] = useState(inputColor || \"FFF\");\n    const [error, setError] = useState(false);\n\n    console.log(color);\n\n    useEffect(() => {\n        if(inputColor && isValidHex(inputColor)) {\n            setColor(inputColor);\n        } else {\n            setColor(\"f44336\");\n        }\n    }, [inputColor]);\n\n    function handleChangeColor(newColor: string, id: number) {\n        !inputColor && setColor(newColor);\n        setError(false);\n        onChange && onChange(newColor);\n    }\n\n    function handleChangeColorInput(event: React.ChangeEvent<HTMLInputElement>) {\n        !inputColor && setColor(event.target.value);\n        onChange && onChange(event.target.value);\n        if(isValidHex(\"#\" + event.target.value)) {\n            handleGetInvalidColor && handleGetInvalidColor(\"FFF\");\n        } else {\n            handleGetInvalidColor && handleGetInvalidColor(\"f44336\");\n        }\n\n    }\n\n    function isValidHex(color: string) {\n        if (!color) return false;\n\n        if (color.substring(0, 1) === \"#\") color = color.substring(1);\n\n        switch (color.length) {\n            case 3:\n                return /^[0-9A-F]{3}$/i.test(color);\n            // case 4:\n            //     return /^[0-9A-F]{4}$/i.test(color);\n            case 6:\n                return /^[0-9A-F]{6}$/i.test(color);\n            case 8:\n                return /^[0-9A-F]{8}$/i.test(color);\n            default:\n                return false;\n        }\n    }\n\n    function handleCheckError(event: React.FocusEvent<HTMLInputElement>) {\n        let color = `#${event.target.value}`;\n        if (isValidHex(color)) {\n            setError(false);\n        } else {\n            setError(true);\n        }\n    }\n\n    const matches = useMediaQuery(theme.breakpoints.up(\"sm\"));\n    let width;\n    if (matches) {\n        width = \"auto\";\n    } else {\n        width = \"100%\";\n    }\n\n    return (\n        <List className={clsx(classes.container, className)}>\n            <Box className={classes.defaultContainer}>\n                {defaultColors.map((defaultColor, key) => {\n                    return (\n                        <ListItem\n                            key={key}\n                            button\n                            className={classes.color}\n                            style={color === defaultColor ? {\n                                    background: `#${defaultColor}`,\n                                    boxShadow: `#${defaultColor} 0px 0px 8px`\n                                } :\n                                {background: `#${defaultColor}`}\n                            }\n                            onClick={() => handleChangeColor(defaultColor, key)}\n                        />\n\n                    );\n                })}\n            </Box>\n            <Box className={classes.inputContainer} style={{width: width}}>\n                <Box\n                    className={classes.inputAdornment}\n                    style={{\n                        background: `#${color || \"FFF\"}`, border: `1px solid #${color || \"FFF\"}`,\n                        color: theme.palette.getContrastText(`#${color || \"FFF\"}`)\n                    }}\n                >\n                    #\n                </Box>\n                <InputBase\n                    onChange={handleChangeColorInput}\n                    className={classes.input}\n                    value={inputColor}\n                    classes={{\n                        input: classes.paddingLeft,\n                    }}\n                    inputProps={{\n                        maxLength: 6,\n                    }}\n                    onBlur={handleCheckError}\n                    style={error ? {border: `2px solid ${red[600]}`} : {border: `1px solid ${grey[200]}`}}\n                />\n            </Box>\n\n        </List>\n    );\n});\n\nexport default withStyles(styles)(ColorPicker);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 16.12.2020, 20:21\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme)=> createStyles({\n    paddingNone: {\n        paddingLeft: 0,\n        paddingBottom: 0,\n    },\n    scroll: {\n        height: 256,\n        overflow: \"auto\",\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 16.12.2020, 20:20\n * All rights reserved.\n */\n\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport React, {Ref} from \"react\";\nimport styles from \"./styles\";\nimport {Grid, List, ListItem, ListItemSecondaryAction, ListItemText, Switch, withStyles} from \"@material-ui/core\";\nimport DemoRole from \"../../../../interfaces/DemoRole\";\n\ninterface RoleTogglesProps extends Stylable {\n    handleSwitch(event: React.ChangeEvent<HTMLInputElement>): void;\n\n    addRole: DemoRole;\n}\n\nconst RoleToggles = React.forwardRef((props: RoleTogglesProps, ref: Ref<any>) => {\n    const {\n        style,\n        classes,\n        className,\n        handleSwitch,\n        addRole,\n    } = props;\n\n    return (\n        <Grid item xs={12}>\n            <List className={classes.scroll}>\n                <ListItem className={classes.paddingNone}>\n                    <ListItemText primary=\"User manager\" secondary=\"Can manage users\"/>\n                    <ListItemSecondaryAction>\n                        <Switch\n                            checked={addRole.canManageUsers}\n                            onChange={handleSwitch}\n                            name=\"canManageUsers\"\n                            inputProps={{\"aria-label\": \"secondary checkbox\"}}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n\n                <ListItem className={classes.paddingNone}>\n                    <ListItemText primary=\"Jobs creator\" secondary=\"Can create jobs\"/>\n                    <ListItemSecondaryAction>\n                        <Switch\n                            checked={addRole.canCreateJobs}\n                            onChange={handleSwitch}\n                            name=\"canCreateJobs\"\n                            inputProps={{\"aria-label\": \"secondary checkbox\"}}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n\n                <ListItem className={classes.paddingNone}>\n                    <ListItemText primary=\"Jobs editor\" secondary=\"Can edit jobs\"/>\n                    <ListItemSecondaryAction>\n                        <Switch\n                            checked={addRole.canEditJobs}\n                            onChange={handleSwitch}\n                            name=\"canEditJobs\"\n                            inputProps={{\"aria-label\": \"secondary checkbox\"}}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n\n                <ListItem className={classes.paddingNone}>\n                    <ListItemText primary=\"Jobs delete\" secondary=\"Can delete jobs\"/>\n                    <ListItemSecondaryAction>\n                        <Switch\n                            checked={addRole.canDeleteJobs}\n                            onChange={handleSwitch}\n                            name=\"canDeleteJobs\"\n                            inputProps={{\"aria-label\": \"secondary checkbox\"}}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n\n                <ListItem className={classes.paddingNone}>\n                    <ListItemText primary=\"Roles manager\" secondary=\"Can manage roles\"/>\n                    <ListItemSecondaryAction>\n                        <Switch\n                            checked={addRole.canManageRoles}\n                            onChange={handleSwitch}\n                            name=\"canManageRoles\"\n                            inputProps={{\"aria-label\": \"secondary checkbox\"}}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n\n                <ListItem className={classes.paddingNone}>\n                    <ListItemText primary=\"Plugin manager\" secondary=\"Can manage plugins\"/>\n                    <ListItemSecondaryAction>\n                        <Switch\n                            checked={addRole.canManagePlugins}\n                            onChange={handleSwitch}\n                            name=\"canManagePlugins\"\n                            inputProps={{\"aria-label\": \"secondary checkbox\"}}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n\n                <ListItem className={classes.paddingNone}>\n                    <ListItemText primary=\"Team manager\" secondary=\"Can manage teams\"/>\n                    <ListItemSecondaryAction>\n                        <Switch\n                            checked={addRole.canManageTeams}\n                            onChange={handleSwitch}\n                            name=\"canManageTeams\"\n                            inputProps={{\"aria-label\": \"secondary checkbox\"}}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n\n                <ListItem className={classes.paddingNone}>\n                    <ListItemText primary=\"Audit editor\" secondary=\"Can edit audit\"/>\n                    <ListItemSecondaryAction>\n                        <Switch\n                            checked={addRole.canEditAudit}\n                            onChange={handleSwitch}\n                            name=\"canEditAudit\"\n                            inputProps={{\"aria-label\": \"secondary checkbox\"}}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </List>\n        </Grid>\n    );\n});\n\nexport default withStyles(styles)(RoleToggles);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 13.11.2020, 19:45\n * All rights reserved.\n */\n\n/**\n * Generator for ids\n * @function\n * @generator\n */\nexport default function* IdGenerator() {\n    let id = 0;\n    while (true) {\n        id++;\n        yield id;\n    }\n    return id;\n}\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useRef, useState} from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogTitle,\n    Divider,\n    Grid,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    Switch,\n    useTheme,\n    withStyles,\n} from \"@material-ui/core\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ColorPicker from \"../../../../components/ColorPicker\";\nimport Role from \"../../../../interfaces/Role\";\nimport RoleToggles from \"../RoleToggles\";\nimport useEnqueueErrorSnackbar from \"../../../../utils/enqueueErrorSnackbar\";\nimport DemoRole from \"../../../../interfaces/DemoRole\";\nimport IdGenerator from \"../../../../utils/IdGenerator\";\n\ninterface DialogAddRolesProps extends Stylable {\n    open: boolean;\n    role?: Role | DemoRole;\n    modify?: boolean;\n    isDefault?: boolean;\n\n    onClose(): void;\n\n    onExited?(): void;\n\n    onAddRole(role: any, errors: any): void;\n\n    onModifyRole?(roleId: number | undefined, roleToModify: any, isDefault: boolean): void;\n}\n\ninterface ValidationErrors {\n    \"noInputError\": boolean;\n    \"nameError\": boolean;\n    \"descriptionError\": boolean;\n    \"permissionLevelError\": boolean;\n}\n\nconst DialogAddRoles = React.forwardRef((props: DialogAddRolesProps, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n        modify,\n        role,\n        open,\n        onClose,\n        onAddRole,\n        onModifyRole,\n        isDefault,\n        onExited,\n    } = props;\n\n    let counterId = 0;\n    const idGenerator = React.useRef(IdGenerator());\n    if (open) {\n        const getNextId = (): number => idGenerator.current.next().value;\n        counterId = getNextId();\n    }\n\n    const [willBeDefault, setWillBeDefault] = useState<boolean>(isDefault || false);\n\n\n    const [invalidColor, setInvalidColor] = useState(\"\");\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const theme = useTheme();\n    const [addRole, setAddRole] = useState<DemoRole | Role>({\n        id: role?.id || counterId,\n        name: role?.name || \"\",\n        description: role?.description || \"\",\n        color: role?.color || \"FFF\",\n        permissionLevel: role?.permissionLevel || 1,\n        canManageUsers: role?.canManageUsers || false,\n        canCreateJobs: role?.canCreateJobs || false,\n        canEditJobs: role?.canEditJobs || false,\n        canDeleteJobs: role?.canDeleteJobs || false,\n        canManageRoles: role?.canManageRoles || false,\n        canManagePlugins: role?.canManagePlugins || false,\n        canManageTeams: role?.canManageTeams || false,\n        canEditAudit: role?.canEditAudit || false,\n    });\n\n\n    const [errors, setErrors] = useState<ValidationErrors>({\n        noInputError: false,\n        nameError: false,\n        descriptionError: false,\n        permissionLevelError: false,\n    });\n\n    useEffect(() => {\n        role && setAddRole({\n            id: role.id,\n            name: role.name,\n            description: role?.description,\n            color: role.color,\n            permissionLevel: role.permissionLevel,\n            canManageUsers: role.canManageUsers,\n            canCreateJobs: role.canCreateJobs,\n            canEditJobs: role.canEditJobs,\n            canDeleteJobs: role.canDeleteJobs,\n            canManageRoles: role.canManageRoles,\n            canManagePlugins: role.canManagePlugins,\n            canManageTeams: role.canManageTeams,\n            canEditAudit: role.canEditAudit,\n        });\n    }, [role]);\n\n    // console.log(\"defaultRoleId\", defaultIdLocal);\n\n    const handleSwitch = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setAddRole((prev) => (\n            {...prev, [event.target.name]: event.target.checked}\n        ));\n    };\n\n    const handleInputRole = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.persist();\n        if (name === \"permissionLevel\") {\n            setAddRole(prev => (prev && {...prev, [name]: +event.target.value}));\n            return;\n        }\n        setAddRole(prev => (prev && {...prev, [name]: event.target.value}));\n    };\n\n    function handleGetColor(inputColor: string) {\n        setAddRole((prev) => (prev && {...prev, color: inputColor}));\n    }\n\n    function handleGetInvalidColor(inputColor: string) {\n        console.log(\"###########\", inputColor);\n        setInvalidColor(inputColor);\n    }\n\n    console.log(\"Invalid\", invalidColor);\n\n    const handleValidation = (event: React.FocusEvent<HTMLInputElement>) => {\n        setErrors(prev => ({\n            ...prev, \"noInputError\": false\n        }));\n        if (event.target.name === \"name\") {\n            //TODO every language exept special symbols\n            if (addRole.name.match(/[^A-Za-z0-9_ ]/) || !addRole.name || addRole.name.length < 3 || addRole.name.length > 50) {\n                setErrors(prev => ({\n                    ...prev, \"nameError\": true\n                }));\n\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"nameError\": false\n                }));\n            }\n        }\n        if (event.target.name === \"description\") {\n            if (!addRole.description || addRole.name.length > 500) {\n                setErrors(prev => ({\n                    ...prev, \"descriptionError\": true\n                }));\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"descriptionError\": false\n                }));\n            }\n        }\n        if (event.target.name === \"permissionLevel\") {\n            if (!addRole.permissionLevel || addRole.permissionLevel < 0 || addRole.permissionLevel > 1000) {\n                setErrors(prev => ({\n                    ...prev, \"permissionLevelError\": true\n                }));\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"permissionLevelError\": false\n                }));\n            }\n        }\n    };\n\n    function handleClick() {\n        if (!errors.noInputError && !errors.nameError && !errors.descriptionError && !errors.permissionLevelError && invalidColor !== \"f44336\") {\n            modify ? onModifyRole && onModifyRole(role?.id, addRole, willBeDefault) : onAddRole(addRole, errors);\n            handleOnClose();\n        } else {\n            enqueueErrorSnackbar(\"Invalid input\");\n        }\n    }\n\n    function handleOnClose() {\n        onClose();\n        setErrors({\n            \"noInputError\": false,\n            \"nameError\": false,\n            \"descriptionError\": false,\n            \"permissionLevelError\": false,\n        });\n        setWillBeDefault(false);\n    }\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleOnClose}\n            onExited={() => {\n                onExited && onExited();\n                setAddRole({\n                    id: counterId,\n                    name: \"\",\n                    description: \"\",\n                    color: \"fff\",\n                    permissionLevel: 1,\n                    canManageUsers: false,\n                    canCreateJobs: false,\n                    canEditJobs: false,\n                    canDeleteJobs: false,\n                    canManageRoles: false,\n                    canManagePlugins: false,\n                    canManageTeams: false,\n                    canEditAudit: false,\n                });\n            }}\n        >\n            <DialogTitle\n                className={classes.dialogRoles}\n                style={{background: `#${invalidColor !== \"f44336\" ? (addRole.color || \"FFF\") : invalidColor}`,\n                    color: theme.palette.getContrastText(`#${invalidColor !== \"f44336\" ? (addRole.color || \"FFF\") : invalidColor}`)}}\n            >\n                {modify ? \"Modify role\" : \"Add new role\"}\n            </DialogTitle>\n            <Divider/>\n            <ListItem className={classes.newRole}>\n                <Grid container>\n                    <Grid item xs={12} className={classes.gridPadding}>\n                        <TextField\n                            error={errors.nameError}\n                            variant=\"standard\"\n                            required\n                            fullWidth\n                            name=\"name\"\n                            label=\"Name\"\n                            value={addRole?.name}\n                            onChange={handleInputRole(\"name\")}\n                            onBlur={handleValidation}\n                        />\n                    </Grid>\n                    <Grid item xs={12} className={classes.gridPadding}>\n                        <TextField\n                            error={errors.descriptionError}\n                            variant=\"standard\"\n                            fullWidth\n                            multiline\n                            rowsMax={5}\n                            name=\"description\"\n                            label=\"Description\"\n                            value={addRole?.description}\n                            onChange={handleInputRole(\"description\")}\n                            onBlur={handleValidation}\n                        />\n                    </Grid>\n                    <Grid item xs={12} className={classes.gridPadding}>\n                        <TextField\n                            error={errors.permissionLevelError}\n                            type=\"number\"\n                            variant=\"standard\"\n                            required\n                            fullWidth\n                            name=\"permissionLevel\"\n                            label=\"Permission Level\"\n                            value={addRole?.permissionLevel}\n                            onChange={handleInputRole(\"permissionLevel\")}\n                            onBlur={handleValidation}\n                        />\n                    </Grid>\n                    {modify &&\n                    <Button\n                        fullWidth\n                        onClick={() => {\n                            setWillBeDefault(true);\n                        }}\n                        className={classes.makeDefaultButton}\n                        disabled={isDefault || willBeDefault}\n                        classes={{disabled: classes.disabledButton}}\n                    >\n                        Mark as default\n                    </Button>\n                    }\n                    <Grid item xs={12} className={classes.gridPadding}>\n                        <ColorPicker\n                            onChange={handleGetColor}\n                            color={addRole.color}\n                            handleGetInvalidColor={handleGetInvalidColor}\n                        />\n                    </Grid>\n                    <Grid container className={classes.firstLine}>\n                        <RoleToggles addRole={addRole} handleSwitch={handleSwitch}/>\n                    </Grid>\n                    <Button\n                        fullWidth\n                        onClick={handleClick}\n                    >\n                        Accept\n                    </Button>\n                </Grid>\n            </ListItem>\n        </Dialog>\n    );\n});\n\nexport default withStyles(styles)(DialogAddRoles);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 03.12.2020, 1:49\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport {grey, orange} from \"@material-ui/core/colors\";\n\nconst styles = (theme: Theme) => createStyles({\n    pluginDialogTitle: {\n        width: \"100%\",\n        textAlign: \"center\",\n    },\n    maxDialogWidth: {\n        width: 900,\n    },\n    descriptionPadding: {\n        padding: theme.spacing(0, 2, 0, 2),\n    },\n    descriptionListItem:{\n        paddingBottom: theme.spacing(0),\n    },\n    mainBox:{\n        display:\"flex\",\n    },\n    boxWithInfo:{\n        width:320,\n        // borderRight: `1px solid ${grey[400]}`,\n        marginRight:20,\n        margin: theme.spacing(1, 0, 1, 0)\n    },\n    readmeBox:{\n        width: 550,\n        borderLeft: `1px solid ${grey[700]}`,\n        margin: theme.spacing(1, 0, 1, 0),\n        marginRight:10,\n    },\n    readme:{\n        height: 400,\n        overflow: \"auto\",\n        margin: theme.spacing(1, 1.5, 1, 2),\n        // marginLeft: 12,\n    },\n    descriptionOverflow: {\n        width: 300,\n    },\n    noReadme:{\n        display: \"flex\",\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        alignItems:\"center\",\n    },\n    settingSpecList:{\n        height: 480,\n        overflow: \"auto\"\n    }\n\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport {createMuiTheme} from \"@material-ui/core/styles\";\nimport {blueGrey, grey, lightBlue} from \"@material-ui/core/colors\";\n\ndeclare module \"@material-ui/core/styles/createPalette\" {\n    interface Palette {\n        header: Palette[\"primary\"];\n        baseColors: Palette[\"primary\"];\n        baseLightColors: Palette[\"primary\"];\n        baseDarkColors: Palette[\"primary\"];\n    }\n\n    interface PaletteOptions {\n        header: PaletteOptions[\"primary\"];\n        baseColors: PaletteOptions[\"primary\"];\n        baseLightColors: PaletteOptions[\"primary\"];\n        baseDarkColors: PaletteOptions[\"primary\"];\n    }\n}\n\nexport default createMuiTheme({\n    palette: {\n        type: \"dark\",\n        header: {\n            main: blueGrey[600],\n            dark: grey[900],\n            light: blueGrey[300],\n        },\n        baseLightColors: {\n            main: grey[200],\n            dark: grey[300],\n            light: grey[100],\n        },\n        baseColors: {\n            main: grey[500],\n            dark: grey[600],\n            light: grey[400],\n        },\n        baseDarkColors: {\n            main: grey[800],\n            dark: grey[900],\n            light: grey[700],\n        },\n        primary: {\n            main: lightBlue[400],\n        }\n    },\n});","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 03.12.2020, 1:49\n * All rights reserved.\n */\n\nimport React, {Ref, useState} from \"react\";\nimport {\n    AppBar, Avatar,\n    Box,\n    Button,\n    Dialog,\n    DialogTitle,\n    Divider,\n    Grid, List, ListItem, ListItemAvatar, ListItemSecondaryAction, ListItemText, Tab, Tabs,\n    TextField,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport clsx from \"clsx\";\nimport styles from \"./styles\";\nimport PluginFull from \"../../../../interfaces/PluginFull\";\nimport {orange} from \"@material-ui/core/colors\";\nimport Markdown from \"markdown-to-jsx\";\nimport TextFieldsIcon from \"@material-ui/icons/TextFields\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport Filter1Icon from \"@material-ui/icons/Filter1\";\nimport FolderIcon from \"@material-ui/icons/Folder\";\nimport theme from \"../../../../theme\";\n\ninterface DialogPluginInfoProps extends Stylable {\n    currentPlugin: PluginFull,\n    open: boolean,\n\n    onClose(): void,\n}\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nconst DialogPluginInfo = React.forwardRef((props: DialogPluginInfoProps, ref: Ref<any>) => {\n    const {\n        style,\n        classes,\n        className,\n        open,\n        currentPlugin,\n        onClose,\n    } = props;\n\n    const readMe: string[] | undefined = currentPlugin.readme?.split(\"\\n\");\n\n    function TabPanel(props: TabPanelProps) {\n        const {children, value, index, ...other} = props;\n\n        console.log(currentPlugin);\n\n        return (\n            <div\n                role=\"tabpanel\"\n                hidden={value !== index}\n                id={`full-width-tabpanel-${index}`}\n                aria-labelledby={`full-width-tab-${index}`}\n                {...other}\n            >\n                {value === index && (\n                    <Box>\n                        <Typography>{children}</Typography>\n                    </Box>\n                )}\n            </div>\n        );\n    }\n\n    function a11yProps(index: any) {\n        return {\n            id: `full-width-tab-${index}`,\n            \"aria-controls\": `full-width-tabpanel-${index}`,\n        };\n    }\n\n    const [value, setValue] = React.useState<number>(0);\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            maxWidth={false}\n        >\n            <DialogTitle className={classes.pluginDialogTitle}>\n                {currentPlugin.name}\n            </DialogTitle>\n            <Divider/>\n\n            <Tabs\n                value={value}\n                onChange={handleChange}\n                indicatorColor=\"primary\"\n                className={classes.tabsColor}\n                variant=\"fullWidth\">\n                <Tab label=\"Info\" {...a11yProps(0)}/>\n                <Tab label=\"Settings Spec\" {...a11yProps(1)}/>\n            </Tabs>\n\n            <TabPanel value={value} index={0}>\n                <Box className={classes.mainBox}>\n\n                    <Box className={classes.boxWithInfo}>\n                        <List style={{paddingTop: 0}}>\n                            <ListItem className={classes.descriptionListItem} style={{paddingTop: 0}}>\n                                <ListItemText\n                                    primary=\"Version\"\n                                    secondary={currentPlugin.version}\n                                    secondaryTypographyProps={{variant: \"body2\"}}\n                                />\n                            </ListItem>\n                            {currentPlugin.description &&\n                            <React.Fragment>\n                                <ListItem className={classes.descriptionListItem}>\n                                    <ListItemText\n                                        primary=\"Description\"\n                                    />\n                                </ListItem>\n                                <Box className={clsx(classes.maxDialogWidth, classes.descriptionPadding)}>\n                                    <Typography\n                                        align=\"justify\"\n                                        variant=\"body2\"\n                                        color=\"textSecondary\"\n                                        className={classes.descriptionOverflow}\n                                    >\n                                        {currentPlugin.description}\n                                    </Typography>\n                                </Box>\n                            </React.Fragment>\n                            }\n                            {currentPlugin.note &&\n                            <React.Fragment>\n                                <ListItem className={classes.descriptionListItem}>\n                                    <ListItemText\n                                        primary=\"Note\"\n                                    />\n                                </ListItem>\n                                <Box className={clsx(classes.maxDialogWidth, classes.descriptionPadding)}>\n                                    <Typography\n                                        align=\"justify\"\n                                        variant=\"body2\"\n                                        color=\"textSecondary\"\n                                        className={classes.descriptionOverflow}\n                                    >\n                                        {currentPlugin.note}\n                                    </Typography>\n                                </Box>\n                            </React.Fragment>\n                            }\n                        </List>\n                    </Box>\n\n                    <Box className={classes.readmeBox}>\n                        <Typography\n                            variant=\"h5\"\n                            align={\"center\"}\n                            style={{padding: theme.spacing(1, 0, 1, 0)}}\n                        >\n                            README\n                        </Typography>\n                        <Divider/>\n                        {currentPlugin.readme ?\n                            <Box className={classes.readme}>\n                                {readMe?.map((str) =>\n                                    <Markdown>\n                                        {str}\n                                    </Markdown>\n                                )}\n                            </Box>\n                            :\n                            <Box className={clsx(classes.readme, classes.noReadme)}>\n                                No ReadMe were provided\n                            </Box>\n                        }\n                    </Box>\n\n                </Box>\n            </TabPanel>\n\n            <TabPanel value={value} index={1}>\n                <List className={clsx(classes.maxDialogWidth, classes.settingSpecList)}>\n                    {currentPlugin.rules.map((item) =>\n                        <ListItem>\n                            <ListItemAvatar>\n                                <Avatar>\n                                    {item.getType() === \"string\" &&\n                                    <TextFieldsIcon/>\n                                    }\n                                    {item.getType() === \"separator\" &&\n                                    <RemoveIcon/>\n                                    }\n                                    {item.getType() === \"boolean\" &&\n                                    <CheckIcon/>\n                                    }\n                                    {(item.getType() === \"integer\" || item.getType() === \"float\") &&\n                                    <Filter1Icon/>\n                                    }\n                                    {item.getType() === \"folder\" &&\n                                    <FolderIcon/>\n                                    }\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText primary={item.name} secondary={item.getType()}/>\n                        </ListItem>\n                    )}\n                </List>\n            </TabPanel>\n            <Button fullWidth onClick={onClose}>Close</Button>\n        </Dialog>\n    );\n});\n\nexport default withStyles(styles)(DialogPluginInfo);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 08.12.2020, 18:08\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    pluginDialogTitle: {\n        width: \"100%\",\n        textAlign: \"center\",\n    },\n    root: {\n        backgroundColor: theme.palette.background.paper,\n        width: 800,\n        minHeight: 600,\n    },\n    paddingNone: {\n        padding: 0,\n    },\n    field: {\n        paddingBottom: theme.spacing(2),\n    }\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 08.12.2020, 18:08\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogTitle,\n    Divider, Grid,\n    IconButton,\n    List,\n    ListItem,\n    ListItemSecondaryAction, TextField,\n    withStyles\n} from \"@material-ui/core\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport {useTheme} from \"@material-ui/core/styles\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport clsx from \"clsx\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\ninterface DialogSlaveProps extends Stylable {\n    open: boolean,\n\n    onClose(): void,\n}\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    dir?: string;\n    index: any;\n    value: any;\n}\n\ninterface SlaveEnvType {\n    [key: string]: string;\n}\n\ninterface SlaveEnvArrayType {\n    key: string;\n    value: string;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nfunction a11yProps(index: any) {\n    return {\n        id: `full-width-tab-${index}`,\n        \"aria-controls\": `full-width-tabpanel-${index}`,\n    };\n}\n\n\nconst DialogSlave = React.forwardRef((props: DialogSlaveProps, ref: Ref<any>) => {\n    const {\n        style,\n        classes,\n        className,\n        open,\n        onClose,\n    } = props;\n\n\n    const theme = useTheme();\n\n\n    const [slaveEnv, setSlaveEnv] = useState<SlaveEnvType>({name: \"name\", version: \"version\"});\n    const [slaveEnvArray, setSlaveEnvArray] = useState<SlaveEnvType[]>([]);\n    const [prevSlaveEnvArray, setPrevSlaveEnvArray] = useState<SlaveEnvType[]>([]);\n    const [value, setValue] = useState(0);\n    const [editable, setEditable] = useState(false);\n\n    useEffect(() => {\n        let array = Object.entries(slaveEnv);\n        let array2: any[] = [];\n        array.forEach(([key, value]) => {\n            array2.push({key: key, value: value});\n        });\n        setSlaveEnvArray(array2);\n\n    }, [open]);\n\n    const handleChangeSlaveEnv = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number) => {\n        event.persist();\n        let array = [...slaveEnvArray];\n        array.map((field, fieldIndex) => {\n            if (index === fieldIndex) {\n                field[event.target.name] = event.target.value;\n                array.splice(index, 1, field);\n            }\n        });\n        setSlaveEnvArray(array);\n\n    };\n\n    const handleAddSlaveEnv = () => {\n        setSlaveEnvArray(prev => ([...prev, {key: \"\", value: \"\"}]));\n    };\n\n    const handleDeleteSlaveEnv = (index: number) => {\n        let slaveEnvArrayCopy = [...slaveEnvArray];\n        slaveEnvArrayCopy.splice(index, 1);\n        setSlaveEnvArray(slaveEnvArrayCopy);\n    };\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n\n    const handleChangeIndex = (index: number) => {\n        setValue(index);\n    };\n\n    const handleChangeEditable = () => {\n        console.log(prevSlaveEnvArray);\n        setPrevSlaveEnvArray(slaveEnvArray.map(field => ({...field})));\n        setEditable(!editable);\n    };\n\n    const handleCancel = () => {\n        console.log(\"cancel:\", prevSlaveEnvArray);\n        setSlaveEnvArray(prevSlaveEnvArray.map(field => ({...field})));\n        setEditable(false);\n    };\n\n    const handleOnClose = () => {\n        setSlaveEnvArray([]);\n        setPrevSlaveEnvArray([]);\n        onClose();\n    };\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleOnClose}\n            maxWidth={false}\n        >\n            <DialogTitle className={classes.pluginDialogTitle}>\n                Slave\n            </DialogTitle>\n\n\n            <Box className={classes.root}>\n                <AppBar position=\"static\" color=\"default\">\n                    <Tabs\n                        value={value}\n                        onChange={handleChange}\n                        indicatorColor=\"primary\"\n                        textColor=\"primary\"\n                        variant=\"fullWidth\"\n                        aria-label=\"full width tabs example\"\n                    >\n                        <Tab label=\"Slave information\" {...a11yProps(0)} />\n                        <Tab label=\"Slave env\" {...a11yProps(1)} />\n                    </Tabs>\n                </AppBar>\n                <SwipeableViews\n                    axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\n                    index={value}\n                    onChangeIndex={handleChangeIndex}\n                >\n                    <TabPanel value={value} index={0} dir={theme.direction}>\n                        <Box>\n                            <Typography variant=\"h6\">\n                                Name: Slave Name\n                            </Typography>\n                            <Typography variant=\"h6\">\n                                Info: Info\n                            </Typography>\n                            <Typography variant=\"h6\">\n                                Info: Info\n                            </Typography>\n                            <Typography variant=\"h6\">\n                                Info: Info\n                            </Typography>\n                        </Box>\n                    </TabPanel>\n                    <TabPanel value={value} index={1} dir={theme.direction}>\n\n                        <List className={clsx(classes.paddingNone, classes.field)}>\n                            <ListItem className={classes.paddingNone}>\n                                <ListItemText primary=\"Environment variables\" primaryTypographyProps={{variant: \"h6\"}}/>\n                                <ListItemSecondaryAction>\n                                    {editable &&\n                                    <IconButton\n                                        edge=\"end\"\n                                        aria-label=\"delete\"\n                                        onClick={handleAddSlaveEnv}\n                                    >\n                                        <AddIcon/>\n                                    </IconButton>\n                                    }\n                                </ListItemSecondaryAction>\n\n                            </ListItem>\n\n                            <Divider style={{marginBottom: 8}}/>\n\n                            {slaveEnvArray.map((field: any, index: number) => {\n                                return (\n                                    <ListItem\n                                        key={index}\n                                    >\n                                        <Grid container spacing={2}>\n                                            <Grid item xs={4}>\n                                                <TextField\n                                                    disabled={!editable}\n                                                    fullWidth\n                                                    label=\"key\"\n                                                    name=\"key\"\n                                                    value={field.key}\n                                                    onChange={(event) => handleChangeSlaveEnv(event, index)}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={editable ? 7 : 8}>\n                                                <TextField\n                                                    disabled={!editable}\n                                                    fullWidth\n                                                    label=\"value\"\n                                                    name=\"value\"\n                                                    value={field.value}\n                                                    onChange={(event) => handleChangeSlaveEnv(event, index)}\n                                                />\n                                            </Grid>\n                                            {editable &&\n                                            <Grid item xs={1}>\n                                                <ListItemSecondaryAction>\n                                                    <IconButton\n                                                        edge=\"end\"\n                                                        aria-label=\"delete\"\n                                                        style={{marginRight: 0, marginTop: 16}}\n                                                        onClick={() => handleDeleteSlaveEnv(index)}\n                                                    >\n                                                        <DeleteIcon/>\n                                                    </IconButton>\n                                                </ListItemSecondaryAction>\n                                            </Grid>\n                                            }\n                                        </Grid>\n                                    </ListItem>\n                                );\n                            })}\n\n                        </List>\n\n                        {editable ?\n                            <Grid container spacing={2}>\n                                <Grid item xs={6}>\n                                    <Button\n                                        fullWidth\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleChangeEditable}\n                                    >\n                                        Save\n                                    </Button>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Button\n                                        fullWidth\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleCancel}\n                                    >\n                                        Cancel\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                            :\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={handleChangeEditable}\n                            >\n                                Edit\n                            </Button>\n                        }\n\n\n                    </TabPanel>\n                </SwipeableViews>\n            </Box>\n\n\n        </Dialog>\n    );\n});\n\nexport default withStyles(styles)(DialogSlave);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {\n    Avatar,\n    Box, Button,\n    Chip, Dialog, DialogTitle,\n    Divider,\n    Grid,\n    IconButton,\n    ListItem,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText, TextField, Typography,\n    useMediaQuery,\n    useTheme,\n    withStyles,\n} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport DataTextField from \"../../components/DataTextField\";\nimport TopicWithButton from \"./LocalComponents/TopicWithButton\";\nimport BuildIcon from \"@material-ui/icons/Build\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport PluginComponent from \"./LocalComponents/PluginComponent\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\nimport {useChangeRoute} from \"routing-manager\";\nimport Organization from \"../../interfaces/Organization\";\nimport UserData from \"../../interfaces/UserData\";\nimport {Route, Switch, useRouteMatch} from \"react-router-dom\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport List from \"@material-ui/core/List\";\nimport Role from \"../../interfaces/Role\";\nimport useConfirm from \"../../hooks/useConfirm\";\nimport DialogUser from \"./LocalComponents/DialogUser\";\nimport DialogAddUsers from \"./LocalComponents/DialogAddUsers\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DialogAddRoles from \"./LocalComponents/DialogAddRoles\";\nimport Loading from \"../../components/Loading\";\nimport Plugin from \"../../interfaces/Plugin\";\nimport PluginFull from \"../../interfaces/PluginFull\";\nimport {PluginSettingsSpec} from \"@atlasrender/render-plugin\";\nimport DialogPluginInfo from \"./LocalComponents/DialogPluginInfo\";\nimport useAuth from \"../../hooks/useAuth\";\nimport DialogSlave from \"./LocalComponents/DialogSlave\";\nimport DemoRole from \"../../interfaces/DemoRole\";\nimport ErrorHandler from \"../../utils/ErrorHandler\";\nimport User from \"../../entities/User\";\nimport {yellow} from \"@material-ui/core/colors\";\n\n/**\n * OrganizationPageViewPropsStyled - interface for OrganizationPageView function\n * @interface\n * @author Nikita Nesterov\n */\ninterface OrganizationPageViewProps extends Stylable {\n\n}\n\n/**\n * ValidationErrors - interface for role input errors\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface ValidationErrors {\n    \"noInputError\": boolean;\n    \"nameError\": boolean;\n    \"descriptionError\": boolean;\n    \"permissionLevelError\": boolean;\n}\n\ntype permissionsType = \"canManageRoles\" | \"canManageUsers\" | \"canManagePlugins\"\n\nconst OrganizationPageView = React.forwardRef((props: OrganizationPageViewProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n    } = props;\n\n\n    //basic\n    const {logout, getUser} = useAuth();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const coreRequest = useCoreRequest();\n    const {getRouteParams, changeRoute} = useChangeRoute();\n    const {id} = getRouteParams();\n    const confirm = useConfirm();\n    const [loaded, setLoaded] = useState(false);\n    const [user, setUser] = useState<UserData>();\n\n    //roles\n    const [isAddRoleButtonActive, setIsAddRoleButtonActive] = useState(false);\n    const [isDialogModifyRoleButtonActive, setIsDialogModifyRoleButtonActive] = useState(false);\n    const [isAddRoleToUserButtonActive, setIsAddRoleToUserButtonActive] = useState<null | HTMLElement>(null);\n    const [isRemoveRoleFromUserButtonActive, setIsRemoveRoleFromUserButtonActive] = useState<null | HTMLElement>(null);\n    const [isModifyRoleButtonActive, setIsModifyRoleButtonActive] = useState<null | HTMLElement>(null);\n    const [roles, setRoles] = useState<Role[]>([]);\n    const [roleToChange, setRoleToChange] = useState<Role>();\n    const [roleUsers, setRoleUsers] = useState<UserData[] | null>(null);\n\n\n    //slaves\n    const [openDialogSlave, setOpenDialogSlave] = useState(false);\n\n\n    //organizations and users\n    const [isUserActive, setIsUserActive] = useState(false);\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [isButtonActive, setIsButtonActive] = useState(false);\n    const [isUserSettingsButtonActive, setIsUserSettingsButtonActive] = useState(false);\n    const [organizationData, setOrganizationData] = useState<Organization | null>(null);\n    const [allUsers, setAllUsers] = useState<UserData[] | null>(null);\n    const [newUsers, setNewUsers] = useState<number[]>([]);\n    const [availableUsers, setAvailableUsers] = useState<UserData[]>([]);\n    const [organizationUsers, setOrganizationUsers] = useState<UserData[]>([]);\n    const [currentUser, setCurrentUser] = useState<UserData | null>(null);\n    const [defaultRoleId, setDefaultRoleId] = useState<number>();\n\n\n    //Plugins\n    const [plugins, setPlugins] = useState<Plugin[]>();\n    const [dialogPluginButton, setDialogPluginButton] = useState<boolean>(false);\n    const [currentPlugin, setCurrentPlugin] = useState<PluginFull>();\n    const [isDefault, setIsDefault] = useState<boolean>(false);\n\n\n    useEffect(() => {\n        setLoaded(false);\n        Promise.all([\n            handleGetOrganization(),\n            handleGetAllUsers(),\n            handleGetOrganizationUsers(),\n            handleGetRoles(),\n            handleGetPlugins(),\n            handleGetAvailableUsers(),\n        ]).then(() => {\n            setLoaded(true);\n        });\n    }, [id]);\n\n    //basic\n    // function handleSetLoaded() {\n    //     setLoaded(true);\n    // }\n\n    const handleGetUser = (orgUsers: UserData[]) => {\n        const u = getUser();\n        let uToAdd;\n        if (u) {\n            uToAdd = orgUsers.filter(orgUser => orgUser.id === u.id);\n            if (uToAdd) {\n                setUser(uToAdd[0]);\n            }\n        }\n    };\n\n    const checkUserPermissions = (canManage: permissionsType) => {\n        if ((user && ((user.roles.length > 0 && user.roles[0][canManage]) || user.id === organizationData?.ownerUser.id))) {\n            return true;\n        } else {\n            return false;\n        }\n\n    };\n\n    //roles\n    async function handleGetRoles() {\n        try {\n            const response = await coreRequest().get(`organizations/${id}/roles`);\n            setRoles(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {\n                    logout();\n                })\n                .on(404, \"Organization not found\")\n                .handle(err);\n        }\n    }\n\n    async function handleGetRoleById(roleId: number) {\n        try {\n            const response = await coreRequest()\n                .get(`organizations/${id}/roles/${roleId}`);\n            setRoleToChange(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {\n                    logout();\n                })\n                .on(404, \"Role not found\")\n                .handle(err);\n        }\n    }\n\n    async function handleGetPlugins() {\n        try {\n            const response = await coreRequest().get(\"plugins\").query({organization: id});\n            setPlugins(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {\n                    logout();\n                })\n                .on(404, \"Organization not found\")\n                .handle(err);\n        }\n    }\n\n    function handleGetRoleUsers(roleId: number) {\n        coreRequest()\n            .get(`organizations/${id}/roles/${roleId}/users`)\n            .then((response) => {\n                setRoleUsers(response.body);\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(404, \"Role not found\")\n                    .handle(err);\n            });\n    }\n\n    function handleAddRoleToUser(roleId: number, userToAddRoleId: number) {\n        setIsAddRoleToUserButtonActive(null);\n        coreRequest()\n            .post(`organizations/${id}/roles/${roleId}/users`)\n            .send({userId: userToAddRoleId})\n            .then((response) => {\n                handleGetOrganizationUsers()\n                    .then(response => {\n                        const item = response.filter((user: any) => user.id === userToAddRoleId);\n                        setCurrentUser(item[0]);\n                    })\n                    .catch(err => {\n                        const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                        errorHandler\n                            .on(401, () => {\n                                logout();\n                            })\n                            .handle(err);\n                    });\n                handleGetRoles().then();\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, \"Can not add role to user\")\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(403, \"User already owns this role\")\n                    .on(404, \"Role or User not found\")\n                    .handle(err);\n            });\n    }\n\n    function handleRemoveRoleFromUser(roleId: number, userToRemoveRoleId: number) {\n        setIsRemoveRoleFromUserButtonActive(null);\n        coreRequest()\n            .delete(`organizations/${id}/roles/${roleId}/users`)\n            .send({userId: userToRemoveRoleId})\n            .then((response) => {\n                handleGetOrganizationUsers()\n                    .then(response => {\n                        const item = response.filter((user: any) => user.id === userToRemoveRoleId);\n                        setCurrentUser(item[0]);\n                    });\n                handleGetRoles().then();\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, \"Can not delete role from user\")\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(403, \"User does not own this role\")\n                    .on(404, \"Role not found\")\n                    .handle(err);\n            });\n    }\n\n    function handleAddRole(roleToAdd: any, errors: ValidationErrors) {\n        if (!errors.noInputError && !errors.nameError && !errors.descriptionError && !errors.permissionLevelError) {\n            setIsAddRoleButtonActive(false);\n            const addNewRole = roleToAdd;\n            addNewRole.permissionLevel = +addNewRole.permissionLevel;\n            coreRequest()\n                .post(`organizations/${id}/roles`)\n                .send(addNewRole)\n                .then((response) => {\n                    handleGetRoles().then();\n                })\n                .catch(err => {\n                    const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                    errorHandler\n                        .on(400, \"Can not add new role\")\n                        .on(401, () => {\n                            logout();\n                        })\n                        .on(409, \"Role with this name already exist\")\n                        .handle(err);\n                });\n        } else {\n            enqueueErrorSnackbar(\"Invalid data types\");\n        }\n\n    }\n\n    function handleDeleteRole(roleId: number) {\n        setIsModifyRoleButtonActive(null);\n        coreRequest()\n            .delete(`organizations/${id}/roles/${roleId}`)\n            .then((response) => {\n                handleGetRoles().then();\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, \"Can not delete role\")\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(404, \"Role not found\")\n                    .handle(err);\n            });\n    }\n\n    function handleModifyRole(roleId: number, roleToModify: Role, isDefault: boolean) {\n        setIsDialogModifyRoleButtonActive(false);\n        roleToModify.permissionLevel = +roleToModify.permissionLevel;\n        const roleToSent: any = {...roleToModify};\n        delete roleToSent.id;\n        coreRequest()\n            .post(`organizations/${id}/roles/${roleId}`)\n            .send(roleToSent)\n            .then((response) => {\n                handleGetRoles().then();\n                handleGetOrganizationUsers().then();\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, \"Can not edit role\")\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(404, \"Role not found\")\n                    .on(409, \"Role with this name already exist\")\n                    .handle(err);\n            });\n    }\n\n    function handleIsAddRoleButtonActive() {\n        setRoleToChange(undefined);\n        setIsAddRoleButtonActive(!isAddRoleButtonActive);\n    }\n\n    function handleOpenModifyRoleButtonActive(event: any) {\n        setIsModifyRoleButtonActive(event.currentTarget);\n    }\n\n    function handleCloseModifyRoleButtonActive() {\n        setIsModifyRoleButtonActive(null);\n    }\n\n    function handleIsDialogModifyRoleButtonActive(roleId: number) {\n        handleGetRoleById(roleId).then(() => {\n            setIsDialogModifyRoleButtonActive(true);\n        });\n    }\n\n    function handleOpenDialogSlave() {\n        setOpenDialogSlave(true);\n    }\n\n    function handleCloseDialogSlave() {\n        setOpenDialogSlave(false);\n    }\n\n\n    //organizations and users\n    async function handleGetOrganizationUsers() {\n        try {\n            const response = await coreRequest().get(`organizations/${id}/users`);\n            setOrganizationUsers(response.body);\n            handleGetUser(response.body);\n            return response.body;\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {\n                    logout();\n                })\n                .on(404, \"Organization not found\")\n                .handle(err);\n        }\n    }\n\n    async function handleGetOrganization() {\n        try {\n            const response = await coreRequest().get(`organizations/${id}`);\n            setOrganizationData(response.body);\n            setDefaultRoleId(response.body.defaultRole.id);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {\n                    logout();\n                })\n                .on(404, \"Organization not found\")\n                .handle(err);\n        }\n    }\n\n    const handleDeleteOrganization = () => {\n        coreRequest()\n            .delete(`organizations/${id}`)\n            .then(() => {\n                changeRoute({page: \"user\", id: organizationData?.ownerUser.id});\n            })\n            .catch(err => {\n\n            });\n    };\n\n    async function handleGetAllUsers() {\n        try {\n            const response = await coreRequest().get(\"users\");\n            setAllUsers(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {\n                    logout();\n                })\n                .handle(err);\n        }\n    }\n\n    async function handleGetAvailableUsers() {\n        try {\n            const response = await coreRequest().get(`organizations/${id}/availableUsers`);\n            setAvailableUsers(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {\n                    logout();\n                })\n                .on(404, \"Organization not found\")\n                .handle(err);\n        }\n    }\n\n    function handleAddUser(usersToAddId: number[]) {\n        coreRequest()\n            .post(`organizations/${id}/users`)\n            .send({userIds: usersToAddId})\n            .then(response => {\n                handleGetOrganization().then();\n                handleGetOrganizationUsers().then();\n                handleGetAvailableUsers().then();\n                setNewUsers([]);\n                setIsButtonActive(false);\n                setIsUserActive(true);\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, \"Can not add user\")\n                    .on(401, () => {\n                        logout();\n                    })\n                    .handle(err);\n            });\n    }\n\n    function handleRemoveUser(usersToDeleteIds: number[]) {\n        setIsUserSettingsButtonActive(false);\n        coreRequest()\n            .delete(`organizations/${id}/users`)\n            .send({userIds: usersToDeleteIds})\n            .then(response => {\n                handleGetOrganization().then();\n                handleGetOrganizationUsers().then();\n                handleGetAvailableUsers().then();\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, \"Can not delete user\")\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(404, \"User not exist\")\n                    .on(409, \"Some users are not in organization\")\n                    .handle(err);\n            });\n    }\n\n    function handleNewUsersClick(newUserId: number) {\n        let newUsersArray = newUsers;\n        if (newUsers.includes(newUserId)) {\n            newUsersArray = newUsersArray.filter(userId => userId !== newUserId);\n            setNewUsers(newUsersArray);\n        } else {\n            setNewUsers([...newUsers, newUserId]);\n        }\n    }\n\n    function handleClick() {\n        setIsOpen(!isOpen);\n    }\n\n    function handleIsUserActive() {\n        setIsUserActive(true);\n    }\n\n    function handleIsButtonActive() {\n        setIsButtonActive(true);\n    }\n\n    function handleIsUserSettingsButtonActive(user: UserData) {\n        setIsUserSettingsButtonActive(true);\n        setCurrentUser(user);\n    }\n\n    function handleSetCurrentPlugin(id: number) {\n        coreRequest()\n            .get(`plugins/${id}`)\n            .then(response => {\n                setCurrentPlugin({...response.body, rules: new PluginSettingsSpec(response.body.rules)});\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(404, \"Plugin not found\")\n                    .handle(err);\n            });\n    }\n\n    const handleCloseAddUsersDialog = () => {\n        setIsButtonActive(false);\n        setNewUsers([]);\n    };\n\n\n    const slaves = [\n        \"Kiev slave\",\n        \"Harkov slave\",\n        \"Lvov slave\",\n    ];\n\n\n    const theme = useTheme();\n    const matches = useMediaQuery(theme.breakpoints.up(\"md\"));\n    let mainInfo;\n    if (matches) {\n        mainInfo = (\n            <Box className={classes.container}>\n                <Grid container className={classes.firstLine}>\n                    <Grid item xs={8}>\n                        <Box>\n                            <Grid container spacing={2} className={classes.nameDescription}>\n                                <Grid item xs={6}>\n                                    <DataTextField\n                                        label=\"Organization name\"\n                                        children={organizationData?.name}\n                                    />\n                                </Grid>\n                                <Grid item xs={6}/>\n                                <Grid item xs={10}>\n                                    <DataTextField\n                                        label=\"description\"\n                                        children={organizationData?.description || \"No description provided.\"}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <Avatar\n                            src=\"https://cdn.sportclub.ru/assets/2019-09-20/n97c311rvb.jpg\"\n                            className={classes.avatar}\n                        />\n                    </Grid>\n                </Grid>\n            </Box>\n        );\n    } else {\n        mainInfo = (\n            <Grid container spacing={2} className={classes.firstLine}>\n                <Box className={classes.avatarBox}>\n                    <Avatar src=\"https://cdn.sportclub.ru/assets/2019-09-20/n97c311rvb.jpg\" className={classes.avatar}/>\n                </Box>\n                <Grid item xs={12} md={10}>\n                    <DataTextField label=\"Organization name\" children=\"Blizzard entertainment\"/>\n                </Grid>\n                <Grid item xs={12} md={10}>\n                    <DataTextField label=\"description\"\n                                   children=\"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dicta dolorem, dolorum nam quidem sint sunt!\"/>\n                </Grid>\n            </Grid>\n        );\n    }\n\n    let {path} = useRouteMatch();\n\n    return (\n        loaded ?\n            <Switch>\n                <Route path={path}>\n                    <Box>\n                        {mainInfo}\n                        <TopicWithButton children=\"Slaves\" can={checkUserPermissions(\"canManagePlugins\")}/>\n                        <Grid container className={classes.firstLine}>\n                            <Grid item xs={12} md={10}>\n                                {slaves.map((slave, key) => {\n                                    return (\n                                        <ListItem key={key}>\n                                            <ListItemIcon>\n                                                <BuildIcon/>\n                                            </ListItemIcon>\n                                            <ListItemText\n                                                primary={slave}\n                                                secondary=\"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur, rerum?\"\n                                            />\n                                            {checkUserPermissions(\"canManagePlugins\") &&\n                                            <ListItemSecondaryAction\n                                                onClick={handleOpenDialogSlave}\n                                            >\n                                                <IconButton>\n                                                    <SettingsIcon/>\n                                                </IconButton>\n                                            </ListItemSecondaryAction>\n                                            }\n                                        </ListItem>\n                                    );\n                                })}\n                            </Grid>\n                        </Grid>\n\n\n                        <DialogSlave\n                            open={openDialogSlave}\n                            onClose={handleCloseDialogSlave}\n                        />\n\n\n                        <TopicWithButton\n                            onClick={handleIsAddRoleButtonActive}\n                            can={checkUserPermissions(\"canManageRoles\")}\n                            children=\"Roles\"\n                        />\n\n\n                        <DialogAddRoles\n                            open={isAddRoleButtonActive}\n                            onClose={() => {\n                                setIsAddRoleButtonActive(false);\n                                setIsDefault(false);\n                            }}\n                            onAddRole={handleAddRole}\n                            onModifyRole={handleModifyRole}\n                        />\n\n                        <Grid container className={classes.firstLine}>\n                            <Grid item xs={12} md={10}>\n                                <List>\n                                    {roles.map((role) => {\n                                        return (\n                                            <ListItem key={role.id}>\n                                                <ListItemText\n                                                    primary={role.name}\n                                                    secondary={role.description}\n                                                    className={classes.roleItem}\n\n                                                    style={{\n                                                        borderLeft: `4px solid #${role.color}`,\n                                                        color: defaultRoleId === role.id ? yellow[700] : undefined,\n                                                    }}\n                                                    classes={{\n                                                        primary: classes.rolesPrimary,\n                                                        secondary: classes.rolesDescription,\n                                                    }}\n                                                />\n                                                {checkUserPermissions(\"canManageRoles\") &&\n                                                <ListItemSecondaryAction>\n                                                    <IconButton\n                                                        edge=\"end\"\n                                                        aria-label=\"delete\"\n                                                        style={{marginRight: theme.spacing(0)}}\n                                                        onClick={() => {\n                                                            if (defaultRoleId === role.id) {\n                                                                setIsDefault(true);\n                                                            }\n                                                            handleIsDialogModifyRoleButtonActive(role.id);\n                                                        }}\n                                                    >\n                                                        <EditIcon/>\n                                                    </IconButton>\n\n                                                    <IconButton\n                                                        edge=\"end\"\n                                                        aria-label=\"delete\"\n                                                        onClick={() => confirm(async () => handleDeleteRole(role.id),\n                                                            {title: `are you sure to delete role: ${role.name} ?`})}\n                                                    >\n                                                        <DeleteIcon/>\n                                                    </IconButton>\n                                                </ListItemSecondaryAction>\n                                                }\n                                            </ListItem>\n                                        );\n                                    })}\n                                </List>\n                            </Grid>\n                        </Grid>\n\n                        <DialogAddRoles\n                            open={isDialogModifyRoleButtonActive}\n                            onClose={() => {\n                                setIsDialogModifyRoleButtonActive(false);\n                                setIsDefault(false);\n                            }}\n                            role={roleToChange}\n                            modify={true}\n                            onAddRole={handleAddRole}\n                            onModifyRole={handleModifyRole}\n                            isDefault={isDefault}\n                        />\n\n                        <TopicWithButton\n                            onClick={handleIsButtonActive}\n                            can={checkUserPermissions(\"canManageUsers\")}\n                            children=\"Members\"\n                        />\n\n                        <DialogAddUsers\n                            open={isButtonActive}\n                            onClose={handleCloseAddUsersDialog}\n                            allUsers={allUsers}\n                            newUsers={newUsers}\n                            availableUsers={availableUsers}\n                            onNewUserClick={handleNewUsersClick}\n                            onAdduser={handleAddUser}\n                        />\n\n                        <Grid container className={classes.firstLine} spacing={0}>\n                            {organizationUsers.map((orgUser: UserData, key: number) => {\n                                return (\n                                    <Grid item xs={12} md={10} key={key}>\n                                        <ListItem button onClick={() => {\n                                            changeRoute({page: \"user\", id: orgUser.id});\n                                        }}>\n                                            <ListItemAvatar>\n                                                <Avatar\n                                                    src=\"https://cdn.sportclub.ru/assets/2019-09-20/n97c311rvb.jpg\"\n                                                />\n                                            </ListItemAvatar>\n                                            <ListItemText primary={orgUser.username} secondary={orgUser.email}/>\n                                            <ListItemSecondaryAction>\n                                                {orgUser.roles[0] &&\n                                                <Chip\n                                                    label={orgUser.roles[0]?.name}\n                                                    style={{backgroundColor: `#${orgUser?.roles[0].color}`}}\n                                                />\n                                                }\n                                                {checkUserPermissions(\"canManageUsers\") &&\n                                                <IconButton onClick={() => handleIsUserSettingsButtonActive(orgUser)}>\n                                                    <SettingsIcon/>\n                                                </IconButton>\n                                                }\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                    </Grid>\n                                );\n                            })}\n                        </Grid>\n\n                        <DialogUser\n                            open={isUserSettingsButtonActive}\n                            onClose={() => setIsUserSettingsButtonActive(false)}\n                            user={currentUser}\n                            roles={roles}\n                            onRemove={handleRemoveUser}\n                            onAddRole={handleAddRoleToUser}\n                            onRemoveRole={handleRemoveRoleFromUser}\n                        />\n\n                        <TopicWithButton\n                            children=\"Plugins\"\n                            can={checkUserPermissions(\"canManagePlugins\")}\n                            onClick={() => changeRoute({page: \"plugin/create\", id: id})}\n                        />\n                        {plugins?.map((plugin) => {\n                            return (\n                                <PluginComponent\n                                    plugin={plugin}\n                                    invokeDialog={() => {\n                                        setDialogPluginButton(!dialogPluginButton);\n                                    }}\n                                    setCurrentPlugin={handleSetCurrentPlugin}\n                                    can={user && checkUserPermissions(\"canManagePlugins\")}\n                                />\n                            );\n                        })}\n                        {currentPlugin &&\n                        <DialogPluginInfo\n                            currentPlugin={currentPlugin}\n                            onClose={() => setDialogPluginButton(false)}\n                            open={dialogPluginButton}\n                        />\n                        }\n\n                        {user && user.id === organizationData?.ownerUser.id &&\n                        <React.Fragment>\n                            <TopicWithButton\n                                children=\"Danger Zone\"\n                                can={false}\n                                color=\"#f50057\"\n                            />\n\n                            <Grid container className={classes.firstLine}>\n                                <Grid item xs={10}>\n                                    <Button\n                                        fullWidth\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        onClick={() => confirm(async () => handleDeleteOrganization(),\n                                            {title: `are you sure to delete organization: ${organizationData.name} ?`})}\n                                    >\n                                        Delete organization\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </React.Fragment>\n                        }\n\n\n                    </Box>\n                </Route>\n            </Switch>\n            :\n            <Box className={classes.loading}>\n                <Loading/>\n            </Box>\n\n    );\n});\n\nexport default withStyles(styles)(OrganizationPageView);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 10.11.2020, 19:22\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport {blue, grey} from \"@material-ui/core/colors\";\n\n\nconst styles = (theme: Theme) => createStyles({\n    container: {\n        justifyContent: \"center\",\n        alignItems: \"flex-end\",\n    },\n    flexNoWrap: {\n        flexWrap: \"nowrap\",\n    },\n    flexItem: {\n        display: \"flex\",\n        //justifyContent: \"space-between\",\n        alignItems: \"center\",\n        listStyleType: \"none\",\n    },\n    buttonAdd: {\n        backgroundColor: grey[200],\n    },\n    fullWidth: {\n        width: \"100%\",\n    },\n    submitButton: {\n        backgroundColor: blue[500],\n    },\n    chipStyle: {\n        marginRight: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    selectMargin: {\n        marginTop: theme.spacing(2),\n    },\n    gridContainer: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"flex-end\",\n    },\n    loading: {\n        display: \"flex\",\n        height: \"90vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 30.11.2020, 20:57\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    header: {\n        textAlign: \"center\"\n    },\n    headerSettings: {\n        textAlign: \"center\",\n        padding: theme.spacing(1),\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 01.12.2020, 03:36\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport {grey} from \"@material-ui/core/colors\";\n\nconst styles = (theme: Theme) => createStyles({\n    container: {\n        width: \"100%\",\n        padding: theme.spacing(1, 0),\n    },\n    separator: {\n        background: grey[500],\n        width: \"100%\",\n    },\n    text: {\n        textAlign: \"center\",\n        fontSize: 13    ,\n        color: theme.palette.text.secondary,\n    }\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 01.12.2020, 03:48\n * All rights reserved.\n */\n\nimport React from \"react\";\nimport {Box, Divider, Typography, withStyles} from \"@material-ui/core\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport styles from \"./styles\";\n\ninterface SeparatorPluginFieldProps extends Stylable {\n    label?: string;\n}\n\nconst SeparatorPluginField = React.forwardRef((props: SeparatorPluginFieldProps, ref) => {\n    const {\n        classes,\n        className,\n        style,\n        label\n    } = props;\n\n\n    return (\n        <Box className={classes.container}>\n            {label &&\n            <Typography className={classes.text}>\n                {label}\n            </Typography>\n            }\n            <Divider className={classes.separator}/>\n        </Box>\n    );\n});\n\nexport default withStyles(styles)(SeparatorPluginField);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 01.12.2020, 03:36\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    container: {\n        display: \"flex\",\n        width: \"100%\",\n    },\n    text: {\n        display: \"flex\",\n        textAlign: \"center\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 01.12.2020, 03:46\n * All rights reserved.\n */\n\nimport React, {useEffect, useState} from \"react\";\nimport {Box, Grid, Switch, Typography, withStyles} from \"@material-ui/core\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport {BooleanField, IntegerField, PluginSetting} from \"@atlasrender/render-plugin\";\n\n\ninterface BooleanPluginFieldProps extends Stylable {\n    field: BooleanField;\n    valueD?: number,\n\n    setPluginSetting(field: PluginSetting, value: number | string | boolean | null): void,\n}\n\nconst BooleanPluginField = React.forwardRef((props: BooleanPluginFieldProps, ref) => {\n    const {\n        classes,\n        className,\n        style,\n        field,\n        setPluginSetting,\n    } = props;\n\n    const [value, setValue] = useState(field.default);\n\n\n    useEffect(() => {\n        setPluginSetting(field, value);\n    }, [value]);\n\n\n    function handleChange() {\n        setValue(!value);\n    }\n\n    return (\n        <Grid container spacing={1} className={classes.container}>\n\n            {field.label ?\n                <React.Fragment>\n                    <Grid item xs={3} style={{display: \"flex\", justifyContent: \"center\", margin: 1}}>\n                        <Typography className={classes.text} variant=\"button\" style={{height: 36, width: \"100%\"}}>\n                            {field.label.toUpperCase()}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <Switch\n                            checked={value}\n                            onChange={handleChange}\n                            name=\"checkedA\"\n                            inputProps={{\"aria-label\": \"secondary checkbox\"}}\n                        />\n                    </Grid>\n                </React.Fragment>\n                :\n                <Switch\n                    checked={value}\n                    onChange={handleChange}\n                    name=\"checkedA\"\n                    inputProps={{\"aria-label\": \"secondary checkbox\"}}\n                />\n            }\n\n        </Grid>\n    );\n});\n\nexport default withStyles(styles)(BooleanPluginField);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 01.12.2020, 03:49\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    input: {\n        padding: theme.spacing(0),\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 01.12.2020, 03:49\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {Button, Grid, TextField, withStyles} from \"@material-ui/core\";\nimport Stylable from \"../../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport {PluginSetting, StringField} from \"@atlasrender/render-plugin\";\n\ninterface StringPluginFieldProps extends Stylable {\n    field: StringField;\n\n    // value?: string | null,\n\n    setPluginSetting(field: PluginSetting, value: number | string | null): void,\n}\n\nconst StringPluginField = React.forwardRef((props: StringPluginFieldProps, ref: Ref<HTMLElement>) => {\n    const {\n        classes,\n        className,\n        style,\n        field,\n        setPluginSetting,\n        // value,\n    } = props;\n\n    const [value, setValue] = useState<string>(field.default);\n\n    useEffect(() => {\n        setPluginSetting(field, value);\n    }, [value])\n\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        setValue(event.target.value);\n    }\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={3} style={{display: \"flex\", alignItems: \"center\"}}>\n                <Button fullWidth>{field.name}</Button>\n            </Grid>\n            <Grid item xs={9}>\n                <TextField\n                    variant=\"outlined\"\n                    fullWidth\n                    value={value}\n                    onChange={handleChange}\n                    onBlur={() => {\n                        setPluginSetting(field, value);\n                    }}\n                    size=\"small\"\n                    style={{padding: 0}}\n                />\n            </Grid>\n        </Grid>\n    );\n});\n\nexport default withStyles(styles)(StringPluginField);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 30.11.2020, 22:17\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    field: {\n        \"& input::-webkit-clear-button, & input::-webkit-outer-spin-button, & input::-webkit-inner-spin-button\": {\n            display: \"none\"\n        }\n    },\n    sliderStyles: {\n\n    },\n    thumb: {\n        height: 24,\n        width: 10,\n        marginTop: -11,\n        marginLeft: -9,\n        borderRadius: 2,\n    },\n    rail: {\n        height: 10,\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 30.11.2020, 22:16\n * All rights reserved.\n */\n\nimport React, {Ref, useState} from \"react\";\nimport {Button, Grid, InputBase, Slider, TextField, withStyles} from \"@material-ui/core\";\nimport Stylable from \"../../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport {IntegerField, PluginSetting} from \"@atlasrender/render-plugin\";\n\ninterface IntegerPluginFieldProps extends Stylable {\n    field: IntegerField;\n    value?: number,\n\n    setPluginSetting(field: PluginSetting, value: number | string | null): void,\n}\n\nconst IntegerPluginField = React.forwardRef((props: IntegerPluginFieldProps, ref: Ref<HTMLElement>) => {\n    const {\n        classes,\n        className,\n        style,\n        field,\n        setPluginSetting,\n        value: inputValue,\n    } = props;\n\n    const [value, setValue] = React.useState<string>(\"\");\n    const [slider, setSlider] = React.useState<boolean>(true);\n    const [finalValue, setFinalValue] = React.useState<number | null>(field.default || null);\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const [min, setMin] = useState(0);\n    const [max, setMax] = useState(1000);\n\n    //TODO: add update fdrom props value!\n\n    React.useEffect(() => {\n        setValue(String(finalValue));\n        setPluginSetting(field, finalValue);\n    }, [finalValue]);\n\n    // function checkForValidation(){\n    //     if(!validate.isInteger(+value)){\n    //         setValue(finalValue);\n    //         return;\n    //     }else if(field?.min && field?.max && (value < field.min || value > field.max)){\n    //         setValue(finalValue);\n    //         return;\n    //     }else if(field?.min && value < field?.min){\n    //         setValue(finalValue);\n    //         return;\n    //     }else if(field?.max && value > field?.max){\n    //         setValue(finalValue);\n    //         return;\n    //     }\n    //     else{\n    //         setFinalValue(+value);\n    //     }\n    // }\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={3} style={{display: \"flex\", alignItems: \"center\"}}>\n                <Button\n                    fullWidth\n                    onClick={() => setSlider(prev => !prev)}\n                >\n                    {field.name}\n                </Button>\n            </Grid>\n            <Grid item xs={slider ? 2 : 9}>\n                <TextField\n                    ref={inputRef}\n                    value={value}\n                    variant=\"outlined\"\n                    type=\"number\"\n                    size=\"small\"\n                    fullWidth\n                    className={classes.field}\n                    style={slider ? {paddingRight: 16,} : {}}\n                    onChange={(event) => setValue(event.target.value)}\n                    onBlur={() => {\n                        if (isNaN(+value))\n                            setValue(String(finalValue || \"\"));\n                        else {\n                            setFinalValue(+value);\n                            if(+value < min) {\n                                setMin(min - Math.abs(1.4 * +value));\n                            }\n                            if(+value > max) {\n                                setMax(max + 1.4 * +value);\n                            }\n                        }\n                    }}\n                    onKeyPress={(event) => {\n                        if (event.key === \"Enter\" && inputRef.current)\n                            inputRef.current.blur();\n                    }}\n                />\n            </Grid>\n            {slider &&\n            <Grid item xs={7} style={{display: \"flex\", alignItems: \"center\"}}>\n                <Slider\n                    className={classes.sliderStyles}\n                    defaultValue={30}\n                    value={finalValue || 0}\n                    onChange={(event, newValue) => {\n                        if (typeof newValue === \"number\")\n                            setFinalValue(newValue);\n                    }}\n\n                    aria-labelledby=\"discrete-slider\"\n                    valueLabelDisplay=\"off\"\n                    step={1}\n                    min={field.min != null ? field.min : min}\n                    max={field.max != null ? field.max : max}\n                    classes={{\n                        thumb: classes.thumb,\n                    }}\n                />\n            </Grid>\n            }\n        </Grid>\n    );\n});\n\nexport default withStyles(styles)(IntegerPluginField);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 30.11.2020, 22:17\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    field: {\n        \"& input::-webkit-clear-button, & input::-webkit-outer-spin-button, & input::-webkit-inner-spin-button\": {\n            display: \"none\"\n        }\n    },\n    sliderStyles: {\n\n    },\n    thumb: {\n        height: 24,\n        width: 10,\n        marginTop: -11,\n        marginLeft: -9,\n        borderRadius: 2,\n    },\n    rail: {\n        height: 10,\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 30.11.2020, 22:16\n * All rights reserved.\n */\n\nimport React, {Ref, useState} from \"react\";\nimport {Button, Grid, InputBase, Slider, TextField, withStyles} from \"@material-ui/core\";\nimport Stylable from \"../../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport {FloatField, IntegerField, PluginSetting} from \"@atlasrender/render-plugin\";\n\ninterface IntegerPluginFieldProps extends Stylable {\n    field: FloatField;\n    value?: number,\n\n    setPluginSetting(field: PluginSetting, value: number | string | null): void;\n}\n\nconst FloatPluginField = React.forwardRef((props: IntegerPluginFieldProps, ref: Ref<HTMLElement>) => {\n    const {\n        classes,\n        className,\n        style,\n        field,\n        setPluginSetting,\n        value: inputValue,\n    } = props;\n\n    const [value, setValue] = React.useState<string>(\"\");\n    const [slider, setSlider] = React.useState<boolean>(true);\n    const [finalValue, setFinalValue] = React.useState<number | null>(field.default || null);\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const [min, setMin] = useState(0);\n    const [max, setMax] = useState(1000);\n\n    //TODO: update from props value!\n\n\n    React.useEffect(() => {\n        setValue(String(finalValue));\n        setPluginSetting(field, finalValue)\n    }, [finalValue]);\n\n\n    // function checkForValidation(){\n    //     if(!validate.isInteger(+value)){\n    //         setValue(finalValue);\n    //         return;\n    //     }else if(field?.min && field?.max && (value < field.min || value > field.max)){\n    //         setValue(finalValue);\n    //         return;\n    //     }else if(field?.min && value < field?.min){\n    //         setValue(finalValue);\n    //         return;\n    //     }else if(field?.max && value > field?.max){\n    //         setValue(finalValue);\n    //         return;\n    //     }\n    //     else{\n    //         setFinalValue(+value);\n    //     }\n    // }\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={3} style={{display: \"flex\", alignItems: \"center\"}}>\n                <Button\n                    fullWidth\n                    onClick={() => setSlider(prev => !prev)}\n                >\n                    Samples\n                </Button>\n            </Grid>\n            <Grid item xs={slider ? 2 : 9}>\n                <TextField\n                    ref={inputRef}\n                    value={value}\n                    fullWidth\n                    variant=\"outlined\"\n                    type=\"number\"\n                    size=\"small\"\n                    className={classes.field}\n                    style={slider ? {paddingRight: 16,} : {}}\n                    onChange={(event) => setValue(event.target.value)}\n                    onBlur={() => {\n                        if (isNaN(+value))\n                            setValue(String(finalValue || \"\"));\n                        else {\n                            setFinalValue(+value);\n                            if(+value < min) {\n                                setMin(min - Math.abs(1.4 * +value));\n                            }\n                            if(+value > max) {\n                                setMax(max + 1.4 * +value);\n                            }\n                        }\n                    }}\n                    onKeyPress={(event) => {\n                        if (event.key === \"Enter\" && inputRef.current)\n                            inputRef.current.blur();\n                    }}\n                />\n            </Grid>\n            {slider &&\n            <Grid item xs={7} style={{display: \"flex\", alignItems: \"center\"}}>\n                <Slider\n                    className={classes.sliderStyles}\n                    defaultValue={30}\n                    value={finalValue || 0}\n                    onChange={(event, newValue) => {\n                        if (typeof newValue === \"number\")\n                            setFinalValue(newValue);\n                    }}\n                    aria-labelledby=\"discrete-slider\"\n                    valueLabelDisplay=\"off\"\n                    step={1}\n                    min={field.min != null ? field.min : min}\n                    max={field.max != null ? field.max : max}\n                    classes={{\n                        thumb: classes.thumb,\n                    }}\n                />\n            </Grid>\n            }\n        </Grid>\n    );\n});\n\nexport default withStyles(styles)(FloatPluginField);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 30.11.2020, 20:57\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {Box, Divider, Grid, TextField, Typography, withStyles} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport useCoreRequest from \"../../../../hooks/useCoreRequest\";\nimport useEnqueueErrorSnackbar from \"../../../../utils/enqueueErrorSnackbar\";\nimport PluginFull from \"../../../../interfaces/PluginFull\";\nimport {\n    BooleanField,\n    FloatField,\n    IntegerField,\n    PluginSetting,\n    PluginSettingsSpec,\n    StringField\n} from \"@atlasrender/render-plugin\";\nimport SeparatorPluginField from \"../../../../components/SeparatorPluginField\";\nimport BooleanPluginField from \"../../../../components/BooleanPluginField\";\nimport StringPluginField from \"../../../../components/RenderJobCustomFields/StringPluginField\";\nimport IntegerPluginField from \"../../../../components/RenderJobCustomFields/IntegerPluginField\";\nimport useAuth from \"../../../../hooks/useAuth\";\nimport ErrorHandler from \"../../../../utils/ErrorHandler\";\nimport FloatPluginField from \"../../../../components/RenderJobCustomFields/FloatPluginField\";\n\n\n/**\n * SubmitPagePropsStyled - interface for SubmitPageView function\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface PluginInputProps extends Stylable {\n    pluginId: number;\n\n    setPluginSetting(field: PluginSetting, value: number | string | null): void,\n}\n\n/**\n * SubmitPageView - function for displaying Submit page\n * @function\n * @author Andrii Demchyshyn\n */\nconst PluginInput = React.forwardRef((props: PluginInputProps, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n        setPluginSetting,\n        pluginId,\n    } = props;\n\n\n    const {logout} = useAuth();\n    const coreRequest = useCoreRequest();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n\n\n    const [plugin, setPlugin] = useState<PluginFull | null>(null);\n    const [loaded, setLoaded] = useState<boolean>(false);\n\n\n    useEffect(() => {\n        Promise.all([\n            handleGetPlugin(),\n        ]).then(() => {\n            setLoaded(true);\n        });\n    }, [pluginId]);\n\n\n    async function handleGetPlugin() {\n        try {\n            const response = await coreRequest().get(`plugins/${pluginId}`);\n            //TODO validation for rules\n            console.log(response.body.rules);\n            const temp = {...response.body, rules: new PluginSettingsSpec(response.body.rules)};\n            // const temp = {...response.body, rules: response.body.rules};\n            setPlugin(temp);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {\n                    logout();\n                })\n                .on(404, \"Plugin not found\")\n                .handle(err);\n        }\n\n    }\n\n    // const [str, setStr] = useState<string | null>(\"hello\");\n\n    // function handleChangeStr(value: string | null) {\n    //     setStr(value);\n    // }\n\n    // console.log(str);\n\n    let pluginCopy: PluginSetting[] = [];\n\n    if (plugin) {\n        pluginCopy = [...plugin.rules];\n    }\n\n    return (\n        (loaded && plugin) ?\n            <Box>\n                <Typography variant=\"h6\" className={classes.header}>\n                    {plugin.name}\n                </Typography>\n                <Box>\n                    <Typography variant=\"h6\" className={classes.headerSettings}>\n                        Plugin Settings\n                    </Typography>\n                    <Divider style={{marginBottom: 16}}/>\n                </Box>\n                <Grid container spacing={2}>\n                    {pluginCopy.map((field: PluginSetting) => {\n                        switch (field.getType()) {\n                            case \"integer\" :\n                                return (\n                                    <Grid item xs={12}>\n                                        <IntegerPluginField field={field as IntegerField}\n                                                            setPluginSetting={setPluginSetting}/>\n\n                                    </Grid>\n                                );\n                            case \"string\" :\n                                return (\n                                    <Grid item xs={12}>\n                                        <StringPluginField field={field as StringField}\n                                                           setPluginSetting={setPluginSetting}/>\n                                    </Grid>\n                                );\n                            case \"float\" :\n                                return (\n                                    <Grid item xs={12}>\n                                        <FloatPluginField field={field as FloatField}\n                                                          setPluginSetting={setPluginSetting}/>\n                                    </Grid>\n                                );\n                            case \"group\" :\n                                return (\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            fullWidth\n                                            label={field.label}\n                                        />\n                                    </Grid>\n                                );\n                            case \"separator\" :\n                                return (\n                                    <Grid item xs={12}>\n                                        <SeparatorPluginField label={field.label}/>\n                                    </Grid>\n                                );\n                            case \"boolean\" :\n                                return (\n                                    <Grid item xs={12}>\n                                        <BooleanPluginField field={field as BooleanField}\n                                                            setPluginSetting={setPluginSetting}/>\n                                    </Grid>\n                                );\n                        }\n                    })}\n                </Grid>\n            </Box>\n            :\n            <Box/>\n    );\n});\n\nexport default withStyles(styles)(PluginInput);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 30.11.2020, 22:45\n * All rights reserved.\n */\n\nimport {createStyles, fade, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    dialog: {\n        minWidth: 800,\n        [theme.breakpoints.down(\"sm\")]: {\n            minWidth: 500,\n        },\n        [theme.breakpoints.down(\"xs\")]: {\n            minWidth: 300,\n        },\n    },\n    search: {\n        position: \"relative\",\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        \"&:hover\": {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: \"100%\",\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: \"100%\",\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    inputRoot: {\n        color: \"inherit\",\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create(\"width\"),\n        width: \"100%\",\n        [theme.breakpoints.up(\"sm\")]: {\n            width: \"24ch\",\n        },\n    },\n    paddingNoneBottom: {\n        paddingBottom: 0,\n    },\n    loading: {\n        display: \"flex\",\n        height: \"90vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    notFound: {\n        display: \"flex\",\n        width: \"100%\",\n        height: 220,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    pluginContainer: {\n        maxHeight: 220,\n        overflow: \"auto\"\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 30.11.2020, 22:45\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogTitle,\n    Grid,\n    IconButton,\n    InputBase,\n    List,\n    ListItem,\n    Typography,\n    withStyles,\n} from \"@material-ui/core\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport useEnqueueErrorSnackbar from \"../../../../utils/enqueueErrorSnackbar\";\nimport useAuth from \"../../../../hooks/useAuth\";\nimport useCoreRequest from \"../../../../hooks/useCoreRequest\";\nimport Plugin from \"../../../../interfaces/Plugin\";\nimport Loading from \"../../../../components/Loading/Loading\";\nimport PluginPreview from \"../../../../interfaces/PluginPreview\";\nimport ErrorHandler from \"../../../../utils/ErrorHandler\";\n\ninterface DialogPluginProps extends Stylable {\n    open: boolean;\n    organizationId: number;\n\n    onClose(): void;\n\n    getPlugin(plugin: PluginPreview): void;\n}\n\n\nconst DialogPlugin = React.forwardRef((props: DialogPluginProps, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n        open,\n        onClose,\n        getPlugin,\n        organizationId\n    } = props;\n\n    const {logout} = useAuth();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const {getUser} = useAuth();\n    const coreRequest = useCoreRequest();\n\n\n    const [loaded, setLoaded] = useState<boolean>(false);\n    const [plugins, setPlugins] = useState<Plugin[]>([]);\n    const [chosenPlugin, setChosenPlugin] = useState<PluginPreview | null>(null);\n    const [searchValue, setSearchValue] = useState(\"\");\n    const [filterPlugins, setFilterPlugins] = useState<Plugin[]>([]);\n\n\n    useEffect(() => {\n        setFilterPlugins(plugins.filter(plugin => plugin.name.toLowerCase().includes(searchValue)));\n    }, [searchValue]);\n\n    useEffect(() => {\n        handleGetPlugins().then();\n    }, [organizationId])\n\n    useEffect(() => {\n        Promise.all([\n            handleGetPlugins(),\n        ]).then(() => {\n            setLoaded(true);\n        });\n    }, []);\n\n\n    async function handleGetPlugins() {\n        const id = getUser()?.id;\n        try {\n            const userOrganizations = await coreRequest().get(`users/${id}/organizations`);\n            const response = await coreRequest().get(\"plugins\").query({organization: organizationId});\n            setPlugins(response.body);\n            setFilterPlugins(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {logout()})\n                .on(404, \"No organization found\")\n                .handle(err);\n        }\n    }\n\n    const handleGetPlugin = (pluginId: number) => {\n        coreRequest()\n            .get(`plugins/${pluginId}/preview`)\n            .then(response => {\n                setChosenPlugin(response.body);\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(401, () => {logout()})\n                    .on(404, \"Plugin not found\")\n                    .handle(err);\n            });\n    };\n\n    function handleOnClose() {\n        onClose();\n    }\n\n    function handleSearch(event: React.ChangeEvent<HTMLInputElement>) {\n        setSearchValue(event.target.value.toLowerCase());\n    }\n\n    function handleSubmit() {\n        if (chosenPlugin) {\n            getPlugin(chosenPlugin);\n        }\n        onClose();\n    }\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleOnClose}\n            maxWidth={false}\n        >\n            {loaded ?\n                <Box className={classes.dialog}>\n                    <DialogTitle className={classes.paddingNoneBottom}>\n                        Select Plugin\n                    </DialogTitle>\n\n                    <List>\n\n                        <Grid container>\n                            <Grid item xs={5}>\n                                <ListItem className={classes.paddingNoneBottom}>\n                                    <Box className={classes.search}>\n                                        <Box className={classes.searchIcon}>\n                                            <SearchIcon/>\n                                        </Box>\n                                        <InputBase\n                                            onChange={handleSearch}\n                                            placeholder=\"Search…\"\n                                            classes={{\n                                                root: classes.inputRoot,\n                                                input: classes.inputInput,\n                                            }}\n                                            inputProps={{\"aria-label\": \"search\"}}\n                                        />\n                                    </Box>\n                                    <IconButton style={{padding: 8}}>\n                                        <CloseIcon/>\n                                    </IconButton>\n                                </ListItem>\n                                <Grid container className={classes.pluginContainer}>\n                                    {filterPlugins.length !== 0 ? filterPlugins.map(plugin => {\n                                            return (\n                                                <Grid item xs={12} key={plugin.id}>\n                                                    <ListItem\n                                                        button\n                                                        onClick={() => handleGetPlugin(plugin.id)}\n                                                    >\n                                                        {plugin.name}\n                                                    </ListItem>\n                                                </Grid>\n                                            );\n                                        }) :\n                                        <Box className={classes.notFound}>\n                                            <Typography variant=\"h5\" color=\"textSecondary\">\n                                                No plugins found\n                                            </Typography>\n                                        </Box>\n                                    }\n                                </Grid>\n                            </Grid>\n                            <Grid item xs={7}>\n                                {chosenPlugin ?\n                                    <Box>\n                                        <Typography variant=\"h6\">\n                                            name: {chosenPlugin.name}\n                                        </Typography>\n                                        <Typography variant=\"h6\">\n                                            version: {chosenPlugin.version}\n                                        </Typography>\n                                        <Typography variant=\"h6\">\n                                            description: {chosenPlugin.description}\n                                        </Typography>\n                                        <Typography variant=\"h6\">\n                                            note: {chosenPlugin.note}\n                                        </Typography>\n                                        <Typography variant=\"h6\">\n                                            readme: {chosenPlugin.readme}\n                                        </Typography>\n                                    </Box>\n\n                                    :\n                                    <Typography variant=\"h6\">\n                                        No plugin selected\n                                    </Typography>\n                                }\n\n                            </Grid>\n\n                            <Button fullWidth onClick={() => handleSubmit()}>\n                                Submit\n                            </Button>\n\n                        </Grid>\n\n                    </List>\n\n\n                </Box>\n                :\n                <Box className={classes.loading}>\n                    <Loading/>\n                </Box>\n            }\n        </Dialog>\n    );\n});\n\nexport default withStyles(styles)(DialogPlugin);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 19.12.2020, 17:27\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    title: {\n      textAlign: \"center\",\n        paddingBottom: 0,\n    },\n    dialogContainer: {\n        minWidth: 600,\n        [theme.breakpoints.down(\"sm\")]: {\n            minWidth: 450,\n        },\n        [theme.breakpoints.down(\"xs\")]: {\n            minWidth: 300,\n        },\n    },\n    addButton: {\n        margin: theme.spacing(2)\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project. \n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 19.12.2020, 17:28\n * All rights reserved.\n */\n\nimport React, {Ref, useState} from \"react\";\nimport {Button, Dialog, DialogTitle, List, ListItem, TextField, withStyles,} from \"@material-ui/core\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport validate from \"validate.js\";\nimport useEnqueueErrorSnackbar from \"../../../../utils/enqueueErrorSnackbar\";\n\ninterface DialogAddFrameRangeProps extends Stylable {\n    open: boolean;\n\n    onClose(): void;\n\n    onAddFrame(frame: FrameRange): void;\n\n}\n\ninterface ErrorValidation {\n    errorStart: boolean,\n    errorEnd: boolean,\n    errorStep: boolean,\n    errorRenumberStart: boolean,\n    errorRenumberStep: boolean,\n}\n\ninterface FrameRange {\n    start: number,\n    end: number,\n    step: number,\n    renumberStart: number,\n    renumberStep: number,\n}\n\nconst DialogAddFrameRange = React.forwardRef((props: DialogAddFrameRangeProps, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n        open,\n        onClose,\n        onAddFrame\n    } = props;\n\n\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n\n\n    const [frame, setFrame] = useState<FrameRange>({\n        start: 0,\n        end: 10,\n        step: 1,\n        renumberStart: 0,\n        renumberStep: 1,\n    });\n    const [errors, setErrors] = useState<ErrorValidation>({\n        errorStart: false,\n        errorEnd: false,\n        errorStep: false,\n        errorRenumberStart: false,\n        errorRenumberStep: false,\n    });\n\n\n    const handleAddFrame = () => {\n        if(!errors.errorStart && !errors.errorEnd && !errors.errorStep && !errors.errorRenumberStart && !errors.errorRenumberStep) {\n            onAddFrame(frame);\n            onClose();\n        } else {\n            enqueueErrorSnackbar(\"Invalid Input\");\n        }\n    };\n\n    const handleChangeFrame = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.persist();\n        if (validate.isInteger(+event.target.value)) {\n            setFrame((prev) => ({...prev, [event.target.name]: +event.target.value}));\n        }\n    };\n\n    const handleValidation = (event: React.FocusEvent<HTMLInputElement>) => {\n        if (event.target.name === \"start\") {\n            if (frame.start < 0) {\n                setErrors(prev => ({\n                    ...prev, \"errorStart\": true\n                }));\n\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"errorStart\": false\n                }));\n            }\n        }\n        if (event.target.name === \"end\") {\n            if (frame.end < 0) {\n                setErrors(prev => ({\n                    ...prev, \"errorEnd\": true\n                }));\n\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"errorEnd\": false\n                }));\n            }\n        }\n        if (event.target.name === \"step\") {\n            if (frame.step <= 0) {\n                setErrors(prev => ({\n                    ...prev, \"errorStep\": true\n                }));\n\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"errorStep\": false\n                }));\n            }\n        }\n        if (event.target.name === \"renumberStart\") {\n            if (frame.renumberStart < 0) {\n                setErrors(prev => ({\n                    ...prev, \"errorRenumberStart\": true\n                }));\n\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"errorRenumberStart\": false\n                }));\n            }\n        }\n        if (event.target.name === \"renumberStep\") {\n            if (frame.renumberStep <= 0) {\n                setErrors(prev => ({\n                    ...prev, \"errorRenumberStep\": true\n                }));\n\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"errorRenumberStep\": false\n                }));\n            }\n        }\n        if (event.target.name === \"start\" || event.target.name === \"end\") {\n            if (frame.start > frame.end) {\n                setErrors(prev => ({\n                    ...prev, \"errorStart\": true, \"errorEnd\": true,\n                }));\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"errorStart\": false, \"errorEnd\": false,\n                }));\n            }\n        }\n    };\n\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            maxWidth={false}\n        >\n            <DialogTitle className={classes.title}>\n                Frame range\n            </DialogTitle>\n\n            <List className={classes.dialogContainer}>\n                <ListItem>\n                    <TextField\n                        error={errors.errorStart}\n                        fullWidth\n                        label=\"Frame start\"\n                        name=\"start\"\n                        value={frame.start}\n                        onChange={handleChangeFrame}\n                        onBlur={handleValidation}\n                    />\n                </ListItem>\n                <ListItem>\n                    <TextField\n                        error={errors.errorEnd}\n                        fullWidth\n                        label=\"Frame end\"\n                        name=\"end\"\n                        value={frame.end}\n                        onChange={handleChangeFrame}\n                        onBlur={handleValidation}\n                    />\n                </ListItem>\n                <ListItem>\n                    <TextField\n                        error={errors.errorStep}\n                        fullWidth\n                        label=\"Step\"\n                        name=\"step\"\n                        value={frame.step}\n                        onChange={handleChangeFrame}\n                        onBlur={handleValidation}\n                    />\n                </ListItem>\n                <ListItem>\n                    <TextField\n                        error={errors.errorRenumberStart}\n                        fullWidth\n                        label=\"Renumber Start\"\n                        name=\"renumberStart\"\n                        value={frame.renumberStart}\n                        onChange={handleChangeFrame}\n                        onBlur={handleValidation}\n                    />\n                </ListItem>\n                <ListItem>\n                    <TextField\n                        error={errors.errorRenumberStep}\n                        fullWidth\n                        label=\"Renumber step\"\n                        name=\"renumberStep\"\n                        value={frame.renumberStep}\n                        onChange={handleChangeFrame}\n                        onBlur={handleValidation}\n                    />\n                </ListItem>\n            </List>\n\n            <Button\n                className={classes.addButton}\n                onClick={handleAddFrame}\n                variant=\"outlined\"\n            >\n                Add Frame range\n            </Button>\n\n        </Dialog>\n    );\n});\n\nexport default withStyles(styles)(DialogAddFrameRange);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 11.11.2020, 18:01\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {\n    Box,\n    Button,\n    Chip,\n    Grid,\n    IconButton,\n    InputLabel,\n    List,\n    ListItem,\n    ListItemText,\n    MenuItem,\n    Select,\n    TextField,\n    Typography,\n    useMediaQuery,\n    withStyles,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport styles from \"./styles\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport useAuth from \"../../hooks/useAuth\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\nimport useEnqueueSuccessSnackbar from \"../../utils/EnqueSuccessSnackbar\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\nimport Loading from \"../../components/Loading\";\nimport Organization from \"../../interfaces/Organization\";\nimport Plugin from \"../../interfaces/Plugin\";\nimport PluginInput from \"./LocalComponents/PluginInput\";\nimport PluginPreview from \"../../interfaces/PluginPreview\";\nimport DialogPlugin from \"./LocalComponents/DialogPlugin\";\nimport {IntegerField, PluginSetting} from \"@atlasrender/render-plugin\";\nimport validate from \"validate.js\";\nimport {useChangeRoute} from \"routing-manager\";\nimport ErrorHandler from \"../../utils/ErrorHandler\";\nimport DialogAddFrameRange from \"./LocalComponents/DialogAddFrameRange\";\n\n/**\n * SubmitPagePropsStyled - interface for SubmitPageView function\n * @interface\n * @author Nikita Nesterov\n */\ninterface SubmitPagePropsStyled extends Stylable {\n\n}\n\ninterface FrameRange {\n    start: number,\n    end: number,\n    step: number,\n    renumberStart: number,\n    renumberStep: number,\n}\n\ninterface Job {\n    name: string,\n    user: string,\n    description: string,\n    organization: number,\n    frameRange: FrameRange[],\n    attempts_per_task_limit: number,\n    plugin: number | undefined,\n    pluginSettings: object,\n}\n\ninterface ErrorValidation {\n    errorName: boolean,\n    errorAttempts: boolean,\n    errorDescription: boolean,\n    noInputError: boolean,\n}\n\n/**\n * SubmitPageView - function for displaying Submit page\n * @function\n * @author Nikita Nesterov\n */\nconst SubmitPageView = React.forwardRef((props: SubmitPagePropsStyled, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n    } = props;\n\n\n    const {logout} = useAuth();\n    const enqueueSuccessSnackbar = useEnqueueSuccessSnackbar();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const {getUser} = useAuth();\n    const {changeRoute} = useChangeRoute();\n    const coreRequest = useCoreRequest();\n\n\n    const user = getUser();\n    const [userOrgs, setUserOrgs] = useState<Organization[]>([]);\n    const [loaded, setLoaded] = useState<boolean>(false);\n    const [org, setOrg] = useState<string>();\n    const [frame, setFrame] = useState<FrameRange>({\n        start: 0,\n        end: 10,\n        step: 1,\n        renumberStart: 0,\n        renumberStep: 1,\n    });\n    const [frameRange, setFrameRange] = useState<FrameRange[]>([]);\n    const [job, setJob] = useState<Job>({\n        name: \"\",\n        user: user ? user.username : \"\",\n        description: \"\",\n        organization: userOrgs[0]?.id,\n        frameRange: [],\n        attempts_per_task_limit: 1,\n        plugin: undefined,\n        pluginSettings: {},\n    });\n    const [plugins, setPlugins] = useState<Plugin[]>([]);\n    const [chosenPluginName, setChosenPluginName] = useState<string>(\"\");\n    const [chosenPlugin, setChosenPlugin] = useState<PluginPreview | null>(null);\n    const [openDialog, setOpenDialog] = useState(false);\n    const [openAddFrameDialog, setOpenAddFrameDialog] = useState(false);\n    const [errors, setErrors] = useState<ErrorValidation>({\n        errorName: false,\n        errorAttempts: false,\n        errorDescription: false,\n        noInputError: false,\n    });\n\n\n    useEffect(() => {\n        Promise.all([\n            handleGetUser(),\n            handleGetPlugins(),\n        ]).then(() => {\n            setLoaded(true);\n        });\n    }, []);\n\n    useEffect(() => {\n        //uncomment when frame range as object will be ready\n        setJob((prev) => ({...prev, [\"frameRange\"]: frameRange}));\n        // console.log(job.frameRange);\n    }, [frameRange]);\n\n    useEffect(() => {\n        handleGetPlugins().then();\n    }, [job])\n\n    useEffect(() => {\n        setJob((prev) => ({...prev, organization: userOrgs[0]?.id}));\n    }, [userOrgs]);\n\n    useEffect(() => {\n        setJob((prev) => ({...prev, plugin: chosenPlugin?.id}));\n    }, [chosenPlugin]);\n\n    function setPluginSetting(field: PluginSetting, value: number | string | boolean | null ) {\n        setJob((prev) => ({...prev, pluginSettings: {...prev.pluginSettings, [field.name]: value}}));\n        console.log(\"plugin setting\", job.pluginSettings);\n    }\n\n\n    /**\n     * handleGetUser - function for taking info about authorized user\n     * @function\n     * @author Nikita Nesterov\n     */\n    async function handleGetUser() {\n        const id = getUser()?.id;\n        try {\n            const response = await coreRequest().get(`users/${id}/organizations`);\n            // setUserData(response.body);\n            // const defaultUserOrgId = userData?.organizations[0].id;\n            // const orgResponse = await coreRequest().get(`organizations/${defaultUserOrgId}`);\n            setOrg(response.body[0].name);\n            setUserOrgs(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {\n                    logout();\n                })\n                .on(404, \"User not found\")\n                .handle(err);\n        }\n    }\n\n    async function handleGetPlugins() {\n        const id = getUser()?.id;\n        try {\n            const userOrganizations = await coreRequest().get(`users/${id}/organizations`);\n            const response = await coreRequest().get(\"plugins\").query({organization: userOrganizations.body[0].id});\n            setPlugins(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {\n                    logout();\n                })\n                .on(404, \"Organization not found\")\n                .handle(err);\n        }\n    }\n\n    const handleGetPlugin = (pluginId: number) => {\n        coreRequest()\n            .get(`plugins/${pluginId}/preview`)\n            .then(response => {\n                console.log(response.body);\n                setChosenPlugin(response.body);\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(404, \"Plugin not found\")\n                    .handle(err);\n            });\n    };\n\n    const handleChangePlugin = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setChosenPluginName(event.target.value);\n        const plugin = plugins.filter(item => item.name === event.target.value);\n        handleGetPlugin(plugin[0].id);\n    };\n\n    function handleJobParametersChange(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist();\n        // console.log(\"frame change\", validate.isInteger(+event.target.value));\n        if (validate.isInteger(+event.target.value)) {\n            if (event.target.name === \"attempts_per_task_limit\") {\n                setJob((prev) => ({...prev, [event.target.name]: +event.target.value}));\n                return;\n            } else if (event) {\n                setFrame((prev) => ({...prev, [event.target.name]: +event.target.value}));\n            }\n        }\n    }\n\n    function handleOrgChange(item: any) {\n        setOrg(item.name);\n        setJob((prev) => ({...prev, organization: item.id}));\n        console.log(org);\n    }\n\n    function handleGetChosenPlugin(plugin: PluginPreview) {\n        setChosenPlugin(plugin);\n    }\n\n    /**\n     * handleInput - used for writing info from TextFields(name, description) to job state\n     * @function\n     * @author Nikita Nesterov\n     * @params event\n     */\n    function handleInput(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist();\n        setJob(prev => ({...prev, [event.target.name]: event.target.value}));\n    }\n\n    console.log(job);\n\n    function handleSubmission() {\n        if (!errors.noInputError && !errors.errorName && !errors.errorDescription && !errors.errorAttempts) {\n            coreRequest()\n                .post(\"jobs\")\n                .send(job)\n                .then(() => {\n                    enqueueSuccessSnackbar(\"successfully submitted\");\n                    changeRoute({page: \"jobs\"});\n                })\n                .catch(err => {\n                    const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                    errorHandler\n                        .on(400, \"Can not create job\")\n                        .on(401, () => {\n                            logout();\n                        })\n                        .on(404, \"Plugin with selected not found\")\n                        .on(409, \"Unavailable to queue job\")\n                        .on(503, \"Internal server error. Please, visit this resource later\")\n                        .handle(err);\n                });\n        } else {\n            enqueueErrorSnackbar(\"Invalid input\")\n        }\n    }\n\n    const handleDelete = (index: number) => {\n        const copyFrameRange = [...frameRange];\n        copyFrameRange.splice(index, 1);\n        setFrameRange(copyFrameRange);\n    };\n\n    const handleOpenDialog = () => {\n        setOpenDialog(true);\n    };\n\n    const handleCloseDialog = () => {\n        setOpenDialog(false);\n    };\n\n    const handleOpenAddFrameDialog = () => {\n        setOpenAddFrameDialog(true);\n    };\n\n    const handleCloseAddFrameDialog = () => {\n        setOpenAddFrameDialog(false);\n    };\n\n    const handleAddFrame = (frame: FrameRange) => {\n        setFrameRange(prev => ([...prev, frame]));\n    };\n\n    const handleValidation = (event: React.FocusEvent<HTMLInputElement>) => {\n        setErrors(prev => ({\n            ...prev, \"noInputError\": false\n        }));\n        if (event.target.name === \"name\") {\n            if (job.name.match(/[^A-Za-z0-9_ ]/) || !job.name || job.name.length < 3 || job.name.length > 100) {\n                setErrors(prev => ({\n                    ...prev, \"errorName\": true\n                }));\n\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"errorName\": false\n                }));\n            }\n        }\n        if (event.target.name === \"attempts_per_task_limit\") {\n            if (job.attempts_per_task_limit< 0) {\n                setErrors(prev => ({\n                    ...prev, \"errorAttempts\": true\n                }));\n\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"errorAttempts\": false\n                }));\n            }\n        }\n        if (event.target.name === \"description\") {\n            if (job.description.match(/[^A-Za-z0-9_ ]/) || job.description.length > 1000) {\n                setErrors(prev => ({\n                    ...prev, \"errorDescription\": true\n                }));\n\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"errorDescription\": false\n                }));\n            }\n        }\n    }\n\n    const matches = useMediaQuery(\"(min-width:800px)\");\n    let submitInfo;\n    let renderSettings;\n    let plugin;\n    let submitButton;\n    if (matches) {\n        submitInfo = (\n            <Grid container spacing={2}>\n                <Grid item xs={4}>\n                    <TextField\n                        error={errors.errorName}\n                        fullWidth\n                        name=\"name\"\n                        required\n                        label=\"Work title\"\n                        onChange={handleInput}\n                        onBlur={handleValidation}\n                    />\n                </Grid>\n                <Grid item xs={2}>\n                    <TextField\n                        error={errors.errorAttempts}\n                        fullWidth\n                        label=\"Attempts\"\n                        name=\"attempts_per_task_limit\"\n                        value={job.attempts_per_task_limit}\n                        onChange={handleJobParametersChange}\n                        onBlur={handleValidation}\n                    />\n                </Grid>\n                <Grid item xs={2}>\n                    <TextField\n                        fullWidth\n                        label=\"Priority\"\n                        name=\"priority\"\n                    />\n                </Grid>\n                <Grid item xs={4}>\n                    <InputLabel id=\"Organization\">Organization</InputLabel>\n                    <Select\n                        value={org}\n                        fullWidth\n                        labelId=\"Organization\"\n                        required\n                    >\n                        {userOrgs.map((item) => {\n                            return (\n                                <MenuItem\n                                    key={item.id}\n                                    value={item.name}\n                                    onClick={() => handleOrgChange(item)}\n                                >\n                                    {item.name}\n                                </MenuItem>\n                            );\n                        })}\n                    </Select>\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        error={errors.errorDescription}\n                        fullWidth\n                        InputLabelProps={{shrink: true}}\n                        label=\"Description\"\n                        name=\"description\"\n                        value={job.description}\n                        onChange={handleInput}\n                        onBlur={handleValidation}\n                    />\n                </Grid>\n            </Grid>\n        );\n        renderSettings = (\n            <React.Fragment>\n                <Grid item xs={10}>\n                    <Button\n                        onClick={handleOpenAddFrameDialog}\n                        fullWidth\n                        variant=\"outlined\"\n                    >\n                        Add new frame range\n                    </Button>\n                </Grid>\n                <DialogAddFrameRange\n                    open={openAddFrameDialog}\n                    onClose={handleCloseAddFrameDialog}\n                    onAddFrame={handleAddFrame}\n                />\n            </React.Fragment>\n        );\n        plugin = (\n            <React.Fragment>\n                <Grid item xs={8} className={classes.flexItem}>\n\n                    <Button\n                        fullWidth\n                        variant=\"outlined\"\n                        onClick={handleOpenDialog}\n                    >\n                        Select Plugin\n                    </Button>\n\n                    <DialogPlugin\n                        open={openDialog}\n                        onClose={handleCloseDialog}\n                        getPlugin={handleGetChosenPlugin}\n                        organizationId={job.organization}\n                    />\n\n                </Grid>\n                <Grid item xs={2}>\n                    <Select value=\"1.01\" fullWidth>\n                        <MenuItem value=\"1.01\">\n                            1.01\n                        </MenuItem>\n                    </Select>\n                </Grid>\n            </React.Fragment>\n        );\n        submitButton = (\n            <Grid item xs={10}>\n                <Grid container spacing={2} className={classes.flexItem}>\n                    <Grid item xs={9}/>\n                    <Grid item xs={3}>\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            className={classes.submitButton}\n                            onClick={() => handleSubmission()}\n                        >\n                            Submit\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    } else {\n        submitInfo = (\n            <React.Fragment>\n                <Grid item xs={10}>\n                    <TextField fullWidth label=\"Work title\"/>\n                </Grid>\n                <Grid item xs={10}>\n                    <TextField fullWidth label=\"Submitter\"/>\n                </Grid>\n                <Grid item xs={10}>\n                    <Select value=\"pathfinder monitor\" fullWidth className={classes.selectMargin}>\n                        <MenuItem value=\"pathfinder monitor\">Pathfinder Monitor</MenuItem>\n                        <MenuItem value=\"pathfinder core\">Pathfinder Core</MenuItem>\n                        <MenuItem value=\"pathfinder slave\">Pathfinder Slave</MenuItem>\n                    </Select>\n                </Grid>\n            </React.Fragment>\n        );\n        renderSettings = (\n            <React.Fragment>\n                <Grid item xs={5}>\n                    <TextField fullWidth label=\"Frame start\"/>\n                </Grid>\n                <Grid item xs={5}>\n                    <TextField fullWidth label=\"Frame end\"/>\n                </Grid>\n                <Grid item xs={5}>\n                    <TextField fullWidth label=\"Step\"/>\n                </Grid>\n                <Grid item xs={5}>\n                    <TextField fullWidth label=\"Start from\"/>\n                </Grid>\n                <Grid item xs={5}>\n                    <TextField fullWidth label=\"Renum step\"/>\n                </Grid>\n                <Grid item xs={5}>\n                    <TextField fullWidth label=\"Priority\"/>\n                </Grid>\n                <Grid item xs={10}>\n                    <Button variant=\"contained\" fullWidth className={classes.buttonAdd}>ADD</Button>\n                </Grid>\n            </React.Fragment>\n        );\n        plugin = (\n            <React.Fragment>\n                <Grid item xs={10} className={classes.flexItem}>\n                    {/*<Button fullWidth variant=\"contained\" color=\"primary\" onClick={handleOpenPopover}>*/}\n                    {/*    {chosenPlugin ? chosenPlugin.name : \"Choose Plugin\"}*/}\n                    {/*</Button>*/}\n                    {/*<Popover*/}\n                    {/*    open={open}*/}\n                    {/*    anchorEl={anchorEl}*/}\n                    {/*    onClose={handleClosePopover}*/}\n                    {/*    anchorOrigin={{*/}\n                    {/*        vertical: \"bottom\",*/}\n                    {/*        horizontal: \"left\",*/}\n                    {/*    }}*/}\n                    {/*    transformOrigin={{*/}\n                    {/*        vertical: \"top\",*/}\n                    {/*        horizontal: \"left\",*/}\n                    {/*    }}*/}\n                    {/*>*/}\n                    {/*    <List>*/}\n                    {/*        {plugins.map((plugin) => {*/}\n                    {/*            return (*/}\n                    {/*                <ListItem*/}\n                    {/*                    button*/}\n                    {/*                    key={plugin.id}*/}\n                    {/*                >*/}\n                    {/*                    <Grid container spacing={2}>*/}\n                    {/*                        <Grid item xs={4}>*/}\n                    {/*                            {plugin.name}*/}\n                    {/*                        </Grid>*/}\n                    {/*                        <Grid item xs={8}>*/}\n                    {/*                            {plugin.description}*/}\n                    {/*                        </Grid>*/}\n                    {/*                    </Grid>*/}\n                    {/*                </ListItem>*/}\n                    {/*            );*/}\n                    {/*        })}*/}\n                    {/*    </List>*/}\n                    {/*</Popover>*/}\n                </Grid>\n                <Grid item xs={10}>\n                    <Select value=\"1.01\" fullWidth>\n                        <MenuItem value=\"1.01\">\n                            1.01\n                        </MenuItem>\n                    </Select>\n                </Grid>\n            </React.Fragment>\n        );\n        submitButton = (\n            <React.Fragment>\n                <Grid item xs={10} className={classes.flexItem}>\n                    <Button fullWidth variant=\"contained\" className={classes.submitButton}>Submit</Button>\n                </Grid>\n            </React.Fragment>\n        );\n    }\n\n    const field: IntegerField = new IntegerField({\n        type: \"integer\",\n        name: \"samples\",\n        label: \"Samples\",\n        min: 100,\n        max: 120,\n        default: 115\n    });\n\n    return (\n        loaded ?\n            <Box className={className} style={style}>\n                <Grid container spacing={2} className={classes.container}>\n                    <Grid item xs={10}>\n                        <Typography variant=\"h6\">Submit info</Typography>\n                    </Grid>\n                    <Grid item xs={10}>\n                        {submitInfo}\n                    </Grid>\n                    <Grid item xs={10} className={classes.flexItem}>\n                        <List disablePadding className={classes.fullWidth}>\n                            <ListItem disableGutters>\n                                <ListItemText\n                                    primary={<Typography variant=\"h6\">Render settings</Typography>}\n                                />\n                                {/*<ListItemSecondaryAction>*/}\n                                {/*    <IconButton><AddIcon/></IconButton>*/}\n                                {/*</ListItemSecondaryAction>*/}\n                            </ListItem>\n                        </List>\n                    </Grid>\n\n                    {renderSettings}\n\n                    <Grid item xs={10} className={classes.flexItem}>\n                        <Box>\n                            {frameRange.map((frame, index) => {\n                                return (\n                                    <Chip\n                                        key={index}\n                                        label={`${frame.start}-${frame.end} ${frame.step} from ${frame.renumberStart} with ${frame.renumberStep}`}\n                                        onDelete={() => handleDelete(index)}\n                                        className={classes.chipStyle}\n                                    />\n                                );\n                            })}\n                        </Box>\n                    </Grid>\n                    <Grid item xs={10}>\n                        <Typography variant=\"h6\">Plugin</Typography>\n                    </Grid>\n\n\n                    {plugin}\n\n                    <Grid item xs={10}>\n                        {chosenPlugin &&\n                        <PluginInput pluginId={chosenPlugin.id} setPluginSetting={setPluginSetting}/>\n                        }\n                    </Grid>\n\n\n                    {submitButton}\n\n\n                </Grid>\n\n                {/*<Container maxWidth={\"md\"}>*/}\n                {/*    <IntegerPluginField field={field}/>*/}\n                {/*</Container>*/}\n            </Box>\n            :\n            <Box className={classes.loading}>\n                <Loading/>\n            </Box>\n    );\n});\n\nexport default withStyles(styles)(SubmitPageView);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nconst styles = (theme: Theme) => createStyles({\n    container: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        flexGrow: 1,\n        height: theme.spacing(25),\n        width: theme.spacing(25),\n    },\n    sidePaddingsNone: {\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n    sidePaddings: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n    },\n    paddingNone: {\n        paddingLeft: 0,\n        paddingBottom: 0,\n    },\n    listHeader: {\n        paddingBottom: 0,\n    },\n    divider: {\n        marginBottom: theme.spacing(2),\n    },\n    colorBar: {\n        width: 4,\n        height: theme.spacing(7),\n    },\n    minWidthList: {\n        minWidth: 320,\n    },\n    button: {\n        backgroundColor: grey[800],\n\n    },\n    emptyRolesList:{\n        margin: theme.spacing(2,2,2,2),\n    }\n\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {\n    Avatar,\n    Box,\n    Button,\n    Chip,\n    Dialog,\n    DialogTitle,\n    Divider,\n    Grid,\n    IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    TextField,\n    Typography,\n    useMediaQuery,\n    useTheme,\n    withStyles,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport clsx from \"clsx\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport DialogAddRoles from \"../OrganizationPageView/LocalComponents/DialogAddRoles/DialogAddRoles\";\nimport Role from \"../../interfaces/Role\";\nimport {useChangeRoute} from \"routing-manager\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport useConfirm from \"../../hooks/useConfirm\";\nimport UserData from \"../../interfaces/UserData\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\nimport useAuth from \"../../hooks/useAuth\";\nimport ErrorHandler from \"../../utils/ErrorHandler\";\nimport useEnqueueSuccessSnackbar from \"../../utils/EnqueSuccessSnackbar\";\nimport DialogAddUsers from \"../OrganizationPageView/LocalComponents/DialogAddUsers\";\nimport DemoRole from \"../../interfaces/DemoRole\";\nimport {yellow} from \"@material-ui/core/colors\";\n\n\ninterface CreateOrganizationPageProps extends Stylable {\n\n}\n\nconst CreateOrganizationPageView = React.forwardRef((props: CreateOrganizationPageProps, ref: Ref<any>) => {\n    const {\n        style,\n        className,\n        classes,\n    } = props;\n\n\n    const {logout} = useAuth();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const enqueueSuccessSnackbar = useEnqueueSuccessSnackbar();\n    const {getRouteParams, changeRoute} = useChangeRoute();\n    const coreRequest = useCoreRequest();\n    const {getUser} = useAuth();\n    const confirm = useConfirm();\n\n\n    const [addRoleButton, setAddRoleButton] = useState<boolean>(false);\n    const [modify, setModify] = useState<boolean>(false);\n    const [name, setName] = useState<string>();\n    const [description, setDescription] = useState<string>();\n    const [errors, setErrors] = useState({\n        nameError: false,\n        nameMessage: \"\",\n        descriptionError: false,\n        descriptionMessage: \"\",\n    });\n\n    const [defaultRole, setDefaultRole] = useState<DemoRole>({\n        id: -1,\n        name: \"user\",\n        description: \"Default user role.\",\n        color: \"090\",\n        permissionLevel: 0,\n        canManageUsers: false,\n        canManageRoles: false,\n        canCreateJobs: true,\n        canDeleteJobs: false,\n        canEditJobs: false,\n        canManagePlugins: true,\n        canManageTeams: true,\n        canEditAudit: true,\n    });\n\n    const [owner, setOwner] = useState<UserData>();\n    const [roles, setRoles] = useState<DemoRole[]>([]);\n    const [roleToModify, setRoleToModify] = useState<DemoRole>();\n    const [users, setUsers] = useState<UserData[]>([]);\n    const [members, setMembers] = useState<UserData[]>([]);\n    const [addMemberButton, setAddMemberButton] = useState<boolean>(false);\n    const [defaultRoleId, setDefaultRoleId] = useState<number>(defaultRole.id);\n    const [isDefault, setIsDefault] = useState<boolean>(false);\n\n    useEffect(() => {\n        setDefaultRoleId(defaultRole.id);\n    }, [defaultRole]);\n\n\n    //For dialog-----------------------------------------------------------------------------------------\n    const [newUsers, setNewUsers] = useState<number[]>([]);\n    const [availableUsers, setAvailableUsers] = useState<UserData[]>([]);\n\n\n    function handleNewUsersClick(newUserId: number) {\n        let newUsersArray = newUsers;\n        if (newUsers.includes(newUserId)) {\n            newUsersArray = newUsersArray.filter(userId => userId !== newUserId);\n            setNewUsers(newUsersArray);\n        } else {\n            setNewUsers([...newUsers, newUserId]);\n        }\n    }\n\n    function handleAddUser(usersToAddId: number[]) {\n        for (let i = 0; i < usersToAddId.length; i++) {\n            const newMember = users.filter(user => user.id === usersToAddId[i]);\n            if (newMember[0].id !== owner?.id) {\n                setMembers(prev => ([...prev, newMember[0]]));\n            }\n        }\n        setAddMemberButton(!addMemberButton);\n        setNewUsers([]);\n    }\n\n    function handleGetAvailableUsers() {\n        let availableMembers: UserData[] = users;\n        availableMembers = availableMembers.filter(user => user.id !== owner?.id);\n        for (let i = 0; i < members.length; i++) {\n            availableMembers = availableMembers.filter(user => (user.id !== members[i].id && user.id !== owner?.id));\n        }\n        setAvailableUsers(availableMembers);\n    }\n\n    const handleCloseDialogAddUser = () => {\n        setAddMemberButton(!addMemberButton);\n        setNewUsers([]);\n    };\n\n    useEffect(() => {\n        if (owner) {\n            handleGetAvailableUsers();\n        }\n    }, [owner]);\n\n    useEffect(() => {\n        handleGetAvailableUsers();\n    }, [members]);\n\n    //----------------------------------------------------------------------------------------------------\n\n\n    const theme = useTheme();\n    let info;\n\n    useEffect(() => {\n        addRole(defaultRole);\n    }, []);\n\n    function addRole(role: DemoRole) {\n        setAddRoleButton(false);\n        setRoles((prev) => ([...prev, role]));\n    }\n\n\n    function modifyRole(id: number, role: DemoRole, isDefault: boolean) {\n        console.log(\"new role id\", id);\n        setAddRoleButton(!addRoleButton);\n        if (isDefault) {\n            setDefaultRole(role);\n        }\n        setRoles((prev) => ([...prev.filter(elem => elem.id !== id)]));\n        setRoles((prev) => ([...prev, role]));\n        setModify(false);\n    }\n\n    function deleteRole(key: string) {\n        setRoles((prev) => ([...prev.filter(elem => elem.name !== key)]));\n    }\n\n    const handleInputName = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setName(event.target.value);\n    };\n\n    const handleInputDescription = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setDescription(event.target.value);\n    };\n\n    function errorHandler() {\n        if (name && name?.length <= 3) {\n            setErrors((prev) => ({...prev, nameError: true, nameMessage: \"Should be more than 3 symbols\"}));\n        } else if (name && name.length > 50) {\n            setErrors((prev) => ({...prev, nameError: true, nameMessage: \"Should be less than 50 symbols\"}));\n        } else {\n            setErrors((prev) => ({...prev, nameError: false, nameMessage: \"\"}));\n        }\n\n        if (description && description?.length <= 3) {\n            setErrors((prev) => ({\n                ...prev,\n                descriptionError: true,\n                descriptionMessage: \"Should be more than 3 symbols\"\n            }));\n        } else if (description && description.length > 50) {\n            setErrors((prev) => ({\n                ...prev,\n                descriptionError: true,\n                descriptionMessage: \"Should be less than 50 symbols\"\n            }));\n        } else {\n            setErrors((prev) => ({...prev, descriptionError: false, descriptionMessage: \"\"}));\n        }\n    }\n\n    function handleGetAllUsers() {\n        coreRequest()\n            .get(\"users\")\n            .then((response) => {\n                setUsers(response.body);\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(401, () => {\n                        logout();\n                    })\n                    .handle(err);\n            });\n    }\n\n    function handleGetOwner() {\n        //TODO if user is empty redirect to login page\n        const user = getUser();\n        coreRequest()\n            .get(`users/${user?.id}`)\n            .then((response) => {\n                setOwner(response.body);\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(401, () => {\n                        logout();\n                    })\n                    .handle(err);\n            });\n    }\n\n    function createOrg() {\n        console.log(\"roles\", roles);\n        const userIds = members.map((member) => member.id);\n        const filteredRoles = roles.filter(elem => elem.id !== defaultRole.id);\n        const sentRoles = filteredRoles.map((elem) => {\n            const {id, ...obj} = elem;\n            return obj;\n        });\n        const {id, ...defaultRoleToSent} = defaultRole;\n        console.log(sentRoles);\n        coreRequest()\n            .post(\"organizations\")\n            .send({\n                name: name,\n                description: description,\n                userIds: userIds,\n                roles: sentRoles,\n                defaultRole: defaultRoleToSent\n            })\n            .then((response) => {\n                enqueueSuccessSnackbar(\"Successfully created\");\n                changeRoute({page: \"organization\", id: response.body.organizationId});\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, \"Invalid input\")\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(409, \"Organization with this name already exists\")\n                    .handle(err);\n            });\n    }\n\n    useEffect(() => {\n        handleGetAllUsers();\n        handleGetOwner();\n    }, []);\n\n    info = (\n        <Grid container xs={12} md={12} spacing={2} style={{display: \"flex\", alignItems: \"flex-begin\"}}>\n            <Grid item xs={12} md={6}>\n                <TextField\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    label=\"Organization name\"\n                    onChange={handleInputName}\n                    error={errors.nameError}\n                    helperText={errors.nameMessage}\n                    onBlur={errorHandler}\n                />\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <TextField\n                    margin=\"normal\"\n                    fullWidth\n                    label=\"Description\"\n                    onChange={handleInputDescription}\n                    error={errors.descriptionError}\n                    helperText={errors.descriptionMessage}\n                    onBlur={errorHandler}\n                />\n            </Grid>\n        </Grid>\n    );\n\n    return (\n        <Grid container spacing={2} style={style} className={clsx(classes.container, classes.sidePaddings, className)}>\n            <Grid container justify=\"center\" direction=\"row\" alignItems=\"center\">\n                <IconButton><Avatar variant=\"circular\" src=\"/broken-image.jpg\" className={classes.avatar}/></IconButton>\n            </Grid>\n            {info}\n            <Grid item xs={12}>\n                <List>\n                    <ListItem className={clsx(classes.sidePaddingsNone, classes.listHeader)}>\n                        <ListItemText primary=\"Roles\" primaryTypographyProps={{variant: \"h6\"}}/>\n                        <IconButton\n                            onClick={() => {\n                                setAddRoleButton(!addRoleButton);\n                                setRoleToModify(undefined);\n                            }}\n                        >\n                            <AddIcon/>\n                        </IconButton>\n                    </ListItem>\n                    <Divider/>\n                    {roles.map((item) => {\n                        return (\n                            <ListItem key={item.id}>\n                                <ListItemAvatar style={{minWidth: 16}}>\n                                    <Box className={classes.colorBar}\n                                         style={{backgroundColor: `#${item.color}`}}/>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary={item.name}\n                                    secondary={item.description}\n                                    style={{color: defaultRole.id === item.id ? yellow[700] : undefined}}\n                                />\n                                <ListItemSecondaryAction>\n                                    <IconButton\n                                        edge=\"end\"\n                                        aria-label=\"edit\"\n                                        style={{marginRight: theme.spacing(0)}}\n                                        onClick={() => {\n                                            if (defaultRoleId === item.id) {\n                                                setIsDefault(true);\n                                            }\n                                            setModify(true);\n                                            setAddRoleButton(!addRoleButton);\n                                            setRoleToModify(item);\n                                        }}\n                                    >\n                                        <EditIcon/>\n                                    </IconButton>\n\n                                    <IconButton\n                                        edge=\"end\"\n                                        aria-label=\"delete\"\n                                        onClick={() => confirm(async () => deleteRole(item.name),\n                                            {title: `are you sure to delete role: ${item.name} ?`})}\n                                    >\n                                        <DeleteIcon/>\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        );\n                    })}\n                    {!roles.length &&\n                    <Box className={classes.emptyRolesList}>\n                        <Typography variant=\"body1\" align=\"center\">\n                            There are no roles. Please be aware that the default role will be created anyway\n                        </Typography>\n                    </Box>\n                    }\n                </List>\n\n                <DialogAddRoles\n                    open={addRoleButton}\n                    onClose={() => {\n                        setAddRoleButton(false);\n                    }}\n                    onExited={() => {\n                        setRoleToModify(undefined);\n                        setModify(false);\n                        setIsDefault(false);\n                    }}\n                    onAddRole={addRole}\n                    role={roleToModify}\n                    modify={modify}\n                    onModifyRole={modifyRole}\n                    isDefault={isDefault}\n                />\n\n                <List style={{marginTop: 16}}>\n                    <ListItem className={clsx(classes.sidePaddingsNone, classes.listHeader)}>\n                        <ListItemText primary={<Typography variant=\"h6\">Members</Typography>}/>\n                        <IconButton onClick={() => setAddMemberButton(!addMemberButton)}>\n                            <AddIcon/>\n                        </IconButton>\n                    </ListItem>\n                    <Divider className={classes.divider}/>\n                    <ListItem>\n                        <ListItemAvatar>\n                            <Avatar/>\n                        </ListItemAvatar>\n                        <ListItemText primary={owner?.username}/>\n                        <ListItemSecondaryAction>\n                            <Chip label=\"Owner\"/>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    {members.map(person => {\n                        return (\n                            <ListItem key={person.id}>\n                                <ListItemAvatar>\n                                    <Avatar/>\n                                </ListItemAvatar>\n                                <ListItemText primary={person.username}/>\n                                <ListItemSecondaryAction>\n                                    <IconButton\n                                        onClick={() => setMembers(prev => [...prev.filter(mem => person.id !== mem.id)])}\n                                    >\n                                        <DeleteIcon/>\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        );\n                    })}\n                </List>\n\n                <DialogAddUsers\n                    open={addMemberButton}\n                    onClose={handleCloseDialogAddUser}\n                    newUsers={newUsers}\n                    availableUsers={availableUsers}\n                    orgCreation={true}\n                    onNewUserClick={handleNewUsersClick}\n                    onAdduser={handleAddUser}\n                />\n            </Grid>\n\n            <Grid item xs={12} style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n                <Grid item xs={3}>\n                    <Button fullWidth onClick={createOrg}>\n                        Create\n                    </Button>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n});\n\nexport default withStyles(styles)(CreateOrganizationPageView);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 10.11.2020, 19:22\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    firstLine: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        listStyleType: \"none\",\n        [theme.breakpoints.down(\"sm\")]: {\n            paddingLeft: theme.spacing(2),\n            paddingRight: theme.spacing(2),\n        },\n    },\n    dangerZoneContainer: {\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n    },\n    dangerZoneButton: {\n        margin: theme.spacing(2, 0),\n    },\n    dangerZoneHeader: {\n        paddingBottom: 0,\n        color: theme.palette.error.dark,\n    },\n    dangerZoneDivider: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    avatar: {\n        variant: \"circle\",\n        height: theme.spacing(26),\n        width: theme.spacing(26),\n    },\n    avatarContainer: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginLeft: 16\n    },\n    userContainer: {\n        display: \"flex\",\n    },\n    editFieldsContainer: {\n        display: \"flex\",\n        flexGrow: 1,\n        flexDirection: \"column\",\n    },\n    editField: {\n        marginBottom: theme.spacing(2),\n    },\n    loading: {\n        display: \"flex\",\n        height: \"90vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 10.11.2020, 19:22\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport {Avatar, Box, Button, Divider, Grid, TextField, Typography, withStyles} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport useAuth from \"../../hooks/useAuth\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\nimport UserData from \"../../interfaces/UserData\";\nimport {useChangeRoute} from \"routing-manager\";\nimport {Route, Switch, useRouteMatch} from \"react-router-dom\";\nimport useConfirm from \"../../hooks/useConfirm\";\nimport Loading from \"../../components/Loading/Loading\";\nimport ErrorHandler from \"../../utils/ErrorHandler\";\n\n/**\n * UserEditViewProps - interface for UserEditView\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface UserEditViewProps extends Stylable {\n\n}\n\n/**\n * UserEditView - function for showing user page\n * @function\n * @author Andrii Demchyshyn\n */\nconst UserEditView = React.forwardRef((props: UserEditViewProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n    } = props;\n\n\n    const {getUser, logout} = useAuth();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const coreRequest = useCoreRequest();\n    const {changeRoute} = useChangeRoute();\n    const confirm = useConfirm();\n    let {path} = useRouteMatch();\n\n    const [user, setUser] = useState<UserData | null>(null);\n    const [editedUser, setEditedUser] = useState({\n        email: user?.email,\n        username: user?.username,\n        password: \"123456\"\n    });\n    const [loaded, setLoaded] = useState(false);\n\n\n    useEffect(() => {\n        Promise.all([\n            handleGetUser(),\n        ]).then(() => {\n            setLoaded(true);\n        });\n    }, []);\n\n    useEffect(() => {\n        setEditedUser({\n            email: user?.email,\n            username: user?.username,\n            password: \"123456\",\n        });\n    }, [user]);\n\n\n    function handleChangeUser(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist();\n        setEditedUser(prev => ({...prev, [event.target.name]: event.target.value}));\n    }\n\n    async function handleGetUser() {\n        const userId = getUser()?.id;\n        try {\n            const response = await coreRequest().get(`users/${userId}`);\n            setUser(response.body);\n        } catch (err) {\n            const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n            errorHandler\n                .on(401, () => {logout()})\n                .on(404, \"User not found\")\n                .handle(err);\n        }\n    }\n\n    function handleEditUser() {\n        const userId = getUser()?.id;\n        coreRequest()\n            .post(`users/${userId}`)\n            .send(editedUser)\n            .then(response => {\n                changeRoute({page: `user`});\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, \"Cant not edit user\")\n                    .on(401, () => {logout()})\n                    .on(403, \"Forbidden\")\n                    .on(404, \"User not found\")\n                    .on(409, \"Conflict user data\")\n                    .handle(err);\n            });\n    }\n\n    function handleDeleteUser() {\n        const userId = getUser()?.id;\n        coreRequest()\n            .delete(`users/${userId}`)\n            .send({password: \"123456\"})\n            .then(response => {\n                logout();\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, \"Cant not delete user\")\n                    .on(401, () => {logout()})\n                    .on(403, \"Forbidden\")\n                    .on(404, \"User not found\")\n                    .handle(err);\n            });\n    }\n\n    return (\n        loaded ?\n            <Switch>\n                <Route path={path}>\n                    <Grid container className={classes.firstLine} style={{marginTop: 16}}>\n                        <Grid item xs={10}>\n                            <Box className={classes.userContainer}>\n                                <Box className={classes.editFieldsContainer}>\n                                    <TextField\n                                        className={classes.editField}\n                                        fullWidth\n                                        required\n                                        label=\"Username\"\n                                        name=\"username\"\n                                        value={editedUser?.username}\n                                        variant=\"outlined\"\n                                        onChange={handleChangeUser}\n                                        InputLabelProps={{shrink: true}}\n                                    />\n\n                                    <TextField\n                                        className={classes.editField}\n                                        fullWidth\n                                        required\n                                        label=\"Email\"\n                                        name=\"email\"\n                                        value={editedUser?.email}\n                                        variant=\"outlined\"\n                                        onChange={handleChangeUser}\n                                        InputLabelProps={{shrink: true}}\n                                    />\n\n                                    <TextField\n                                        className={classes.editField}\n                                        fullWidth\n                                        required\n                                        id=\"standard-required\"\n                                        label=\"Department\"\n                                        defaultValue=\"Department\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{shrink: true}}\n                                    />\n                                </Box>\n                                <Box className={classes.avatarContainer}>\n                                    <Avatar\n                                        className={classes.avatar}\n                                        src=\"https://cdn.sportclub.ru/assets/2019-09-20/n97c311rvb.jpg\"\n                                    />\n                                </Box>\n                            </Box>\n\n                            <Box className={classes.dangerZoneHeader}>\n                                <Box className={classes.dangerZoneContainer}>\n                                    <Button\n                                        className={classes.dangerZoneButton}\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleEditUser}\n                                    >\n                                        Save changes\n                                    </Button>\n                                </Box>\n                            </Box>\n\n                            <Box className={classes.dangerZoneHeader}>\n                                <Typography variant=\"h6\">\n                                    Danger Zone\n                                </Typography>\n\n                                <Divider className={classes.dangerZoneDivider}/>\n\n                                <Box className={classes.dangerZoneContainer}>\n                                    <Button\n                                        className={classes.dangerZoneButton}\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        onClick={() => confirm(async () => handleDeleteUser(),\n                                            {title: `are you sure to delete user: ${user?.username} ?`})}\n                                    >\n                                        Delete User\n                                    </Button>\n                                </Box>\n\n                                <Divider className={classes.dangerZoneDivider}/>\n                            </Box>\n\n                        </Grid>\n                    </Grid>\n                </Route>\n            </Switch>\n            :\n            <Box className={classes.loading}>\n                <Loading/>\n            </Box>\n    );\n\n});\n\nexport default withStyles(styles)(UserEditView);","export default __webpack_public_path__ + \"static/media/AtlasSystemsLogo.f20a4b33.svg\";","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    firstLine: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        listStyleType: \"none\",\n        [theme.breakpoints.down(\"sm\")]: {\n            paddingLeft: theme.spacing(2),\n            paddingRight: theme.spacing(2),\n        },\n    },\n    paddingNone: {\n        paddingLeft: 0,\n        paddingBottom: 0,\n    },\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 18:37\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nconst styles = (theme: Theme) => createStyles({\n    dialogRoles: {\n        width: \"100%\",\n        textAlign: \"center\",\n        paddingBottom: theme.spacing(2),\n    },\n    gridPadding: {\n        marginBottom: theme.spacing(1),\n    },\n    dialogSize: {\n        width: \"100%\",\n        // [theme.breakpoints.down('xs')]: {\n        //     width: \"auto\",\n        // },\n    },\n    rootFolder: {\n        border: `1px solid ${grey[700]}`,\n        minHeight: 300,\n        padding: theme.spacing(1),\n    },\n\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 18.11.2020, 17:29\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport {grey} from \"@material-ui/core/colors\";\n\nconst styles = (theme: Theme) => createStyles({\n    container: {\n        padding: theme.spacing(1),\n        borderRadius: 2,\n        \"&:hover\": {\n            background: grey[800],\n        }\n    },\n    draggingContainer: {\n        padding: theme.spacing(1),\n        borderRadius: 2,\n        background: grey[800],\n    }\n\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 18.11.2020, 17:29\n * All rights reserved.\n */\n\nimport React from \"react\";\nimport {useDrag} from \"react-dnd\";\nimport {Avatar, ListItem, ListItemAvatar, ListItemText, withStyles} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport Stylable from \"../../../../../interfaces/Stylable\";\nimport TextFieldsIcon from \"@material-ui/icons/TextFields\";\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Filter1Icon from '@material-ui/icons/Filter1';\nimport FolderIcon from '@material-ui/icons/Folder';\n\ninterface DragableSubjectProps extends Stylable {\n    type: string;\n}\n\nconst DragableSubject: React.FC<DragableSubjectProps> = ({classes, className, style, type}) => {\n\n    const [{isDragging}, drag] = useDrag({\n        item: {type: type},\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        })\n    });\n\n    const opacity = isDragging ? 0.6 : 1;\n\n    return (\n        <ListItem ref={drag} className={classes.container} style={{opacity}}>\n            <ListItemAvatar>\n                <Avatar>\n                    {type === \"string\" &&\n                    <TextFieldsIcon/>\n                    }\n                    {type === \"separator\" &&\n                    <RemoveIcon/>\n                    }\n                    {type === \"boolean\" &&\n                    <CheckIcon/>\n                    }\n                    {(type === \"integer\" || type === \"float\") &&\n                    <Filter1Icon/>\n                    }\n                    {type === \"folder\" &&\n                    <FolderIcon/>\n                    }\n                </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={type}/>\n        </ListItem>\n    );\n};\n\nexport default withStyles(styles)(DragableSubject);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 18.11.2020, 18:14\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nconst styles = (theme: Theme) => createStyles({\n    folder: {\n        border: `1px solid ${grey[700]}`,\n        padding: theme.spacing(1, 1, 1, 1),\n        minHeight: 50,\n        width: \"100%\",\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 18:37\n * All rights reserved.\n */\n\n/**\n * BasicPluginField - interface for Basic Plugin Field\n * @interface\n * @author Andrii Demchyshyn\n */\nexport default class BasicPluginField {\n    /**\n     * id - unique value\n     */\n    public id: number;\n    /**\n     * type - field type\n     */\n    public type: string;\n    /**\n     * name - name of plugin field\n     */\n    public name: string;\n    /**\n     * label - visual name\n     */\n    public label: string;\n\n\n    constructor(field: any) {\n        this.id = field.id;\n        this.type = field.type;\n        this.name = field.name;\n        this.label = field.label;\n    }\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 18.11.2020, 16:39\n * All rights reserved.\n */\n\nimport BasicPluginField from \"./BasicPluginField\";\n\n\n/**\n * GroupField - interface for Folder Plugin Field\n * @interface\n * @author Andrii Demchyshyn\n */\nexport default class GroupField extends BasicPluginField {\n    /**\n     * nested - array inside of folder\n     */\n    public nested: BasicPluginField[];\n\n    constructor(field: any) {\n        super({id: field.id, type: field.type, name: field.name, label: field.label});\n\n        this.nested = field.nested;\n    }\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 18.11.2020, 16:36\n * All rights reserved.\n */\n\nimport BasicPluginField from \"./BasicPluginField\";\n\n\n/**\n * IntegerField - interface for Integer Plugin Field\n * @interface\n * @author Andrii Demchyshyn\n */\nexport default class IntegerField extends BasicPluginField {\n    /**\n     * default - default value\n     */\n    public default?: number;\n    /**\n     * min - min value\n     */\n    public min?: number;\n    /**\n     * max - max value\n     */\n    public max?: number;\n\n    constructor(field: any) {\n        super({id: field.id, type: field.type, name: field.name, label: field.label});\n\n        this.default = field.default;\n        this.min = field.min;\n        this.max = field.max;\n    }\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 18.11.2020, 16:41\n * All rights reserved.\n */\n\nimport BasicPluginField from \"./BasicPluginField\";\n\n\n/**\n * SeparatorPluginField - interface for Divider Plugin Field\n * @interface\n * @author Andrii Demchyshyn\n */\nexport default class SeparatorField extends BasicPluginField {\n\n    constructor(field: any) {\n        super({id: field.id, type: field.type, name: field.name, label: field.label});\n    }\n\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 18.11.2020, 16:41\n * All rights reserved.\n */\n\nimport BasicPluginField from \"./BasicPluginField\";\n\n\n/**\n * StringField - interface for String Plugin Field\n * @interface\n * @author Andrii Demchyshyn\n */\nexport default class StringField extends BasicPluginField {\n    /**\n     * default - default value\n     */\n    public default?: string;\n    /**\n     * min - min value\n     */\n    public min?: number;\n    /**\n     * max - max value\n     */\n    public max?: number;\n\n    constructor(field: any) {\n        super({id: field.id, type: field.type, name: field.name, label: field.label});\n\n        this.default = \"\" + field.default;\n        this.min = field.min;\n        this.max = field.max;\n    }\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 18.11.2020, 16:30\n * All rights reserved.\n */\n\nimport BasicPluginField from \"./BasicPluginField\";\n\n\n/**\n * BooleanPluginField - interface for Boolean Plugin Field\n * @interface\n * @author Andrii Demchyshyn\n */\nexport default class BooleanField extends BasicPluginField {\n    /**\n     * default - default value\n     */\n    public default?: boolean;\n\n    constructor(field: any) {\n        super({id: field.id, type: field.type, name: field.name, label: field.label});\n\n        this.default = field.default;\n    }\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 18.11.2020, 16:38\n * All rights reserved.\n */\n\nimport BasicPluginField from \"./BasicPluginField\";\n\n\n/**\n * FloatField - interface for Float Plugin Field\n * @interface\n * @author Andrii Demchyshyn\n */\nexport default class FloatField extends BasicPluginField {\n    /**\n     * default - default value\n     */\n    public default?: number;\n    /**\n     * min - min value\n     */\n    public min?: number;\n    /**\n     * max - max value\n     */\n    public max?: number;\n\n    constructor(field: any) {\n        super({id: field.id, type: field.type, name: field.name, label: field.label});\n\n        this.default = field.default;\n        this.min = field.min;\n        this.max = field.max;\n    }\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 18.11.2020, 18:14\n * All rights reserved.\n */\n\nimport React, {useContext} from \"react\";\nimport {withStyles} from \"@material-ui/core\";\nimport Stylable from \"../../../../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport {useDrop} from \"react-dnd\";\nimport {grey} from \"@material-ui/core/colors\";\nimport {PluginContext} from \"../../../CreatePluginPageView\";\nimport GroupField from \"../../../../../entities/GroupField\";\nimport IntegerField from \"../../../../../entities/IntegerField\";\nimport SeparatorField from \"../../../../../entities/SeparatorField\";\nimport StringField from \"../../../../../entities/StringField\";\nimport BooleanField from \"../../../../../entities/BooleanField\";\nimport FloatField from \"../../../../../entities/FloatField\";\n\ninterface FolderProps extends Stylable {\n    id: number,\n}\n\nconst Folder: React.FC<FolderProps> = ({classes, className, children, id, style}) => {\n\n    const context = useContext(PluginContext);\n\n    const [{isOver, isOverCurrent}, drop] = useDrop({\n        accept: [\"integer\", \"folder\", \"separator\", \"string\", \"boolean\", \"float\"],\n        drop(item, monitor) {\n            const didDrop = monitor.didDrop();\n            if (didDrop) {\n                return;\n            }\n            // if(isOverCurrent) {\n            //\n            // }\n            if (item.type === \"folder\") {\n                context.handleAddPluginField(new GroupField({\n                    type: \"folder\",\n                    name: \"Folder\",\n                    label: \"Folder\",\n                    nested: [],\n                    id: context.idGenerator(),\n                }), id);\n            } else if (item.type === \"integer\") {\n                context.handleAddPluginField(new IntegerField({\n                    type: \"integer\",\n                    name: \"Integer\",\n                    label: \"Integer Field\",\n                    min: null,\n                    max: null,\n                    default: null,\n                    id: context.idGenerator(),\n                }), id);\n            } else if (item.type === \"separator\") {\n                context.handleAddPluginField(new SeparatorField({\n                    type: \"separator\",\n                    name: \"Divider\",\n                    label: \"Divider\",\n                    id: context.idGenerator(),\n                }), id);\n            } else if (item.type === \"string\") {\n                context.handleAddPluginField(new StringField({\n                    type: \"string\",\n                    name: \"String\",\n                    label: \"String Field\",\n                    min: null,\n                    max: null,\n                    default: \"\",\n                    id: context.idGenerator(),\n                }), id);\n            } else if(item.type === \"boolean\") {\n                context.handleAddPluginField(new BooleanField({\n                    type: \"boolean\",\n                    name: \"Boolean\",\n                    label: \"Boolean Field\",\n                    default: false,\n                    id: context.idGenerator(),\n                }), id);\n            } else if (item.type === \"float\") {\n                context.handleAddPluginField(new FloatField({\n                    type: \"float\",\n                    name: \"Float\",\n                    label: \"Float Field\",\n                    min: null,\n                    max: null,\n                    default: null,\n                    id: context.idGenerator(),\n                }), id);\n            }\n        },\n        collect: (monitor) => ({\n            isOver: monitor.isOver(),\n            isOverCurrent: monitor.isOver({shallow: true}),\n        }),\n    });\n\n    return (\n        <div className={className ? className : classes.folder} ref={drop}\n             style={isOverCurrent ? {backgroundColor: grey[900]} : {backgroundColor: grey[800]}}>\n            <div>{children}</div>\n        </div>\n    );\n};\n\nexport default withStyles(styles)(Folder);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 22:13\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    field: {\n        paddingLeft: theme.spacing(1),\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 22:12\n * All rights reserved.\n */\n\nimport React, {useContext, useRef} from \"react\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport {\n    Avatar,\n    IconButton,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    withStyles,\n} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport {DropTargetMonitor, useDrag, useDrop, XYCoord} from \"react-dnd\";\nimport BasicPluginField from \"../../../../entities/BasicPluginField\";\nimport {PluginContext} from \"../../CreatePluginPageView\";\nimport {grey} from \"@material-ui/core/colors\";\nimport TextFieldsIcon from \"@material-ui/icons/TextFields\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport Filter1Icon from \"@material-ui/icons/Filter1\";\nimport FolderIcon from \"@material-ui/icons/Folder\";\n\ninterface DragableListItemProps extends Stylable {\n    field: BasicPluginField,\n\n    onDelete(item: BasicPluginField): void,\n\n    moveCard: (dragIndex: number, hoverIndex: number, targetId: number, toId: number) => void\n    index: number,\n    fieldIndex: number;\n    error?: boolean;\n\n    getIndex(index: number): void,\n}\n\ninterface DragItem {\n    index: number,\n    id: string,\n    type: string,\n}\n\nconst DragableListItem: React.FC<DragableListItemProps> = ({\n                                                               classes,\n                                                               field,\n                                                               onDelete,\n                                                               moveCard,\n                                                               index,\n                                                               getIndex,\n                                                               fieldIndex,\n                                                               error\n                                                           }) => {\n\n    const context = useContext(PluginContext);\n\n    const refer = useRef<HTMLDivElement>(null);\n    const id = field.id;\n\n    // console.log(field.id);\n\n    const [, drop] = useDrop({\n        accept: \"InputField\",\n        hover(item: DragItem, monitor: DropTargetMonitor) {\n            if (!refer.current) {\n                return;\n            }\n            const dragIndex = item.index;\n            const hoverIndex = index;\n\n            if (dragIndex === hoverIndex) {\n                return;\n            }\n\n            const hoveredRect = refer.current.getBoundingClientRect();\n            const hoverMiddleY = (hoveredRect.bottom - hoveredRect.top) / 2;\n            const clientOffset = monitor.getClientOffset();\n            const hoveredClientY = (clientOffset as XYCoord).y - hoveredRect.top;\n\n            if (dragIndex < hoverIndex && hoveredClientY < hoverMiddleY) {\n                return;\n            }\n\n            if (dragIndex > hoverIndex && hoveredClientY > hoverMiddleY) {\n                return;\n            }\n\n            moveCard(dragIndex, hoverIndex, 1, 1);\n\n            // context.moveField(context.pluginFields, field.id, )\n\n            item.index = hoverIndex;\n        },\n\n    });\n\n    const [{isDragging}, drag] = useDrag({\n        item: {type: \"InputField\", id, index},\n        collect: (monitor: any) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    });\n\n    drag(drop(refer));\n\n    const opacity = isDragging ? 0 : 1;\n    const backgroundColor = fieldIndex === index ? \"#3D3D3D\" : grey[800];\n    let color = \"white\";\n    if(error) {\n        color = \"red\";\n    }\n\n\n    return (\n        <ListItem\n            ref={refer}\n            style={{opacity, backgroundColor, color: color}}\n            button\n            onClick={() => getIndex(index)}\n            className={classes.field}\n        >\n            <ListItemAvatar>\n                <Avatar>\n                    {field.type === \"string\" &&\n                    <TextFieldsIcon/>\n                    }\n                    {field.type === \"separator\" &&\n                    <RemoveIcon/>\n                    }\n                    {field.type === \"boolean\" &&\n                    <CheckIcon/>\n                    }\n                    {(field.type === \"integer\" || field.type === \"float\") &&\n                    <Filter1Icon/>\n                    }\n                    {field.type === \"folder\" &&\n                    <FolderIcon/>\n                    }\n                </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n                primary={field.name}\n                secondary={field.type}\n            />\n            <ListItemSecondaryAction style={{opacity}}>\n                <IconButton\n                    edge=\"end\"\n                    aria-label=\"delete\"\n                    onClick={() => onDelete(field)}\n                >\n                    <DeleteIcon/>\n                </IconButton>\n            </ListItemSecondaryAction>\n\n        </ListItem>\n    );\n};\n\nexport default withStyles(styles)(DragableListItem);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 24.11.2020, 18:20\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    typographyText: {\n        textAlign: \"center\",\n    },\n    gridPadding: {\n        marginBottom: theme.spacing(1),\n    },\n    listPadding: {\n        padding: 0,\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 24.11.2020, 18:23\n * All rights reserved.\n */\n\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport React, {Ref, useContext, useEffect, useState} from \"react\";\nimport {Grid, List, ListItem, Switch, Typography, withStyles} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport BasicPluginField from \"../../../../entities/BasicPluginField\";\nimport IntegerField from \"../../../../entities/IntegerField\";\nimport {PluginContext} from \"../../CreatePluginPageView\";\nimport styles from \"./styles\";\nimport GroupField from \"../../../../entities/GroupField\";\nimport SeparatorField from \"../../../../entities/SeparatorField\";\nimport StringField from \"../../../../entities/StringField\";\nimport FloatField from \"../../../../entities/FloatField\";\nimport BooleanField from \"../../../../entities/BooleanField\";\n\ninterface ValidationErrors {\n    \"noInputError\": boolean;\n    \"nameError\": boolean;\n    \"labelError\": boolean;\n    \"minError\": boolean;\n    \"maxError\": boolean;\n    \"defaultError\": boolean;\n}\n\ninterface PluginFieldSettingsProps extends Stylable {\n    pluginField: BasicPluginField;\n    index: number;\n}\n\n\nconst PluginFieldSettings = React.forwardRef((props: PluginFieldSettingsProps, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n        pluginField,\n        index\n    } = props;\n\n    const context = useContext(PluginContext);\n\n\n    const [typeIS, setTypeIS] = useState(false);\n    const [errors, setErrors] = useState<ValidationErrors>({\n        \"noInputError\": true,\n        \"nameError\": false,\n        \"labelError\": false,\n        \"minError\": false,\n        \"maxError\": false,\n        \"defaultError\": false,\n    });\n\n    useEffect(() => {\n        if (pluginField instanceof IntegerField || pluginField instanceof StringField || pluginField instanceof FloatField) {\n            setTypeIS(true);\n        }\n    });\n\n    useEffect(() => {\n        setTypeIS(false);\n    }, [index]);\n\n    useEffect(() => {\n        setErrors({\n            \"noInputError\": true,\n            \"nameError\": false,\n            \"labelError\": false,\n            \"minError\": false,\n            \"maxError\": false,\n            \"defaultError\": false,\n        });\n        console.log(context.errorIds)\n        if(pluginField && context.errorIds.includes(pluginField.id)) {\n            handleValidation(\"name\");\n            handleValidation(\"label\");\n            if(pluginField instanceof IntegerField || pluginField instanceof FloatField || pluginField instanceof StringField) {\n                handleValidation(\"min\");\n                handleValidation(\"max\");\n                handleValidation(\"default\");\n            }\n        }\n    }, [pluginField]);\n\n\n    const handleInputField = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.persist();\n\n        let targetValue;\n\n        if (event.target.value === null || event.target.value === undefined || event.target.value === \"\") {\n            targetValue = null;\n        } else {\n            targetValue = event.target.value;\n        }\n\n        if (pluginField instanceof IntegerField) {\n            context.handleEditPluginField(new IntegerField({\n                type: pluginField.type,\n                name: name === \"name\" ? targetValue : pluginField.name,\n                label: name === \"label\" ? targetValue : pluginField.label,\n                min: name === \"min\" ? (targetValue ? +targetValue : targetValue) : pluginField.min,\n                max: name === \"max\" ? (targetValue ? +targetValue : targetValue) : pluginField.max,\n                default: name === \"default\" ? (targetValue ? +targetValue : targetValue) : pluginField.default,\n                id: pluginField.id,\n            }), index);\n        } else if (pluginField instanceof GroupField) {\n            context.handleEditPluginField(new GroupField({\n                type: pluginField.type,\n                name: name === \"name\" ? targetValue : pluginField.name,\n                label: name === \"label\" ? targetValue : pluginField.label,\n                id: pluginField.id,\n            }), index);\n        } else if (pluginField instanceof SeparatorField) {\n            context.handleEditPluginField(new SeparatorField({\n                type: pluginField.type,\n                name: name === \"name\" ? targetValue : pluginField.name,\n                label: name === \"label\" ? targetValue : pluginField.label,\n                id: pluginField.id,\n            }), index);\n        } else if (pluginField instanceof StringField) {\n            context.handleEditPluginField(new StringField({\n                type: pluginField.type,\n                name: name === \"name\" ? targetValue : pluginField.name,\n                label: name === \"label\" ? targetValue : pluginField.label,\n                min: name === \"min\" ? (targetValue ? +targetValue : targetValue) : pluginField.min,\n                max: name === \"max\" ? (targetValue ? +targetValue : targetValue) : pluginField.max,\n                default: name === \"default\" ? targetValue : pluginField.default,\n                id: pluginField.id,\n            }), index);\n        } else if (pluginField instanceof FloatField) {\n            context.handleEditPluginField(new FloatField({\n                type: pluginField.type,\n                name: name === \"name\" ? targetValue : pluginField.name,\n                label: name === \"label\" ? targetValue : pluginField.label,\n                min: name === \"min\" ? (targetValue ? +targetValue : targetValue) : pluginField.min,\n                max: name === \"max\" ? (targetValue ? +targetValue : targetValue) : pluginField.max,\n                default: name === \"default\" ? (targetValue ? +targetValue : targetValue) : pluginField.default,\n                id: pluginField.id,\n            }), index);\n        } else if (pluginField instanceof BooleanField) {\n            context.handleEditPluginField(new BooleanField({\n                type: pluginField.type,\n                name: name === \"name\" ? targetValue : pluginField.name,\n                label: name === \"label\" ? targetValue : pluginField.label,\n                default: name === \"default\" ? event.target.checked : pluginField.default,\n                id: pluginField.id,\n            }), index);\n        }\n    };\n\n    function handleValidation(name : string) {\n        setErrors(prev => ({\n            ...prev, \"noInputError\": false\n        }));\n        if (name === \"name\") {\n            if (!pluginField.name || pluginField.name.length < 3 || pluginField.name.length > 50 || context.pluginFields.filter(field => field.name === pluginField.name).length > 1) {\n                setErrors(prev => ({\n                    ...prev, \"nameError\": true\n                }));\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"nameError\": false\n                }));\n            }\n        } else if (name === \"label\") {\n            if (!pluginField.label || pluginField.label.length < 3 || pluginField.label.length > 50) {\n                setErrors(prev => ({\n                    ...prev, \"labelError\": true\n                }));\n            } else {\n                setErrors(prev => ({\n                    ...prev, \"labelError\": false\n                }));\n            }\n        }\n        if (pluginField instanceof IntegerField || pluginField instanceof StringField || pluginField instanceof FloatField) {\n            if (name === \"min\") {\n                if (!pluginField.min || pluginField.min < 0) {\n                    setErrors(prev => ({\n                        ...prev, \"minError\": true\n                    }));\n                } else {\n                    setErrors(prev => ({\n                        ...prev, \"minError\": false\n                    }));\n                }\n            } else if (name === \"max\") {\n                if (!pluginField.max || pluginField.max < 0) {\n                    setErrors(prev => ({\n                        ...prev, \"maxError\": true\n                    }));\n                } else {\n                    setErrors(prev => ({\n                        ...prev, \"maxError\": false\n                    }));\n                }\n            } else if (name === \"default\") {\n                // TODO: lookup logic and set up parenthesis (skobo4ki)\n                if (pluginField instanceof StringField) {\n                    if (!pluginField.default || pluginField.min && pluginField.default.length < pluginField.min || pluginField.max && pluginField.default.length > pluginField.max) {\n                        setErrors(prev => ({\n                            ...prev, \"defaultError\": true\n                        }));\n                    } else {\n                        setErrors(prev => ({\n                            ...prev, \"defaultError\": false\n                        }));\n                    }\n                    if (!pluginField.default) {\n                        setErrors(prev => ({\n                            ...prev, \"defaultError\": false\n                        }));\n                    }\n                } else if (pluginField instanceof IntegerField || pluginField instanceof FloatField) {\n                    if (!pluginField.default || pluginField.min && pluginField.default < pluginField.min || pluginField.max && pluginField.default > pluginField.max) {\n                        setErrors(prev => ({\n                            ...prev, \"defaultError\": true\n                        }));\n                    } else {\n                        setErrors(prev => ({\n                            ...prev, \"defaultError\": false\n                        }));\n                    }\n                    if (!pluginField.default) {\n                        setErrors(prev => ({\n                            ...prev, \"defaultError\": false\n                        }));\n                    }\n                }\n\n            }\n            if (name === \"min\" || name === \"max\") {\n                if (pluginField.min && pluginField.max) {\n                    if (pluginField.min > pluginField.max) {\n                        setErrors(prev => ({\n                            ...prev, \"maxError\": true, \"minError\": true,\n                        }));\n                    } else {\n                        setErrors(prev => ({\n                            ...prev, \"maxError\": false, \"minError\": false,\n                        }));\n                    }\n                } else {\n                    setErrors(prev => ({\n                        ...prev, \"maxError\": false, \"minError\": false,\n                    }));\n                }\n            }\n        }\n    }\n\n\n    return (\n        pluginField ?\n            <List>\n                <ListItem className={classes.listPadding}>\n\n                    <Grid container>\n                        <Grid item xs={12} className={classes.gridPadding}>\n                            <TextField\n                                error={errors.nameError}\n                                variant=\"standard\"\n                                required\n                                fullWidth\n                                name=\"name\"\n                                label=\"Name\"\n                                value={pluginField.name}\n                                onChange={handleInputField(\"name\")}\n                                onBlur={() => {\n                                    handleValidation(\"name\");\n                                    context.handleDeleteErrorsIds(pluginField.id);\n                                }}\n                                InputLabelProps={{\n                                    shrink: true\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12} className={classes.gridPadding}>\n                            <TextField\n                                error={errors.labelError}\n                                variant=\"standard\"\n                                required\n                                fullWidth\n                                name=\"label\"\n                                label=\"Label\"\n                                value={pluginField.label}\n                                onChange={handleInputField(\"label\")}\n                                onBlur={() => handleValidation(\"label\")}\n                                InputLabelProps={{\n                                    shrink: true\n                                }}\n                            />\n                        </Grid>\n                        {(typeIS && (\n                            pluginField instanceof IntegerField ||\n                            pluginField instanceof StringField ||\n                            pluginField instanceof FloatField)) &&\n                        <React.Fragment>\n                            <Grid item xs={12} className={classes.gridPadding}>\n                                <TextField\n                                    error={errors.minError}\n                                    type=\"number\"\n                                    variant=\"standard\"\n                                    fullWidth\n                                    name=\"min\"\n                                    label=\"Min value\"\n                                    value={pluginField.min}\n                                    onChange={handleInputField(\"min\")}\n                                    onBlur={() => handleValidation(\"min\")}\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} className={classes.gridPadding}>\n                                <TextField\n                                    error={errors.maxError}\n                                    type=\"number\"\n                                    variant=\"standard\"\n                                    fullWidth\n                                    name=\"max\"\n                                    label=\"Max value\"\n                                    value={pluginField.max}\n                                    onChange={handleInputField(\"max\")}\n                                    onBlur={() => handleValidation(\"max\")}\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} className={classes.gridPadding}>\n                                <TextField\n                                    error={errors.defaultError}\n                                    type={pluginField instanceof IntegerField ? \"number\" : \"string\"}\n                                    variant=\"standard\"\n                                    fullWidth\n                                    name=\"default\"\n                                    label=\"Default Value\"\n                                    value={pluginField.default}\n                                    onChange={handleInputField(\"default\")}\n                                    onBlur={() => handleValidation(\"default\")}\n                                    InputLabelProps={{\n                                        shrink: true\n                                    }}\n                                />\n                            </Grid>\n                        </React.Fragment>\n                        }\n                        {pluginField instanceof BooleanField &&\n                        <Grid item xs={12} className={classes.gridPadding}>\n                            <Typography>\n                                Default\n                                <Switch\n                                    checked={pluginField.default}\n                                    onChange={handleInputField(\"default\")}\n                                />\n                            </Typography>\n                        </Grid>\n                        }\n                    </Grid>\n\n                </ListItem>\n            </List>\n            :\n            <Typography variant=\"h6\" className={classes.typographyText}>\n                Nothing selected\n            </Typography>\n    );\n});\n\nexport default withStyles(styles)(PluginFieldSettings);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 18:37\n * All rights reserved.\n */\n\nimport React, {Ref, useContext, useEffect, useState} from \"react\";\nimport {Grid, List, ListItem, withStyles,} from \"@material-ui/core\";\nimport Stylable from \"../../../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport {PluginContext} from \"../../CreatePluginPageView\";\nimport DragableSubject from \"../DragableComponents/DragableSubject\";\nimport Folder from \"../DragableComponents/Folder\";\nimport DragableListItem from \"../DragableListItem/DragableListItem\";\nimport GroupField from \"../../../../entities/GroupField\";\nimport BasicPluginField from \"../../../../entities/BasicPluginField\";\nimport useEnqueueErrorSnackbar from \"../../../../utils/enqueueErrorSnackbar\";\nimport useCoreRequest from \"../../../../hooks/useCoreRequest\";\nimport PluginFieldSettings from \"../PluginFieldSettings\";\n\ninterface PluginCreationProps extends Stylable {\n    open: boolean;\n    pluginFields: BasicPluginField[];\n\n    onClose(): void;\n\n    onAddField(field: BasicPluginField, id: number): void;\n\n    move(dragIndex: number, hoverIndex: number, targetId: number, toId: number): void;\n\n    idGenerator(): number;\n}\n\n\nconst PluginCreation = React.forwardRef((props: PluginCreationProps, ref: Ref<any>) => {\n    const {\n        classes,\n        style,\n        className,\n        open,\n        onClose,\n        onAddField,\n        pluginFields,\n        idGenerator,\n        move,\n    } = props;\n\n    const context = useContext(PluginContext);\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const coreRequest = useCoreRequest();\n\n    const [fieldIndex, setFieldIndex] = useState(0);\n    const [rootFolder, setRootFolder] = useState<GroupField>(new GroupField({\n        id: 0,\n        name: \"\",\n        type: \"folder\",\n        label: \"\",\n        nested: []\n    }));\n    const [fieldType, setFieldType] = useState(\"inputField\");\n    const [addField, setAddField] = useState({\n        name: \"\",\n        niceName: \"\",\n        min: 1,\n        max: 255,\n        default: \"\",\n        id: 0,\n    });\n\n    useEffect(() => {\n        const field = context.pluginFields[0];\n        if (field instanceof GroupField) {\n            setRootFolder(field);\n        }\n    });\n\n    useEffect(() => {\n        setAddField({\n            name: \"\",\n            niceName: \"\",\n            min: 1,\n            max: 255,\n            default: \"\",\n            id: addField.id\n        });\n    }, [open]);\n\n\n    function getFieldIndex(index: number) {\n        setFieldIndex(index);\n    }\n\n    function showPluginFields(array: BasicPluginField[]) {\n        return (\n            array.map((folder, index) => {\n\n                return (\n                    <DragableListItem\n                        key={folder.id}\n                        error={context.errorIds.includes(folder.id)}\n                        field={folder}\n                        index={index}\n                        fieldIndex={fieldIndex}\n                        moveCard={move}\n                        getIndex={getFieldIndex}\n                        onDelete={context.handleDeletePluginField}\n                    />\n                );\n            })\n        );\n    }\n\n\n    return (\n        <React.Fragment>\n            <List className={classes.dialogSize}>\n                <ListItem>\n                    <Grid container spacing={4}>\n                        <Grid item xs={12} md={3}>\n                            <Grid container>\n                                <Grid item xs={12} className={classes.gridPadding}>\n                                    <List>\n                                        <DragableSubject type=\"integer\"/>\n                                        <DragableSubject type=\"string\"/>\n                                        {/*<DragableSubject type=\"folder\"/>*/}\n                                        <DragableSubject type=\"separator\"/>\n                                        <DragableSubject type=\"boolean\"/>\n                                        <DragableSubject type=\"float\"/>\n                                    </List>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n\n                        <Grid item xs={12} md={6}>\n                            <Grid container className={classes.firstLine}>\n                                <Grid item xs={12}>\n                                    <Folder className={classes.rootFolder} id={rootFolder.id}>\n                                        {showPluginFields(context.pluginFields)}\n                                    </Folder>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n\n                        <Grid item xs={12} md={3}>\n                            <PluginFieldSettings pluginField={context.pluginFields[fieldIndex]} index={fieldIndex}/>\n                        </Grid>\n\n                    </Grid>\n\n                </ListItem>\n            </List>\n        </React.Fragment>\n    );\n});\n\nexport default withStyles(styles)(PluginCreation);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 11.11.2020, 18:03\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    input: {},\n    root: {\n        width: \"100%\",\n    },\n    rootDrag: {\n        backgroundColor: \"rgba(255,255,255,0.1)\",\n    },\n    color: {\n        backgroundColor: \"rgba(255,255,255,0.05)\",\n    },\n    dropzone: {\n        userSelect: \"none\",\n        cursor: \"pointer\",\n        width: \"100%\",\n        border: \"2px solid transparent\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: theme.spacing(1),\n    },\n    dropzoneDrag: {\n        border: \"2px dashed black\",\n        height: 300,\n    },\n    textContainer: {\n        flexGrow: 1,\n        textAlign: \"center\",\n    },\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 11.11.2020, 18:03\n * All rights reserved.\n */\n\n/**\n * TempFile - entity for temporary files.\n * @class\n * @author Danil Andreev\n */\nexport default class TempFile {\n    /**\n     * id - id of the file in database.\n     */\n    public id: number;\n    /**\n     * name - filename.\n     */\n    public name: number;\n    /**\n     * type - file type.\n     */\n    public type: number;\n\n    constructor(data: any) {\n        this.id = data.id;\n        this.name = data.name;\n        this.type = data.type;\n        // TODO: add errors handleing\n    }\n}","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 13:39\n * All rights reserved.\n */\n\nimport React from \"react\";\nimport {\n    Avatar,\n    Box,\n    IconButton,\n    InputBase,\n    LinearProgress,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    Typography,\n    withStyles,\n} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport {useDropzone} from \"react-dropzone\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport clsx from \"clsx\";\nimport request from \"superagent\";\nimport TempFile from \"../../entities/TempFile\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\n\n\nexport const displayName = \"FilesLoader\";\n\n/**\n * FilesLoaderProps - props for FilesLoader component.\n * @author Danil Andreev\n */\nexport interface FilesLoaderProps extends Stylable {\n    onBeforeLoad?(files: File[]): File[],\n\n    onLoaded?(files: TempFile): void;\n\n    onError?(error: any): void;\n\n    onProgress?(event: ProgressEvent): void;\n\n    multiple?: boolean;\n\n    getFileId(id: number): void;\n\n}\n\n/**\n * UploadedFile - interface for local files accounting.\n * @interface\n */\ninterface UploadedFile {\n    file: File;\n    temp?: TempFile;\n    progress: number;\n    id: number;\n}\n\n/**\n * getNextFileId - generator for generating ids for upload files.\n * @function\n * @generator\n * @author Danil Andreev\n */\nfunction* getNextFileId() {\n    let id = 0;\n    while (true) {\n        id++;\n        yield id;\n    }\n    return id;\n}\n\n/**\n * FilesLoader - React component for selecting one or several files and upload them to temp storage.\n * @function\n * @author Danil Andreev\n */\nconst FilesLoader = React.forwardRef((props: FilesLoaderProps, ref) => {\n    const {\n        classes,\n        className,\n        style,\n        onBeforeLoad,\n        onLoaded,\n        onError,\n        onProgress,\n        multiple,\n        getFileId,\n        ...other\n\n    } = props;\n    const coreRequest = useCoreRequest();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const IdGenerator = React.useRef(getNextFileId());\n\n    const [tempFiles, setTempFiles] = React.useState<UploadedFile[]>([]);\n\n    /**\n     * onDrop - event handler for files upload.\n     * @function\n     * @callback\n        * @author Danil Andreev\n     */\n    const onDrop = React.useCallback((inputFiles: File[]) => {\n        if (!multiple) clearTempFiles();\n        let files = inputFiles;\n        if (onBeforeLoad) files = onBeforeLoad(files);\n        for (const file of files) {\n            const newFile: UploadedFile = {\n                file,\n                progress: 0,\n                id: IdGenerator.current.next().value,\n            };\n            setTempFiles(prev => [...prev, newFile]);\n            coreRequest()\n                .post(\"file\")\n                .attach(file.name, file)\n                .on(\"progress\", (event: ProgressEvent): void => {\n                    const progress = 100 * event.loaded / event.total;\n                    setTempFiles(prev => {\n                        const next = [...prev];\n                        const targetId = next.findIndex((candidate: UploadedFile) => candidate.id === newFile.id);\n                        if (targetId < 0) return next;\n                        next[targetId].progress = progress;\n                        return next;\n                    });\n\n                    onProgress && onProgress(event);\n                })\n                .then((result: request.Response): void => {\n                    try {\n                        const entity = new TempFile(result.body[0]); //TODO: change to body.\n                        setTempFiles(prev => {\n                            const next = [...prev];\n                            const targetId = next.findIndex((candidate: UploadedFile) => candidate.id === newFile.id);\n                            if (targetId < 0) return next;\n                            next[targetId].temp = entity;\n                            next[targetId].progress = 1000;\n                            getFileId(entity.id);\n                            return next;\n                        });\n                        onLoaded && onLoaded(entity);\n                    } catch (error) {\n                        enqueueErrorSnackbar(\"Error deleting file.\");\n                    }\n                })\n                .catch(error => {\n                    onError && onError(error);\n                });\n        }\n    }, []);\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop});\n\n    /**\n     * clearTempFiles - removes currently selected files from core origin temp storage.\n     * @function\n     * @author Danil Andreev\n     */\n    function clearTempFiles() {\n        const targets = [...tempFiles];\n        for (const target of targets) {\n            if (!target.temp) continue;\n            deleteFile(target.temp.id).catch(error => {\n                enqueueErrorSnackbar(`Error deleting ${target.file.name}`);\n            }).finally(() => setTempFiles([]));\n        }\n    }\n\n    /**\n     * deleteFile - deletes file with selected id from core temp storage.\n     * @param id Id of the file in core storage\n     * @function\n     * @throws Error\n     * @author Danil Andreev\n     */\n    async function deleteFile(id: number): Promise<void> {\n        try {\n            await coreRequest().delete(`file/${id}`);\n        } catch (error) {\n            throw error;\n        } finally {\n            setTempFiles(prev => prev.filter(item => item.temp && item.temp.id !== id));\n        }\n    }\n\n    async function deleteByLocalId(id: number): Promise<boolean> {\n        const target: UploadedFile | undefined = tempFiles.find((candidate: UploadedFile) => candidate.id === id);\n        if (!target) return false;\n        if (target.temp)\n            await deleteFile(target.temp.id);\n        else\n            setTempFiles(prev => prev.filter((candidate: UploadedFile) => candidate.id !== id));\n        return true;\n    }\n\n    return (\n        <Box>\n            {tempFiles.length === 0 &&\n            <Box\n                {...getRootProps()}\n                className={clsx(\n                    classes.root,\n                    classes.dropzone,\n                    classes.color,\n                    isDragActive && classes.dropzoneDrag,\n                    isDragActive && classes.rootDrag,\n                    className,\n                )}\n                style={style}\n            >\n                <Box className={classes.textContainer}>\n                    <Typography variant=\"h5\">UPLOAD</Typography>\n                    <Typography variant=\"body1\" color=\"textSecondary\">\n                        {isDragActive ? \"Drop files here ...\" : \"Drag and drop or click to select files.\"}\n\n                    </Typography>\n                </Box>\n                <InputBase\n                    className={classes.input}\n                    inputProps={{...getInputProps(), color: \"primary\", multiple: !!multiple}}\n                />\n            </Box>\n            }\n            {!!tempFiles.length &&\n            <List>\n                {tempFiles.map((file: UploadedFile) =>\n                    <ListItem key={`file-item-${file.file.name}-${file.id}`}>\n                        <ListItemAvatar>\n                            <Avatar>\n                                <InsertDriveFileIcon/>\n                            </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={file.file.name}\n                            secondary={\n                                file.progress <= 100 ?\n                                    <LinearProgress variant=\"determinate\" value={file.progress}/> :\n                                    file.file.type\n                            }\n                            secondaryTypographyProps={{component: \"div\"}}\n                        />\n                        <ListItemSecondaryAction>\n                            <IconButton\n                                edge=\"end\"\n                                aria-label=\"delete\"\n                                onClick={event => deleteByLocalId(file.id)}\n                            >\n                                <DeleteIcon/>\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                )}\n            </List>\n            }\n        </Box>\n    );\n});\n\nFilesLoader.displayName = displayName;\n\nexport default withStyles(styles)(FilesLoader);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 18:37\n * All rights reserved.\n */\n\nimport React, {Ref, useCallback, useEffect, useState} from \"react\";\nimport {\n    Button,\n    Divider,\n    Grid,\n    IconButton,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    TextField,\n    withStyles\n} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport List from \"@material-ui/core/List\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport PluginCreation from \"./LocalComponents/PluginCreation\";\nimport update from \"immutability-helper\";\nimport IdGenerator from \"../../utils/IdGenerator\";\nimport FilesLoader from \"../../components/FilesLoader\";\nimport BasicPluginField from \"../../entities/BasicPluginField\";\nimport GroupField from \"../../entities/GroupField\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\nimport IntegerField from \"../../entities/IntegerField\";\nimport {useChangeRoute} from \"routing-manager\";\nimport {PluginSetting, PluginSettingsSpec, ValidationError} from \"@atlasrender/render-plugin\";\nimport useAuth from \"../../hooks/useAuth\";\nimport ErrorHandler from \"../../utils/ErrorHandler\";\nimport StringField from \"../../entities/StringField\";\nimport FloatField from \"../../entities/FloatField\";\n\n\ninterface PluginContextProps {\n    pluginFields: (BasicPluginField)[];\n    errorIds: number[];\n    handleAddPluginField: (field: BasicPluginField, id: number) => void,\n    handleDeletePluginField: (field: BasicPluginField) => void,\n    handleEditPluginField: (field: BasicPluginField, index: number) => void,\n    idGenerator: () => number;\n    moveField: (inputArray: BasicPluginField[], targetId: number, toId: number, objectToAdd: BasicPluginField, remove: boolean) => BasicPluginField[];\n    handleGetErrorIndexes: (index: number) => void;\n    handleDeleteErrorsIds: (index: number) => void;\n}\n\nexport const PluginContext = React.createContext<PluginContextProps>({\n    pluginFields: [],\n    errorIds: [],\n    handleAddPluginField: (field: BasicPluginField, id: number) => {\n    },\n    handleDeletePluginField: (field: BasicPluginField) => {\n    },\n    handleEditPluginField: (field: BasicPluginField, index: number) => {\n    },\n    idGenerator: (): number => {\n        return 1;\n    },\n    moveField: (inputArray: BasicPluginField[], targetId: number, toId: number, objectToAdd: BasicPluginField, remove: boolean = false) => {\n        return [];\n    },\n    handleGetErrorIndexes: (index: number) => {\n    },\n    handleDeleteErrorsIds: (index: number) => {\n    }\n});\n\n\n/**\n * CreatePluginPageViewProps - interface for CreatePluginPageView\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface CreatePluginPageViewProps extends Stylable {\n\n}\n\ninterface Plugin {\n    name: string,\n    version: string,\n    note?: string,\n    description?: string,\n    file: number,\n    organization: number,\n    settings: BasicPluginField[] | PluginSetting[],\n}\n\n/**\n * UserPageView - function for showing create plugin page\n * @function\n * @author Andrii Demchyshyn\n */\nconst CreatePluginPageView = React.forwardRef((props: CreatePluginPageViewProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n        style,\n    } = props;\n\n    const {changeRoute} = useChangeRoute();\n    const {logout} = useAuth();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const coreRequest = useCoreRequest();\n    const idGenerator = React.useRef(IdGenerator());\n    const getNextId = (): number => idGenerator.current.next().value;\n    const {getRouteParams} = useChangeRoute();\n    const {id} = getRouteParams();\n\n    const [pluginFields, setPluginFields] = useState<BasicPluginField[]>([]);\n    const [errorIds, setErrorIds] = useState<number[]>([]);\n\n    console.log(pluginFields);\n\n    const [plugin, setPlugin] = useState<Plugin>({\n        name: \"\",\n        version: \"\",\n        note: \"\",\n        description: \"\",\n        file: 0,\n        organization: +id,\n        settings: pluginFields,\n    });\n\n    function getFileId(id: number) {\n        setPlugin((prev) => ({...prev, file: id}));\n        console.log(\"file id\", id);\n    }\n\n    useEffect(() => {\n        setPlugin((prev) => ({...prev, settings: pluginFields}));\n    }, [pluginFields]);\n\n    const [isDialogPluginButtonActive, setIsDialogPluginButtonActive] = useState(false);\n\n    function handlePluginChange(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist();\n        setPlugin((prev) => ({...prev, [event.target.name]: event.target.value}));\n        console.log(plugin);\n    }\n\n    function handleCreatePlugin() {\n        try {\n            const validated = new PluginSettingsSpec(pluginFields);\n            // console.log(\"kuku validate\", validated);\n            setPlugin((prev) => ({...prev, fields: validated}));\n        } catch (err) {\n            if (err instanceof ValidationError) {\n                handleCheckValidation();\n                enqueueErrorSnackbar(err.message);\n                console.log(err.getNested());\n            } else {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, \"Plugin settings validation error\")\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(404, \"Temp file not found\")\n                    .on(409, \"Plugin with this version already exists\")\n                    .handle(err);\n            }\n            return;\n        }\n        console.log(\"Before send:\", plugin);\n        coreRequest()\n            .post(\"plugins\")\n            .query({organization: plugin.organization})\n            .send(plugin)\n            .then(response => {\n                console.log(\"done\");\n                changeRoute({page: `organization/${plugin.organization}`, create: null, id: null})\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, \"Plugin settings validation error\")\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(404, \"Organization not found\")\n                    .on(409, \"Plugin with this version already exists\")\n                    .handle(err);\n            });\n    }\n\n\n    const move = useCallback(\n        (dragIndex: number, hoverIndex: number, targetId: number, toId: number) => {\n            const draggedField = pluginFields[dragIndex];\n            setPluginFields(\n                update(pluginFields, {\n                    $splice: [\n                        [dragIndex, 1],\n                        [hoverIndex, 0, draggedField],\n                    ],\n                }),\n            );\n        },\n        [pluginFields],\n    );\n\n\n    function moveField(inputArray: BasicPluginField[], targetId: number, toId: number, objectToAdd: BasicPluginField, remove: boolean = false): BasicPluginField[] {\n\n        const array = [...inputArray];\n\n        let target: BasicPluginField | null = null;\n\n        function findField(callback: (array: BasicPluginField[], field: number) => BasicPluginField[]) {\n            return function findTarget(array: BasicPluginField[], id: number): BasicPluginField[] {\n                for (let i = 0; i < array.length; i++) {\n                    const field = array[i];\n                    if (field.id === id) {\n                        return callback(array, i);\n                    } else {\n                        if (field instanceof GroupField && field.nested) {\n                            field.nested = findTarget(field.nested, id);\n                        }\n                    }\n                }\n                return array;\n            };\n        }\n\n        const newArray: BasicPluginField[] = findField((callbackArray, index) => {\n            target = callbackArray[index];\n            return callbackArray.filter(item => item.id !== callbackArray[index].id);\n        })(array, targetId);\n\n        if (remove) {\n            return newArray;\n        }\n\n        if (!target)\n            target = objectToAdd;\n\n\n        const finalArray: BasicPluginField[] = findField((callbackFinalArray, index) => {\n            if (callbackFinalArray[index] instanceof GroupField) {\n\n                if (target) {\n                    const callbackResult = (callbackFinalArray[index] as GroupField);\n                    if (callbackResult.nested) {\n                        callbackResult.nested.push(target);\n                    }\n                }\n            } else {\n\n                let saveFieldTo: BasicPluginField = new BasicPluginField({\n                    type: \"integer\",\n                    name: \"name\",\n                    label: \"label\",\n                    id: 1000,\n                });\n\n                for (let i = 0; i < callbackFinalArray.length; i++) {\n                    if (callbackFinalArray[i].id === toId) {\n                        saveFieldTo = callbackFinalArray[i];\n                    }\n                }\n\n                for (let i = 0; i < callbackFinalArray.length; i++) {\n                    if (callbackFinalArray[i].id === toId && target) {\n                        callbackFinalArray[i] = target;\n                        callbackFinalArray.push(saveFieldTo);\n                    }\n                }\n\n            }\n\n            return callbackFinalArray;\n        })(array, toId);\n\n        return finalArray;\n\n    }\n\n    function handleAddPluginField(field: BasicPluginField, id: number) {\n        setPluginFields(prev => ([...prev, field]));\n    }\n\n    function handleEditPluginField(field: BasicPluginField, index: number) {\n        const copy = [...pluginFields];\n        copy.splice(index, 1, field);\n        setPluginFields(copy);\n    }\n\n    function handleDeletePluginField(field: BasicPluginField) {\n        setPluginFields(pluginFields.filter(pluginField => pluginField.id !== field.id));\n    }\n\n    function handleSetIsDialogPluginButtonActive() {\n        setIsDialogPluginButtonActive(true);\n    }\n\n    const handleGetErrorIds = (id: number) => {\n        setErrorIds(prev => ([...prev, id]));\n    };\n\n    const handleDeleteErrorsIds = (id: number) => {\n        const copy = errorIds.filter(errorId => errorId !== id);\n        setErrorIds(copy);\n\n    }\n\n    const handleCheckValidation = () => {\n        pluginFields.forEach(field => {\n            const id = handleValidation(field);\n            console.log(id);\n            if(id) {\n                handleGetErrorIds(id);\n            }\n        })\n    };\n\n    function handleValidation(pluginField: BasicPluginField) {\n        if (!pluginField.name || pluginField.name.length < 3 || pluginField.name.length > 50 || pluginFields.filter(field => field.name === pluginField.name).length > 1) {\n            console.log(\"name\");\n            return pluginField.id;\n        }\n        if (!pluginField.label || pluginField.label.length < 3 || pluginField.label.length > 50) {\n            return pluginField.id;\n        }\n        // if (pluginField instanceof IntegerField || pluginField instanceof StringField || pluginField instanceof FloatField) {\n        //     if (!pluginField.min || pluginField.min < 0) {\n        //         return pluginField.id;\n        //     }\n        //     if (!pluginField.max || pluginField.max < 0) {\n        //         return pluginField.id;\n        //     }\n        //     if (pluginField instanceof StringField) {\n        //         if (!pluginField.default || pluginField.min && pluginField.default.length < pluginField.min || pluginField.max && pluginField.default.length > pluginField.max) {\n        //             return pluginField.id;\n        //         }\n        //\n        //     } else if (pluginField instanceof IntegerField || pluginField instanceof FloatField) {\n        //         if (!pluginField.default || pluginField.min && pluginField.default < pluginField.min || pluginField.max && pluginField.default > pluginField.max) {\n        //             return pluginField.id;\n        //         }\n        //\n        //     }\n        //     if (pluginField.min && pluginField.max) {\n        //         if (pluginField.min > pluginField.max) {\n        //             return pluginField.id;\n        //         }\n        //     }\n        // }\n    }\n\n    return (\n        <React.Fragment>\n\n            <Grid container className={classes.firstLine}>\n                <Grid item xs={12} md={10}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth\n                                label=\"Name\"\n                                name=\"name\"\n                                value={plugin.name}\n                                onChange={handlePluginChange}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                fullWidth\n                                label=\"Version\"\n                                name=\"version\"\n                                value={plugin.version}\n                                onChange={handlePluginChange}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Note\"\n                                name=\"note\"\n                                value={plugin.note}\n                                onChange={handlePluginChange}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                fullWidth\n                                label=\"Description\"\n                                name=\"description\"\n                                value={plugin.description}\n                                onChange={handlePluginChange}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <FilesLoader multiple getFileId={getFileId}/>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n\n            <Grid container className={classes.firstLine}>\n                <Grid item xs={12} md={10}>\n                    <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n                        <ListItem className={classes.paddingNone}>\n                            <ListItemText primary=\"Settings\" primaryTypographyProps={{variant: \"h6\"}}/>\n                            {/*<ListItemSecondaryAction>*/}\n                            {/*    <IconButton*/}\n                            {/*        edge=\"end\"*/}\n                            {/*        aria-label=\"delete\"*/}\n                            {/*        onClick={handleSetIsDialogPluginButtonActive}*/}\n                            {/*    >*/}\n                            {/*        <AddIcon/>*/}\n                            {/*    </IconButton>*/}\n                            {/*</ListItemSecondaryAction>*/}\n                        </ListItem>\n                        <Divider/>\n                    </List>\n                </Grid>\n            </Grid>\n\n            <Grid container className={classes.firstLine}>\n                <Grid item xs={12} md={10}>\n                    <PluginContext.Provider value={{\n                        pluginFields: pluginFields,\n                        errorIds: errorIds,\n                        handleAddPluginField: handleAddPluginField,\n                        handleDeletePluginField: handleDeletePluginField,\n                        handleEditPluginField: handleEditPluginField,\n                        idGenerator: getNextId,\n                        moveField: moveField,\n                        handleGetErrorIndexes: handleGetErrorIds,\n                        handleDeleteErrorsIds: handleDeleteErrorsIds,\n                    }}>\n                        <PluginCreation\n                            open={isDialogPluginButtonActive}\n                            onClose={() => setIsDialogPluginButtonActive(false)}\n                            onAddField={handleAddPluginField}\n                            idGenerator={getNextId}\n                            pluginFields={pluginFields}\n                            move={move}\n                        />\n                    </PluginContext.Provider>\n                </Grid>\n\n                <Button fullWidth onClick={handleCreatePlugin}>\n                    Save\n                </Button>\n            </Grid>\n        </React.Fragment>\n    );\n});\n\nexport default withStyles(styles)(CreatePluginPageView);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 03.12.2020, 17:59\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    container: {\n        padding: theme.spacing(2, 1),\n    },\n    listIcon: {\n        justifyContent: \"center\",\n    },\n    listText:{\n        marginLeft: 8,\n    }\n})\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 03.12.2020, 18:00\n * All rights reserved.\n */\n\nimport React, {Ref} from \"react\";\nimport {withStyles} from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport {useChangeRoute} from \"routing-manager\";\n\n/**\n * MenuElementProps - interface for MenuElement component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface MenuElementProps extends Stylable {\n    page: string;\n    label: string;\n    icon: React.ElementType;\n}\n\n/**\n * MenuElement - component for menu elements\n * @function\n * @author Andrii Demchyshyn\n */\nconst MenuElement = React.forwardRef((props: MenuElementProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n        page,\n        label,\n        icon: Icon\n    } = props;\n\n    const {changeRoute} = useChangeRoute();\n\n    return (\n        <ListItem\n            className={classes.container}\n            button onClick={() => changeRoute({page: page, panel: null})}\n        >\n            <ListItemIcon className={classes.listIcon}>\n                <Icon/>\n            </ListItemIcon>\n            <ListItemText className={classes.listText} primary={label}/>\n        </ListItem>\n    );\n});\n\nexport default withStyles(styles)(MenuElement);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect, useState} from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport styles from \"./styles\";\nimport {\n    Avatar,\n    Box,\n    Divider,\n    IconButton, Menu, MenuItem,\n    Popover,\n    SwipeableDrawer,\n    useMediaQuery,\n    useTheme,\n    withStyles\n} from \"@material-ui/core\";\nimport {Route, Switch, useLocation, useRouteMatch} from \"react-router-dom\";\nimport RenderJobsView from \"../../views/RenderJobsView/RenderJobsView\";\nimport UserPageView from \"../../views/UserPageView\";\nimport OrganizationPageView from \"../../views/OrganizationPageView\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport clsx from \"clsx\";\nimport {ChangeRouteProvider, useChangeRoute} from \"routing-manager\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport SubmitPageView from \"../../views/SubmitPageView\";\nimport Button from \"@material-ui/core/Button\";\nimport useAuth from \"../../hooks/useAuth\";\nimport CreateOrganizationPageView from \"../../views/CreateOrganizationPageView\";\nimport UserEditView from \"../../views/UserEditView/UserEditView\";\nimport AtlasLogo from \"./images/AtlasSystemsLogo.svg\";\nimport CreatePluginPageView from \"../../views/CreatePluginPageView\";\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\nimport {DndProvider} from \"react-dnd\";\nimport CoreEventDispatcher from \"../../core/CoreEventDispatcher\";\nimport User from \"../../entities/User\";\nimport {WS_RENDER_JOB_UPDATE, WS_RENDER_TASK_UPDATE} from \"../../globals\";\nimport MenuElement from \"../../components/MenuElement\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport WorkIcon from \"@material-ui/icons/Work\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport GroupIcon from \"@material-ui/icons/Group\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\nimport Organization from \"../../interfaces/Organization\";\nimport ErrorHandler from \"../../utils/ErrorHandler\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\n\n/**\n * MonitorLayoutProps - interface for MonitorLayout component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface MonitorLayoutProps extends Stylable {\n\n}\n\ntype Anchor = \"left\";\n\n/**\n * MonitorLayout - creates main static part of page (header and leftside menu)\n * @function\n * @author Andrii Demchyshyn\n */\nconst MonitorLayout = React.forwardRef((props: MonitorLayoutProps, ref: Ref<HTMLElement>): JSX.Element => {\n    const {\n        classes,\n        className,\n    } = props;\n\n\n    const coreRequest = useCoreRequest();\n    const {changeRoute} = useChangeRoute();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n\n\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(false);\n    const [state, setState] = React.useState({left: false});\n    const {logout, isLogged, getUser} = useAuth();\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [userId, setUserId] = useState(-1);\n    const [organizations, setOrganizations] = useState<Organization[]>([]);\n    const [loaded, setLoaded] = useState(false);\n\n\n    const openPopper = Boolean(anchorEl);\n    const id = openPopper ? \"simple-popper\" : undefined;\n    const location = useLocation();\n\n\n    useEffect(() => {\n        const user: User | null = getUser();\n        if (user) {\n            CoreEventDispatcher.connect(user.bearer);\n            setUserId(user.id);\n        }\n\n\n        const listener = (message: any) => {\n            console.log(\"recieved11 \", message);\n        };\n\n        const updateListener = (message: any) => {\n            console.log(\"UPDATE TASK EVENT:\", message);\n        };\n\n        CoreEventDispatcher.getInstance().addListener(WS_RENDER_JOB_UPDATE, listener);\n\n        CoreEventDispatcher.getInstance().addListener(WS_RENDER_TASK_UPDATE, updateListener);\n\n        if (location.pathname === \"/\") {\n            changeRoute({page: \"user\", id: null});\n        }\n\n        return () => {\n            //CoreEventDispatcher.disconnect()\n            CoreEventDispatcher.getInstance().removeListener(\"ping\", listener);\n        };\n    }, []);\n\n\n    useEffect(() => {\n        if (!isLogged) {\n            changeRoute({page: `authorization`, panel: null});\n        }\n    }, [isLogged]);\n\n    useEffect(() => {\n        if (isLogged && userId >= 0) {\n            handleGetUserOrganizations();\n        }\n    }, [userId, isLogged]);\n\n\n    const handleGetUserOrganizations = () => {\n        coreRequest()\n            .get(`users/${userId}/organizations`)\n            .then(response => {\n                setOrganizations(response.body);\n                setLoaded(true);\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(401, () => {\n                        logout();\n                    })\n                    .on(404, \"User not found\")\n                    .handle(err);\n            });\n    };\n\n    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    const toggleDrawer = (anchor: Anchor, open: boolean) => (\n        event: React.KeyboardEvent | React.MouseEvent,\n    ) => {\n        if (\n            event &&\n            event.type === \"keydown\" &&\n            ((event as React.KeyboardEvent).key === \"DialogTaskTabs\" ||\n                (event as React.KeyboardEvent).key === \"Shift\")\n        ) {\n            return;\n        }\n\n        setState({...state, [anchor]: open});\n    };\n\n    function handleLogout() {\n        logout();\n        changeRoute({page: \"authorization\", panel: null});\n    }\n\n    const list = (anchor: Anchor) => (\n        <Box\n            className={clsx(classes.list)}\n            role=\"presentation\"\n            onClick={toggleDrawer(anchor, false)}\n            onKeyDown={toggleDrawer(anchor, false)}\n        >\n            <List>\n                <MenuElement icon={WorkIcon} page=\"jobs\" label=\"Render ShortJobs\"/>\n                <MenuElement icon={PersonIcon} page=\"user\" label=\"User Page\"/>\n                <MenuElement icon={CheckIcon} page=\"submit\" label=\"Submit Page\"/>\n                <MenuElement icon={AddIcon} page=\"createorganization\" label=\"Create Organization\"/>\n            </List>\n        </Box>\n    );\n\n    const matches = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n    let drawer;\n    if (matches) {\n        state.left && setState({left: false});\n        drawer = (\n            <React.Fragment>\n                <CssBaseline/>\n                <AppBar\n                    position=\"fixed\"\n                    className={clsx(classes.appBar, {\n                        [classes.appBarShift]: open,\n                    }, classes.header)}\n                >\n                    <Toolbar className={classes.header}>\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            onClick={handleDrawerOpen}\n                            edge=\"start\"\n                            className={clsx(classes.menuButton, {\n                                [classes.hide]: open,\n                            })}\n                        >\n                            <MenuIcon/>\n                        </IconButton>\n                        <Avatar src={AtlasLogo} variant=\"square\"/>\n                        <Typography variant=\"h6\" noWrap className={classes.typographyFlex}>\n                            Atlas\n                        </Typography>\n                        <IconButton\n                            aria-describedby={id}\n                            type=\"button\"\n                            onClick={handleClick}\n                        >\n                            <Avatar/>\n                        </IconButton>\n                        {loaded &&\n                        <Menu\n                            id=\"simple-menu\"\n                            anchorEl={anchorEl}\n                            keepMounted\n                            open={Boolean(anchorEl)}\n                            onClose={handleClose}\n                            className={classes.rightSideMenu}\n                        >\n                            <MenuItem onClick={() => {\n                                changeRoute({page: \"user\", panel: null});\n                                handleClose();\n                            }}>Profile</MenuItem>\n                            <MenuItem onClick={() => {\n                                changeRoute({page: \"jobs\", panel: null});\n                                handleClose();\n                            }}>Render Jobs</MenuItem>\n                            {organizations.length > 0 && organizations.map((organization, index) => {\n                                if(index < 3) {\n                                    return(\n                                        <MenuItem onClick={() => {\n                                            changeRoute({page: `organization/${organization.id}`});\n                                            handleClose();\n                                        }}>{organization.name}</MenuItem>\n                                    );\n                                } else {\n                                    return;\n                                }\n                            })}\n                            <MenuItem onClick={handleLogout}>Logout</MenuItem>\n\n                        </Menu>\n                        }\n\n                    </Toolbar>\n                </AppBar>\n                <Drawer\n                    variant=\"permanent\"\n                    className={clsx(classes.drawer, {\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open,\n                    })}\n                    classes={{\n                        paper: clsx({\n                            [classes.drawerOpen]: open,\n                            [classes.drawerClose]: !open,\n                        }),\n                    }}\n                >\n                    <Box className={classes.toolbar}>\n                        <IconButton onClick={handleDrawerClose}>\n                            {theme.direction === \"rtl\" ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\n                        </IconButton>\n                    </Box>\n                    <Divider/>\n                    <List>\n                        <MenuElement icon={WorkIcon} page=\"jobs\" label=\"Render ShortJobs\"/>\n                        <MenuElement icon={PersonIcon} page=\"user\" label=\"User Page\"/>\n                        <MenuElement icon={CheckIcon} page=\"submit\" label=\"Submit Page\"/>\n                        <MenuElement icon={AddIcon} page=\"createorganization\" label=\"Create Organization\"/>\n                    </List>\n                </Drawer>\n            </React.Fragment>\n        );\n    } else {\n        //\n        open && setOpen(false);\n        drawer = (\n            <React.Fragment>\n                <CssBaseline/>\n                <AppBar\n                    position=\"fixed\"\n                    className={clsx(classes.appBar, {\n                        [classes.appBarShift]: open,\n                    })}\n                >\n                    <Toolbar className={classes.header}>\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            onClick={toggleDrawer(\"left\", true)}\n                            edge=\"start\"\n                            className={clsx(classes.menuButton, {\n                                [classes.hide]: open,\n                            })}\n                        >\n                            <MenuIcon/>\n                        </IconButton>\n                        <SwipeableDrawer\n                            anchor=\"left\"\n                            open={state[\"left\"]}\n                            onClose={toggleDrawer(\"left\", false)}\n                            onOpen={toggleDrawer(\"left\", true)}\n                        >\n                            {list(\"left\")}\n                        </SwipeableDrawer>\n                        <Typography variant=\"h6\" noWrap>\n                            Atlas\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n            </React.Fragment>\n        );\n    }\n\n    let {path} = useRouteMatch();\n\n    return (\n\n        <Box className={classes.root}>\n\n            {drawer}\n\n            <main className={classes.content}>\n                <Toolbar/>\n                <Switch>\n                    <Route exact path=\"/user/:id/edit\">\n                        <UserEditView/>\n                    </Route>\n                    <Route path=\"/jobs\">\n                        <ChangeRouteProvider routeMask=\"(/:panel)\">\n                            <RenderJobsView/>\n                        </ChangeRouteProvider>\n                    </Route>\n                    <Route path=\"/user\">\n                        <ChangeRouteProvider routeMask=\"(/:id(/:actions))\">\n                            <UserPageView/>\n                        </ChangeRouteProvider>\n                    </Route>\n                    <Route path=\"/organization\">\n                        <ChangeRouteProvider routeMask=\"(/:id)\">\n                            <OrganizationPageView/>\n                        </ChangeRouteProvider>\n                    </Route>\n                    <Route path=\"/submit\">\n                        <ChangeRouteProvider routeMask=\"(/:panel)\">\n                            <SubmitPageView/>\n                        </ChangeRouteProvider>\n                    </Route>\n                    <Route path=\"/createorganization\">\n                        <ChangeRouteProvider routeMask=\"(/:id)\">\n                            <CreateOrganizationPageView/>\n                        </ChangeRouteProvider>\n                    </Route>\n                    <Route path=\"/plugin\">\n                        <ChangeRouteProvider routeMask=\"(/:create(/:id))\">\n                            <DndProvider backend={HTML5Backend}>\n                                <CreatePluginPageView/>\n                            </DndProvider>\n                        </ChangeRouteProvider>\n                    </Route>\n                </Switch>\n            </main>\n\n        </Box>\n    );\n});\n\nexport default withStyles(styles)(MonitorLayout);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n    },\n    header: {\n        background: theme.palette.header.dark,\n        color: theme.palette.common.white,\n    }\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React, {Ref} from \"react\";\nimport {AppBar, Box, Toolbar, Typography, withStyles} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport clsx from \"clsx\";\nimport Stylable from \"../../interfaces/Stylable\";\n\n/**\n * HeaderProps - interface for Header component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface HeaderProps extends Stylable {\n\n}\n\n/**\n * DataTextField - returns Header component\n * @function\n * @author Andrii Demchyshyn\n */\nconst Header = React.forwardRef((props: HeaderProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n    } = props;\n\n    return (\n        <Box className={clsx(classes.root, className)}>\n            <AppBar position=\"static\">\n                <Toolbar className={classes.header}>\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        Pathfinder\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n\n        </Box>\n    );\n});\nHeader.displayName = \"Header\";\nHeader.propTypes = {};\n\nexport default withStyles(styles)(Header);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\nimport {createStyles, Theme} from \"@material-ui/core/styles\";\n\n\nconst styles = (theme: Theme) => createStyles({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n});\n\nexport default styles;","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React, {Ref, useState} from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport {withStyles} from \"@material-ui/core\";\nimport styles from \"./style\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\nimport useAuth from \"../../hooks/useAuth\";\nimport {useChangeRoute} from \"routing-manager\";\nimport {useSnackbar} from \"notistack\";\nimport ErrorHandler from \"../../utils/ErrorHandler\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\n\ninterface AuthorizationPageViewProps extends Stylable {\n\n}\n\ninterface Credentials {\n    username: string;\n    password: string;\n}\n\ninterface validationError {\n    \"usernameError\": boolean;\n    \"passwordError\": boolean;\n    \"usernameMessage\": string;\n    \"passwordMessage\": string;\n}\n\nconst AuthorizationPageView = React.forwardRef((props: AuthorizationPageViewProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n        style\n    } = props;\n\n    const {changeRoute} = useChangeRoute();\n    const {enqueueSnackbar} = useSnackbar();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const {login} = useAuth();\n    const coreRequest = useCoreRequest();\n    const [errors, setErrors] = useState<validationError>(\n        {\n            usernameError: false,\n            usernameMessage: \"\",\n            passwordError: false,\n            passwordMessage: \"\",\n        }\n    );\n    const [credentials, setCredentials] = useState<Credentials>({username: \"\", password: \"\"});\n\n    // TODO event type\n    function handleInput(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist();\n        setErrors(prev => ({...prev, [event.target.name + \"Error\"]: false}));\n        setCredentials(prev => ({...prev, [event.target.name]: event.target.value}));\n    }\n\n\n    function handleLogin(event: React.ChangeEvent<any>) {\n\n        event.preventDefault();\n        coreRequest()\n            .post(\"login\")\n            .send(credentials)\n            .then(res => {\n                console.log(res.body);\n                const user = res.body;\n                if (!user) {\n                    console.error(\"No user\");\n                    enqueueSnackbar(\"No such user\", {variant: \"error\"});\n                }\n                if ((typeof user.id !== \"number\") ||\n                    (typeof user.username !== \"string\") ||\n                    (typeof user.email !== \"string\") ||\n                    (typeof user.bearer !== \"string\") ||\n                    (typeof user.createdAt !== \"string\") ||\n                    (typeof user.deleted !== \"boolean\")) {\n                    enqueueSnackbar(\"One of parameters has wrong type\", {variant: \"error\"});\n                }\n\n                login(user);\n                changeRoute({page: `user/${user.id}`});\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, () => {\n                        err.response.body.response.errors.forEach((item: any) => {\n                            console.log(item);\n                            const keyError = item.dataPath.substr(1) + \"Error\";\n                            const keyMessage = item.dataPath.substr(1) + \"Message\";\n                            switch (item.keyword) {\n                                case \"format\":\n                                    setErrors((prev) => ({\n                                        ...prev,\n                                        [keyError]: true,\n                                        [keyMessage]: `${item.dataPath.substr(1)} has invalid format`\n                                    }));\n                                    break;\n                                case \"minLength\":\n                                    setErrors((prev) => ({\n                                        ...prev,\n                                        [keyError]: true,\n                                        [keyMessage]: `${item.dataPath.substr(1)} is too short`\n                                    }));\n                                    break;\n                                case \"maxLength\":\n                                    setErrors((prev) => ({\n                                        ...prev,\n                                        [keyError]: true,\n                                        [keyMessage]: `${item.dataPath.substr(1)} is too long`\n                                    }));\n                                    break;\n                                case \"pattern\":\n                                    setErrors((prev) => ({\n                                        ...prev,\n                                        [keyError]: true,\n                                        [keyMessage]: `${item.dataPath.substr(1)} has wrong pattern`\n                                    }));\n                                    break;\n                            }\n                        });\n                    })\n                    .on(401, () => {\n                        setErrors((prev) => ({...prev, passwordError: true, passwordMessage: \"Incorrect passsword\"}));\n                    })\n                    .on(404, () => {\n                        setErrors((prev) => ({...prev, usernameError: true, usernameMessage: \"There is no such user\"}));\n                    })\n                    .handle(err);\n            });\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline/>\n            <Box className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon/>\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign in\n                </Typography>\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    error={errors.usernameError}\n                    helperText={errors.usernameMessage}\n                    id=\"username\"\n                    label=\"Username\"\n                    name=\"username\"\n                    autoComplete=\"username\"\n                    autoFocus\n                    onChange={handleInput}\n                />\n                <TextField\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    required\n                    fullWidth\n                    error={errors.passwordError}\n                    helperText={errors.passwordMessage}\n                    name=\"password\"\n                    label=\"Password\"\n                    type=\"password\"\n                    id=\"password\"\n                    autoComplete=\"current-password\"\n                    onChange={handleInput}\n                />\n                <FormControlLabel\n                    control={<Checkbox value=\"remember\" color=\"primary\"/>}\n                    label=\"Remember me\"\n                />\n                <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.submit}\n                    onClick={handleLogin}\n                >\n                    Sign In\n                </Button>\n                <Grid container>\n                    <Grid item xs>\n                        <Link href=\"#\" variant=\"body2\">\n                            Forgot password?\n                        </Link>\n                    </Grid>\n                    <Grid item>\n                        <Link href=\"\" variant=\"body2\" onClick={() => changeRoute({page: \"signUp\"})}>\n                            {\"Don't have an account? Sign Up\"}\n                        </Link>\n                    </Grid>\n                </Grid>\n            </Box>\n        </Container>\n\n    );\n});\n\nexport default withStyles(styles)(AuthorizationPageView);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport {createStyles, Theme} from \"@material-ui/core/styles\";\n\n\nconst styles = (theme: Theme) => createStyles({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n});\n\nexport default styles;\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React, {Ref, useState} from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {withStyles} from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport styles from \"./styles\";\nimport useAuth from \"../../hooks/useAuth\";\nimport useCoreRequest from \"../../hooks/useCoreRequest\";\nimport {useChangeRoute} from \"routing-manager\";\nimport useEnqueueErrorSnackbar from \"../../utils/enqueueErrorSnackbar\";\nimport User from \"../../entities/User\";\nimport ErrorHandler from \"../../utils/ErrorHandler\";\n\ninterface SignUpPageProps extends Stylable {\n\n}\n\ninterface Credentials {\n    username: string;\n    password: string;\n    email: string;\n}\n\ninterface validationError {\n    \"usernameError\": boolean;\n    \"emailError\": boolean;\n    \"passwordError\": boolean;\n    \"usernameMessage\": string;\n    \"emailMessage\": string;\n    \"passwordMessage\": string;\n}\n\nconst SignUpPage = React.forwardRef((props: SignUpPageProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n        style,\n    } = props;\n\n    const {login} = useAuth();\n    const enqueueErrorSnackbar = useEnqueueErrorSnackbar();\n    const [errors, setErrors] = useState<validationError>(\n        {\n            usernameError: false,\n            usernameMessage: \"\",\n            emailError: false,\n            emailMessage: \"\",\n            passwordError: false,\n            passwordMessage: \"\",\n        }\n    );\n    const [credentials, setCredentials] = useState<Credentials>({username: \"\", password: \"\", email: \"\"});\n    const {changeRoute} = useChangeRoute();\n    const coreRequest = useCoreRequest();\n\n    function handleInput(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist();\n        setCredentials(prev => ({...prev, [event.target.name]: event.target.value}));\n    }\n\n    function handleRegister(event: React.ChangeEvent<any>) {\n        event.preventDefault();\n        coreRequest()\n            .post(\"users\")\n            .send(credentials)\n            .then(res => {\n                const user = res.body;\n                if (!user) {\n                    enqueueErrorSnackbar(\"No such user\");\n                }\n                const currentUser = new User(user);\n                login(currentUser);\n                changeRoute({page: `user/${user.id}`});\n            })\n            .catch(err => {\n                const errorHandler = new ErrorHandler(enqueueErrorSnackbar);\n                errorHandler\n                    .on(400, () => {\n                        err.response.body.response.errors.forEach((item: any) => {\n                            console.log(item);\n                            const keyError = item.dataPath.substr(1) + \"Error\";\n                            const keyMessage = item.dataPath.substr(1) + \"Message\";\n                            switch (item.keyword) {\n                                case \"format\":\n                                    setErrors((prev) => ({\n                                        ...prev,\n                                        [keyError]: true,\n                                        [keyMessage]: `${item.dataPath.substr(1)} has invalid format`\n                                    }));\n                                    break;\n                                case \"minLength\":\n                                    setErrors((prev) => ({\n                                        ...prev,\n                                        [keyError]: true,\n                                        [keyMessage]: `${item.dataPath.substr(1)} is too short`\n                                    }));\n                                    break;\n                                case \"maxLength\":\n                                    setErrors((prev) => ({\n                                        ...prev,\n                                        [keyError]: true,\n                                        [keyMessage]: `${item.dataPath.substr(1)} is too long`\n                                    }));\n                                    break;\n                                case \"pattern\":\n                                    setErrors((prev) => ({\n                                        ...prev,\n                                        [keyError]: true,\n                                        [keyMessage]: `${item.dataPath.substr(1)} has wrong pattern`\n                                    }));\n                                    break;\n                            }\n                        });\n                    })\n                    .on(401, `${err.response.body.response.errors.message}`)\n                    .on(409, \"user with this username already exists\")\n                    .handle(err);\n\n            });\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline/>\n            <Box className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon/>\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign up\n                </Typography>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <TextField\n                            autoComplete=\"username\"\n                            variant=\"outlined\"\n                            error={errors.usernameError}\n                            required\n                            fullWidth\n                            name=\"username\"\n                            label=\"Username\"\n                            helperText={errors.usernameMessage}\n                            autoFocus\n                            onChange={handleInput}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            error={errors.emailError}\n                            helperText={errors.emailMessage}\n                            label=\"Email Address\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            onChange={handleInput}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            error={errors.passwordError}\n                            helperText={errors.passwordMessage}\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            autoComplete=\"current-password\"\n                            onChange={handleInput}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FormControlLabel\n                            control={<Checkbox value=\"allowExtraEmails\" color=\"primary\"/>}\n                            label=\"I want to receive inspiration, marketing promotions and updates via email.\"\n                        />\n                    </Grid>\n                </Grid>\n                <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.submit}\n                    onClick={handleRegister}\n                >\n                    Sign Up\n                </Button>\n                <Grid container justify=\"flex-end\">\n                    <Grid item>\n                        <Link href=\"\" variant=\"body2\"\n                              onClick={() => changeRoute({page: \"authorization\"})}>\n                            Already have an account? Sign in\n                        </Link>\n                    </Grid>\n                </Grid>\n            </Box>\n        </Container>\n    );\n});\nSignUpPage.displayName = \"SignUpPage\";\nSignUpPage.propTypes = {};\n\nexport default withStyles(styles)(SignUpPage);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {Ref, useEffect} from \"react\";\nimport styles from \"./styles\";\nimport {Box, withStyles} from \"@material-ui/core\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport Header from \"../../components/Header\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport {Route, Switch, useLocation} from \"react-router-dom\";\nimport AuthorizationPageView from \"../../views/AuthorizationPageView/AuthorizationPageView\";\nimport SignUpPage from \"../../views/SignUpPage/SignUpPage\";\nimport {ChangeRouteProvider, useChangeRoute} from \"routing-manager\";\n\n/**\n * MainPageLayoutProps - interface for MainPageLayout component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface MainPageLayoutProps extends Stylable {\n\n}\n\n/**\n * MainPageLayout - creates main static part of page while user is not registered or logged in\n * @function\n * @author Andrii Demchyshyn\n */\nconst MainPageLayout = React.forwardRef((props: MainPageLayoutProps, ref: Ref<any>) => {\n    const {\n        classes,\n        className,\n    } = props;\n\n    const {changeRoute} = useChangeRoute();\n    const location = useLocation();\n\n    useEffect(() => {\n        if (location.pathname === \"/\") {\n            changeRoute({page: \"authorization\", id: null});\n        }\n    }, []);\n\n    return (\n        <Box>\n            <Header/>\n            <main>\n                <Toolbar/>\n                <Switch>\n                    <Route path=\"/authorization\">\n                        <ChangeRouteProvider routeMask=\"(/:id)\">\n                            <AuthorizationPageView/>\n                        </ChangeRouteProvider>\n                    </Route>\n                    <Route path=\"/signUp\">\n                        <ChangeRouteProvider routeMask=\"(/:id)\">\n                            <SignUpPage/>\n                        </ChangeRouteProvider>\n                    </Route>\n                </Switch>\n            </main>\n        </Box>\n    );\n});\n\nexport default withStyles(styles)(MainPageLayout);","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 04.11.2020, 22:38\n * All rights reserved.\n */\n\nimport React, {Ref} from \"react\";\nimport styles from \"./styles\";\nimport {withStyles} from \"@material-ui/core\";\nimport Stylable from \"../../interfaces/Stylable\";\nimport useAuth from \"../../hooks/useAuth\";\nimport MonitorLayout from \"../MonitorLayout\";\nimport MainPageLayout from \"../MainPageLayout\";\nimport {ChangeRouteProvider} from \"routing-manager\";\n\n/**\n * ChooseLayoutProps - interface for ChooseLayout component\n * @interface\n * @author Andrii Demchyshyn\n */\ninterface ChooseLayoutProps extends Stylable {\n\n}\n\n/**\n * ChooseLayout - switches between main pages for new and registered users\n * @function\n * @author Andrii Demchyshyn\n */\nconst ChooseLayout = React.forwardRef((props: ChooseLayoutProps, ref: Ref<any>) => {\n    const {getUser, isLogged} = useAuth();\n    const user = getUser();\n\n    return (\n        <React.Fragment>\n            <ChangeRouteProvider routeMask=\"(/:page)\">\n                {user ?\n                    <MonitorLayout/>\n                    :\n                    <MainPageLayout/>\n                }\n            </ChangeRouteProvider>\n        </React.Fragment>\n    );\n});\n\nexport default withStyles(styles)(ChooseLayout);\n","/*\n * Copyright (c) 2020. This code created and belongs to Atlas render manager project.\n * Owner and project architect: Danil Andreev | danssg08@gmail.com |  https://github.com/DanilAndreev\n * Project: atlas-monitor\n * File last modified: 12.11.2020, 14:01\n * All rights reserved.\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {AuthProvider} from \"./hooks/useAuth\";\nimport {SnackbarProvider} from \"notistack\";\nimport ChooseLayout from \"./layout/ChooseLayout\";\nimport {ConfirmProvider} from \"./hooks/useConfirm\";\nimport {ThemeProvider} from \"@material-ui/core/styles\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <AuthProvider>\n            <ThemeProvider theme={theme}>\n                <ConfirmProvider>\n                    <BrowserRouter>\n                        <SnackbarProvider maxSnack={3}>\n                            <ChooseLayout/>\n                        </SnackbarProvider>\n                    </BrowserRouter>\n                </ConfirmProvider>\n            </ThemeProvider>\n        </AuthProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}